exports.id=810,exports.ids=[810],exports.modules={33759:(e,n,t)=>{Promise.resolve().then(t.bind(t,55523)),Promise.resolve().then(t.bind(t,190)),Promise.resolve().then(t.bind(t,49680)),Promise.resolve().then(t.bind(t,54536)),Promise.resolve().then(t.bind(t,20275)),Promise.resolve().then(t.bind(t,97388)),Promise.resolve().then(t.bind(t,74655))},67304:(e,n,t)=>{Promise.resolve().then(t.t.bind(t,18309,23)),Promise.resolve().then(t.t.bind(t,25964,23)),Promise.resolve().then(t.t.bind(t,66283,23)),Promise.resolve().then(t.t.bind(t,85999,23)),Promise.resolve().then(t.t.bind(t,88586,23)),Promise.resolve().then(t.t.bind(t,23437,23))},40389:(e,n,t)=>{"use strict";var a=function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.AIAgentENSClient=void 0;let r=t(80763),f=t(34833),s=a(t(48825)),i=a(t(47026));class o{constructor(e,n,t,a,f,s){this.publicClient=null,this.chain=e,this.adapter=t,this.publicClient=(0,r.createPublicClient)({chain:e,transport:(0,r.http)(n)}),this.ensRegistryAddress=a,this.ensResolverAddress=f,this.identityRegistryAddress=s}getEnsRegistryAddress(){return this.ensRegistryAddress}getEnsResolverAddress(){return this.ensResolverAddress}isL1(){return!this.isL2()}isL2(){return!1}getChainType(){return this.isL2()?"L2":"L1"}encodeCall(e,n,t){return new f.ethers.Interface(e).encodeFunctionData(n,t)}async encodeSetNameUri(e,n){let t=(0,r.namehash)(e);return(0,r.encodeFunctionData)({abi:i.default.abi,functionName:"setText",args:[t,"url",n]})}async prepareSetNameUriCalls(e,n){let t=[],a=await this.encodeSetNameUri(e,n);if(this.publicClient){let e=this.getEnsResolverAddress();console.info("++++++++++++++++++++ prepareSetNameUriCalls: chain",this.publicClient?.chain?.id),console.info("++++++++++++++++++++ prepareSetNameUriCalls: resolver",e),t.push({to:e,data:a})}return{calls:t}}async prepareAddAgentInfoCalls(e){return{calls:[]}}async encodeSetNameAgentIdentity(e,n){let t=(this.chain.id>>>0).toString(16).padStart(8,"0"),a=this.identityRegistryAddress.slice(2).toLowerCase().padStart(40,"0"),f=n.toString(16),s=Math.ceil(f.length/2),o="0x0101"+t+a+s.toString(16).padStart(2,"0")+f.padStart(2*s,"0"),d=(0,r.namehash)(e);return(0,r.encodeFunctionData)({abi:i.default.abi,functionName:"setText",args:[d,"agent-identity",o]})}async prepareSetNameAgentIdentityCalls(e,n){let t=await this.encodeSetNameAgentIdentity(e,n),a=[];if(this.publicClient){let n=(0,r.namehash)(e),f=await this.publicClient.readContract({address:this.ensRegistryAddress,abi:[{name:"resolver",stateMutability:"view",type:"function",inputs:[{name:"node",type:"bytes32"}],outputs:[{type:"address"}]}],functionName:"resolver",args:[n]});a.push({to:f,data:t})}return{calls:a}}async isValidAgentAccount(e){return!!this.publicClient&&!!await this.publicClient.getBytecode({address:e})}async getAgentIdentityByAccount(e){this.ensRegistryAddress;let n=e.toLowerCase(),t=(0,r.namehash)(`${n.slice(2)}.addr.reverse`),a=null;try{a=await this.publicClient?.readContract({address:this.ensRegistryAddress,abi:[{name:"resolver",type:"function",stateMutability:"view",inputs:[{name:"node",type:"bytes32"}],outputs:[{name:"",type:"address"}]}],functionName:"resolver",args:[t]})}catch{}if(!a||"0x0000000000000000000000000000000000000000"===a)return{agentId:null,ensName:null};let f=null;try{f=await this.publicClient?.readContract({address:a,abi:i.default.abi,functionName:"name",args:[t]}).catch(()=>null),"string"==typeof f&&f||(f=null)}catch{}let s=null;if(f){let e=(0,r.namehash)(f);try{let n=await this.publicClient?.readContract({address:a,abi:i.default.abi,functionName:"text",args:[e,"agent-identity"]}).catch(()=>null),t=this.decodeAgentIdentity(n);s=t?.agentId??null}catch{}}return{agentId:s,ensName:f}}async getAgentIdentityByName(e){let n=e.trim().toLowerCase();if(!n)return{agentId:null,account:null};console.info("++++++++++++++++++++ getAgentIdentityByName: ensName",n),console.info("++++++++++++++++++++ getAgentIdentityByName: this.ensRegistryAddress",this.ensRegistryAddress),console.info("++++++++++++++++++++ getAgentIdentityByName: adapter",this.adapter);let t=(0,r.namehash)(n),a=null;try{a=await this.publicClient?.readContract({address:this.ensRegistryAddress,abi:[{name:"resolver",type:"function",stateMutability:"view",inputs:[{name:"node",type:"bytes32"}],outputs:[{name:"",type:"address"}]}],functionName:"resolver",args:[t]})}catch(e){return console.info("++++++++++++++++++++ getAgentIdentityByName 1: error",e),{agentId:null,account:null}}if(!a||"0x0000000000000000000000000000000000000000"===a)return{agentId:null,account:null};let f=null;try{let e=await this.publicClient?.readContract({address:a,abi:i.default.abi,functionName:"text",args:[t,"agent-identity"]}).catch(()=>null);if(console.info("################ getAgentIdentityByName: value",e),!e||"0x"===e||""===e)return console.info("++++++++++++++++++++ getAgentIdentityByName: empty agent-identity text record"),{agentId:null,account:null};let n=this.decodeAgentIdentity(e);f=n?.agentId??null}catch(e){return console.info("++++++++++++++++++++ getAgentIdentityByName 2: error",e),{agentId:null,account:null}}return{agentId:f,account:null}}async hasAgentNameOwner(e,n){let t=e=>(e||"").trim().toLowerCase(),a=t(e),f=t(n).replace(/\s+/g,"-"),s=`${f}.${a}.eth`,i=(0,r.namehash)(s);try{let e=await this.publicClient?.readContract({address:this.ensRegistryAddress,abi:[{name:"owner",type:"function",stateMutability:"view",inputs:[{type:"bytes32"}],outputs:[{type:"address"}]}],functionName:"owner",args:[i]}),n=e&&"0x0000000000000000000000000000000000000000"!==e;return console.info(`hasAgentNameOwner: "${s}" ${n?"HAS owner":"has NO owner"}${n?`: ${e}`:""}`),n}catch(e){return console.error("Error checking agent name owner:",e),!1}}async getAgentAccountByName(e){let n=e.trim().toLowerCase();if(!n)return null;let t=(0,r.namehash)(n),a=null;try{console.info("try and get resolver for node"),console.info("ensName: ",n),console.info("this.ensRegistryAddress: ",this.ensRegistryAddress),a=await this.publicClient?.readContract({address:this.ensRegistryAddress,abi:[{name:"resolver",type:"function",stateMutability:"view",inputs:[{name:"node",type:"bytes32"}],outputs:[{name:"",type:"address"}]}],functionName:"resolver",args:[t]}),console.info("resolverAddr: ",a)}catch{}if(!a||"0x0000000000000000000000000000000000000000"===a)return null;try{console.info("try and get addr for node using resolver");let e=await this.publicClient?.readContract({address:a,abi:i.default.abi,functionName:"addr",args:[t]}).catch(()=>null);if(console.info("addr: ",e),e&&/^0x[a-fA-F0-9]{40}$/.test(e)&&"0x0000000000000000000000000000000000000000"!==e)return e}catch{}return null}async getAgentUrlByName(e){let n=e.trim().toLowerCase();if(!n)return null;let t=(0,r.namehash)(n),a=null;try{a=await this.publicClient?.readContract({address:this.ensRegistryAddress,abi:[{name:"resolver",type:"function",stateMutability:"view",inputs:[{name:"node",type:"bytes32"}],outputs:[{name:"",type:"address"}]}],functionName:"resolver",args:[t]})}catch{}if(!a||"0x0000000000000000000000000000000000000000"===a)return null;try{let e=(await this.publicClient?.readContract({address:a,abi:i.default.abi,functionName:"text",args:[t,"url"]}).catch(()=>null)||"").trim();return e.length>0?e:null}catch{return null}}async getAgentNameByAccount(e){this.ensRegistryAddress;let n=e.toLowerCase(),t=(0,r.namehash)(`${n.slice(2)}.addr.reverse`),a=null;try{a=await this.publicClient?.readContract({address:this.ensRegistryAddress,abi:[{name:"resolver",type:"function",stateMutability:"view",inputs:[{name:"node",type:"bytes32"}],outputs:[{name:"",type:"address"}]}],functionName:"resolver",args:[t]})}catch{}if(!a||"0x0000000000000000000000000000000000000000"===a)return null;try{let e=(await this.publicClient?.readContract({address:a,abi:i.default.abi,functionName:"name",args:[t]}).catch(()=>null)||"").trim().toLowerCase();return e.length>0?e:null}catch{return null}}async prepareSetAgentNameInfoCalls(e){let n=e=>(e||"").trim().toLowerCase(),t=n(e.orgName),a=n(e.agentName).replace(/\s+/g,"-"),f=`${a}.${t}.eth`,s=(0,r.namehash)(f),i=[];if(this.publicClient){let n=await this.publicClient.readContract({address:this.ensRegistryAddress,abi:[{name:"resolver",stateMutability:"view",type:"function",inputs:[{name:"node",type:"bytes32"}],outputs:[{type:"address"}]}],functionName:"resolver",args:[s]}),t=(0,r.encodeFunctionData)({abi:[{name:"setAddr",type:"function",stateMutability:"nonpayable",inputs:[{name:"node",type:"bytes32"},{name:"a",type:"address"}]}],functionName:"setAddr",args:[s,e.agentAddress]});if(i.push({to:n,data:t}),e.agentUrl&&""!==e.agentUrl.trim()){let t=this.encodeCall([{name:"setAddr",type:"function",stateMutability:"nonpayable",inputs:[{name:"node",type:"bytes32"},{name:"addr",type:"address"}],outputs:[]},{name:"setText",type:"function",stateMutability:"nonpayable",inputs:[{name:"node",type:"bytes32"},{name:"key",type:"string"},{name:"value",type:"string"}],outputs:[]}],"setText(bytes32,string,string)",[s,"url",e.agentUrl.trim()]);i.push({to:n,data:t})}let a=(0,r.namehash)(e.agentAddress.slice(2).toLowerCase()+".addr.reverse"),o=(0,r.namehash)("addr.reverse"),d=this.ensRegistryAddress,b=await this.publicClient.readContract({address:d,abi:[{name:"owner",type:"function",stateMutability:"view",inputs:[{name:"node",type:"bytes32"}],outputs:[{name:"",type:"address"}]}],functionName:"owner",args:[o]});await this.publicClient.readContract({address:d,abi:[{name:"owner",type:"function",stateMutability:"view",inputs:[{name:"node",type:"bytes32"}],outputs:[{name:"",type:"address"}]}],functionName:"owner",args:[a]});let l=(0,r.encodeFunctionData)({abi:[{name:"setName",type:"function",stateMutability:"nonpayable",inputs:[{name:"name",type:"string"}],outputs:[{name:"node",type:"bytes32"}]}],functionName:"setName",args:[f]});i.push({to:b,data:l,value:0n})}return{calls:i}}async prepareAddAgentNameToOrgCalls(e){let n=e=>(e||"").trim().toLowerCase(),t=n(e.orgName),a=n(e.agentName).replace(/\s+/g,"-");console.info("@@@@@@@@@@@@@@@@@@@ parent: ",t),console.info("@@@@@@@@@@@@@@@@@@@ label: ",a),console.info("@@@@@@@@@@@@@@@@@@@ agentAddress: ",e.agentAddress),console.info("@@@@@@@@@@@@@@@@@@@ NEXT_PUBLIC_ETH_SEPOLIA_ENS_PUBLIC_RESOLVER: ","0xE99638b40E4Fff0129D56f03b55b6bbC4BBE49b5");let f=(0,r.namehash)(t+".eth"),i=[];return i.push({to:"0x0635513f179D50A207757E05759CbD106d7dFcE8",data:(0,r.encodeFunctionData)({abi:s.default.abi,functionName:"setSubnodeRecord",args:[f,a,e.agentAddress,"0xE99638b40E4Fff0129D56f03b55b6bbC4BBE49b5",0,0,0]}),value:0n}),{calls:i}}decodeAgentIdentity(e){try{if(!e||!/^0x[0-9a-fA-F]+$/.test(e))return null;let n=e.slice(2);if(n.length<54)return null;let t=n.slice(4,12),a=parseInt(t,16),r=n.slice(12,52),f=parseInt(n.slice(52,54),16),s=n.slice(54,54+2*f),i=`0x${r}`,o=BigInt(`0x${s||"0"}`);return{chainId:a,registry:i,agentId:o}}catch{return null}}}n.AIAgentENSClient=o},94724:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.AIAgentIdentityClient=void 0;let a=t(80763),r=t(34833),f=t(98744),s=t(6573),i=function(e){return e&&e.__esModule?e:{default:e}}(t(38436));class o extends s.IdentityClient{constructor(e,n,t){super(null,t),this.publicClient=null,this.chain=this.getChainById(e),this.publicClient=(0,a.createPublicClient)({chain:this.chain,transport:(0,a.http)(n)}),this.identityRegistryAddress=t}getChainById(e){switch(e){case 11155111:return f.sepolia;case 84532:return f.baseSepolia;case 11155420:return f.optimismSepolia;default:return console.warn(`Unknown chainId ${e}, defaulting to ETH Sepolia`),f.sepolia}}async getMetadata(e,n){let t=await this.publicClient?.readContract({address:this.identityRegistryAddress,abi:i.default,functionName:"getMetadata",args:[e,n]});return(0,a.hexToString)(t)}encodeCall(e,n,t){return new r.ethers.Interface(e).encodeFunctionData(n,t)}async encodeRegisterWithMetadata(e,n=[]){let t=n.map(e=>({key:e.key,value:this.stringToBytes(e.value)}));return this.encodeCall(i.default,"register(string,(string,bytes)[])",[e,t])}async encodeRegister(e,n,t){return console.info("name: ",e),console.info("agentAccount: ",n),await this.encodeRegisterWithMetadata(t,[{key:"agentName",value:e},{key:"agentAccount",value:n}])}async prepareRegisterCalls(e,n,t){let a=await this.encodeRegisterWithMetadata(t,[{key:"agentName",value:e},{key:"agentAccount",value:n}]),r=[];return r.push({to:this.identityRegistryAddress,data:a}),{calls:r}}async encodeSetRegistrationUri(e,n){return(0,a.encodeFunctionData)({abi:i.default,functionName:"setAgentUri",args:[e,n]})}async prepareSetRegistrationUriCalls(e,n){let t=[],a=await this.encodeSetRegistrationUri(e,n);return t.push({to:this.identityRegistryAddress,data:a}),{calls:t}}async isValidAgentAccount(e){return!!this.publicClient&&!!await this.publicClient.getBytecode({address:e})}extractAgentIdFromReceiptPublic(e){if(e?.events){let n=e.events.find(e=>"Registered"===e.name);if(n?.args){let e=n.args.agentId??n.args[0];if(void 0!==e)return BigInt(e)}let t=e.events.find(e=>"Transfer"===e.name&&("0x0000000000000000000000000000000000000000"===e.args.from||0===e.args.from||0n===e.args.from));if(t?.args){let e=t.args.tokenId??t.args[2];if(void 0!==e)return BigInt(e)}}if(e?.logs&&Array.isArray(e.logs)){for(let n of e.logs)if(n.topics&&"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"===n.topics[0]&&"0x0000000000000000000000000000000000000000000000000000000000000000"===n.topics[1])return BigInt(n.topics[3]||n.data)}throw Error("Could not extract agentId from transaction receipt - Registered or Transfer event not found")}async getAgentEoaByAgentAccount(e){return this.publicClient?await this.publicClient.readContract({address:e,abi:[{name:"owner",type:"function",stateMutability:"view",inputs:[],outputs:[{type:"address"}]}],functionName:"owner"}):null}async getAgentName(e){try{let n=await this.getMetadata(e,"agentName");if("string"==typeof n){let e=n.trim();return e.length>0?e:null}return n?String(n):null}catch(e){return console.info("++++++++++++++++++++++++ getAgentName: error",e),null}}async getAgentAccount(e){try{let n=await this.getMetadata(e,"agentAccount");if(!n)return null;if("string"==typeof n){let e=n.trim();if(e.startsWith("eip155:")){let n=e.split(":")[2];if(n&&/^0x[a-fA-F0-9]{40}$/.test(n))return n}if(/^0x[a-fA-F0-9]{40}$/.test(e))return e}return null}catch{return null}}extractAgentIdFromLogs(e){return this.extractAgentIdFromReceiptPublic(e)}}n.AIAgentIdentityClient=o},28195:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.AIAgentL2ENSDurenClient=void 0;let a=t(80763),r=t(40389);class f extends r.AIAgentENSClient{constructor(e,n,t,a,r,f){super(e,n,t,"0x119bFf40969bFBe0438c3f72f3855958E8E0d30c","0x119bFf40969bFBe0438c3f72f3855958E8E0d30c",f)}isL2(){return!0}isL1(){return!1}getChainType(){return"L2"}async getAgentUrlByName(e){console.info("AIAgentL2ENSDurenClient.getAgentUrlByName: ",e);try{let n=(0,a.namehash)(e);console.info("AIAgentL2ENSDurenClient.getAgentUrlByName: node",n);let t=this.getEnsResolverAddress(),r=(0,a.createPublicClient)({chain:this.chain,transport:(0,a.http)(this.rpcUrl)}),f=await r.readContract({address:t,abi:[{inputs:[{internalType:"bytes32",name:"node",type:"bytes32"},{internalType:"string",name:"key",type:"string"}],name:"text",outputs:[{internalType:"string",name:"",type:"string"}],stateMutability:"view",type:"function"}],functionName:"text",args:[n,"url"]});if(console.info("AIAgentL2ENSDurenClient.getAgentUrlByName: resolved url",f),!f||""===f.trim())return null;return f}catch(n){return console.error("Error resolving URL for name:",e,n),null}}async getAgentAccountByName(e){console.info("AIAgentL2ENSDurenClient.getAgentAccountByName: ",e);try{let n=(0,a.namehash)(e);console.info(".....node from hash: ",e," is: ",n),console.info("AIAgentL2ENSDurenClient.getAgentAccountByName: node",n),console.info("********************* TEST: Checking if NFT exists for name:",e);let t=this.getEnsRegistryAddress();console.info("********************* TEST: Public client chain",this.chain),console.info("********************* TEST: Public client rpcUrl",this.rpcUrl);let r=(0,a.createPublicClient)({chain:this.chain,transport:(0,a.http)(this.rpcUrl)});try{let a=await r.readContract({address:t,abi:[{inputs:[{internalType:"bytes32",name:"node",type:"bytes32"}],name:"owner",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}],functionName:"owner",args:[n]});console.info("********************* TEST: ENS Registry owner for",e,":",a),a&&"0x0000000000000000000000000000000000000000"!==a?console.info("********************* TEST: NFT EXISTS - Name has owner:",a):console.info("********************* TEST: NFT DOES NOT EXIST - No owner found")}catch(e){console.error("********************* TEST: Error checking ENS registry:",e)}let f=this.getEnsResolverAddress(),s=await r.readContract({address:f,abi:[{inputs:[{internalType:"bytes32",name:"node",type:"bytes32"}],name:"addr",outputs:[{internalType:"address",name:"",type:"address"}],stateMutability:"view",type:"function"}],functionName:"addr",args:[n]});if(console.info("AIAgentL2ENSDurenClient.getAgentAccountByName: resolved address",s),console.info("********************* TEST: Address resolution result:",s),!s||"0x0000000000000000000000000000000000000000"===s)return null;return s}catch(n){return console.error("Error resolving address for name:",e,n),null}}async hasAgentNameOwner(e,n){console.info("AIAgentL2ENSDurenClient.hasAgentNameOwner");let t=e=>(e||"").trim().toLowerCase(),r=t(e),f=t(n).replace(/\s+/g,"-");console.info("AIAgentL2ENSDurenClient.hasAgentNameOwner: label",f),console.info("AIAgentL2ENSDurenClient.hasAgentNameOwner: parent",r);let s=`${f}.${r}`;console.info("AIAgentL2ENSDurenClient.hasAgentNameOwner: fullSubname",s);let i=(0,a.createPublicClient)({chain:this.chain,transport:(0,a.http)(this.rpcUrl)});try{let e=await i.readContract({address:"0x68CAd072571E8bea1DA9e5C071367Aa6ddC8F37F",abi:[{inputs:[{internalType:"string",name:"label",type:"string"}],name:"available",outputs:[{internalType:"bool",name:"available",type:"bool"}],stateMutability:"view",type:"function"}],functionName:"available",args:[f]}),n=!e;return console.info(`AIAgentL2ENSDurenClient.hasAgentNameOwner: "${s}" (label: "${f}") ${n?"HAS owner":"has NO owner"} (available: ${e})`),n}catch(e){return console.error("Error checking agent name owner via registrar:",e),!1}}async prepareAddAgentNameToOrgCalls(e){console.log("AIAgentL2ENSDurenClient.prepareAddAgentNameToOrgCalls"),console.log("orgName: ",e.orgName),console.log("agentName: ",e.agentName),console.log("agentAddress: ",e.agentAddress),console.log("agentUrl: ",e.agentUrl);let n=e=>(e||"").trim().toLowerCase(),t=n(e.orgName)+".eth",a=n(e.agentName).replace(/\s+/g,"-"),r=`${a}.${t}`,f=e.agentAddress,s=e.agentUrl,i=this.chain.name.toLowerCase().replace(/\s+/g,"-");console.info("parent: ",t),console.info("label: ",a),console.info("fullSubname: ",r),console.info("agentAddress: ",f),console.info("chainName: ",i),console.info("agentUrl: ",s);let o=[];try{let e=await this.registerSubdomain(a,f);o.push(...e.calls)}catch(e){throw console.error("Error preparing agent name calls:",e),e}return{calls:o}}async prepareAddAgentInfoCalls(e){console.log("AIAgentL2ENSDurenClient.prepareAddAgentNameToOrgCalls"),console.log("orgName: ",e.orgName),console.log("agentName: ",e.agentName),console.log("agentAddress: ",e.agentAddress),console.log("agentUrl: ",e.agentUrl);let n=e=>(e||"").trim().toLowerCase(),t=n(e.orgName)+".eth",a=n(e.agentName).replace(/\s+/g,"-"),r=`${a}.${t}`,f=e.agentAddress,s=e.agentUrl,i=this.chain.name.toLowerCase().replace(/\s+/g,"-");console.info("parent: ",t),console.info("label: ",a),console.info("fullSubname: ",r),console.info("agentAddress: ",f),console.info("chainName: ",i),console.info("agentUrl: ",s);let o=[];try{let e=this.chain.id;if(84532===e){let e=await this.setResolverAddrRecordDirect(r,2147568164,f);o.push(e)}for(let e of[{key:"url",value:s}]){let n=await this.setResolverTextRecordDirect(r,e.key,e.value);o.push(n)}console.info("Generated calls count: ",o.length),console.info("Calls: ",o)}catch(e){throw console.error("Error preparing agent name calls:",e),e}return{calls:o}}async prepareSetNameUriCalls(e,n){return{calls:[]}}async registerSubdomain(e,n){console.log("AIAgentL2ENSDurenClient.registerSubdomain"),console.log("subdomain:",e),console.log("owner:",n);let t=[];return t.push({to:"0x68CAd072571E8bea1DA9e5C071367Aa6ddC8F37F",data:(0,a.encodeFunctionData)({abi:[{inputs:[{internalType:"string",name:"name",type:"string"},{internalType:"address",name:"owner",type:"address"}],name:"register",outputs:[],stateMutability:"nonpayable",type:"function"}],functionName:"register",args:[e,n]}),value:0n}),{calls:t}}async setResolverTextRecordDirect(e,n,t){console.log("AIAgentL2ENSDurenClient.setResolverTextRecordDirect"),console.log("name:",e),console.log("key:",n),console.log("value:",t);let r=this.getEnsResolverAddress(),f=(0,a.namehash)(e);return{to:r,data:(0,a.encodeFunctionData)({abi:[{inputs:[{internalType:"bytes32",name:"node",type:"bytes32"},{internalType:"string",name:"key",type:"string"},{internalType:"string",name:"value",type:"string"}],name:"setText",outputs:[],stateMutability:"nonpayable",type:"function"}],functionName:"setText",args:[f,n,t]})}}async setResolverAddrRecordDirect(e,n,t){let r;console.log("AIAgentL2ENSDurenClient.setResolverAddrRecordDirect"),console.log("name:",e),console.log("coinType:",n),console.log("address:",t);let f=this.getEnsResolverAddress(),s=(0,a.namehash)(e);return r=2147568164===n?(0,a.encodeFunctionData)({abi:[{inputs:[{internalType:"address",name:"addr",type:"address"}],name:"f",outputs:[],stateMutability:"nonpayable",type:"function"}],functionName:"f",args:[t]}):t.padEnd(66,"0"),console.log("node:",s),console.log("encodedAddress:",r),{to:f,data:(0,a.encodeFunctionData)({abi:[{inputs:[{internalType:"bytes32",name:"node",type:"bytes32"},{internalType:"uint256",name:"coinType",type:"uint256"},{internalType:"bytes",name:"a",type:"bytes"}],name:"setAddr",outputs:[],stateMutability:"nonpayable",type:"function"}],functionName:"setAddr",args:[s,BigInt(n),r]})}}}n.AIAgentL2ENSDurenClient=f},7141:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.AIAgentL2ENSNamespaceClient=void 0;let a=t(80763),r=t(40389),f=t(16470),s=t(70754),i=t(98744);class o extends r.AIAgentENSClient{constructor(e,n,t,a,r,f){super(e,n,t,a,r,f),this.namespaceClient=null,this.initializeNamespaceClient()}isL2(){return!0}isL1(){return!1}getChainType(){return"L2"}initializeNamespaceClient(){try{let e=(0,f.createMintClient)({isTestnet:!0,cursomRpcUrls:{[i.sepolia.id]:"https://eth-sepolia.g.alchemy.com/v2/WvEny4nR70VTUMX0DfR-A",[i.baseSepolia.id]:"https://base-sepolia.g.alchemy.com/v2/WvEny4nR70VTUMX0DfR-A",[i.optimismSepolia.id]:"https://opt-mainnet.g.alchemy.com/v2/WvEny4nR70VTUMX0DfR-A"}});this.namespaceClient=e,console.info("Namespace.ninja L2 client initialized successfully")}catch(e){console.error("Failed to initialize namespace.ninja L2 client:",e)}}async getAgentUrlByName(e){if(this.namespaceClient)try{let n=this.chain.id;if(!await this.namespaceClient.isL2SubnameAvailable(e,n)){let n=(0,s.createIndexerClient)(),t=await n.getL2Subname({chainId:this.chain.id,nameOrNamehash:(0,a.namehash)(e)});if(console.info("subname for name: ",e," is: ",t),t&&t.records?.texts?.url)return t.records?.texts?.url}}catch(e){console.error("Error checking L2 subname availability 1:",e)}return null}async getAgentAccountByName(e){if(console.info("AIAgentL2ENSClient.getAgentAccountByName: ",e),this.namespaceClient)try{let n=this.chain.id;if(!await this.namespaceClient.isL2SubnameAvailable(e,n)){console.info("AIAgentL2ENSClient.getAgentAccountByName: not available");let n=(0,s.createIndexerClient)(),t=await n.getL2Subname({chainId:this.chain.id,nameOrNamehash:(0,a.namehash)(e)});if(console.info("AIAgentL2ENSClient.getAgentAccountByName: subname: ",t),t)return console.info("AIAgentL2ENSClient.getAgentAccountByName: subname.owner: ",t.owner),t.owner}}catch(e){console.error("Error checking L2 subname availability 2:",e)}return null}getNamespaceClient(){return this.namespaceClient}async hasAgentNameOwner(e,n){console.info("AIAgentL2ENSNamespaceClient.hasAgentNameOwner");let t=e=>(e||"").trim().toLowerCase(),a=t(e)+".eth",r=t(n).replace(/\s+/g,"-"),f=`${r}.${a}`;if(this.namespaceClient)try{let e=this.chain.id,n=!await this.namespaceClient.isL2SubnameAvailable(f,e);return console.info(`AIAgentL2ENSNamespaceClient.hasAgentNameOwner: "${f}" ${n?"HAS owner":"has NO owner"}`),n}catch(e){console.error("Error checking agent name owner:",e)}return!1}async prepareAddAgentNameToOrgCalls(e){console.log("AIAgentL2ENSClient.prepareAddAgentNameToOrgCalls"),console.log("orgName: ",e.orgName),console.log("agentName: ",e.agentName),console.log("agentAddress: ",e.agentAddress);let n=e=>(e||"").trim().toLowerCase(),t=n(e.orgName)+".eth",r=n(e.agentName).replace(/\s+/g,"-"),f=e.agentAddress,s=e.agentUrl,i=this.chain.name.toLowerCase().replace(/\s+/g,"-");console.info("parent: ",t),console.info("label: ",r),console.info("agentAddress: ",f),console.info("chainName: ",i),console.info("agentUrl: ",s);let o={parentName:t,label:r,owner:f,minterAddress:f,records:{texts:[{key:"name",value:r},{key:"url",value:s},{key:"description",value:`Agent: ${r}`},{key:"chain",value:i},{key:"agent-account",value:f}],addresses:[{chain:60,value:f}]}};console.info("mintRequest: ",o);let d=await this.namespaceClient.getMintTransactionParameters(o);console.info("mintParams: ",d);let{to:b,data:l,value:c}={to:d.contractAddress,data:(0,a.encodeFunctionData)({abi:d.abi,functionName:d.functionName,args:d.args}),value:d.value||0n};return{calls:[{to:b,data:l,value:c}]}}async prepareSetNameUriCalls(e,n){return{calls:[]}}}n.AIAgentL2ENSNamespaceClient=o},5480:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.AIAgentReputationClient=void 0;let a=t(34833),r=t(98744),f=t(6573),s=function(e){return e&&e.__esModule?e:{default:e}}(t(75441));class i extends f.ReputationClient{constructor(e,n,t,a,f){super(e,t,a),this.publicClient=null,this.chain=r.sepolia,this.publicClient=e.publicClient,this.clientAdapter=n,this.agentAdapter=e,this.reputationAddress=t,this.ensRegistryAddress=f}getIdentityRegistry(){return f.ReputationClient.prototype.getIdentityRegistry.call(this)}getLastIndex(e,n){return f.ReputationClient.prototype.getLastIndex.call(this,e,n)}createFeedbackAuth(e,n,t,a,r,s){return f.ReputationClient.prototype.createFeedbackAuth.call(this,e,n,t,a,r,s)}signFeedbackAuth(e){return f.ReputationClient.prototype.signFeedbackAuth.call(this,e)}static async create(e,n,t,a){let r;try{if(!(r=await e.call(t,s.default,"getIdentityRegistry",[]))||"0x0000000000000000000000000000000000000000"===r)throw Error("Empty identity registry")}catch(e){throw Error(`Failed to resolve identity registry from reputation registry: ${e?.message||e}`)}return new i(e,n,t,r,a)}async giveClientFeedback(e){if(e.score<0||e.score>100)throw Error("Score MUST be between 0 and 100");let n=e.tag1?a.ethers.id(e.tag1).slice(0,66):a.ethers.ZeroHash,t=e.tag2?a.ethers.id(e.tag2).slice(0,66):a.ethers.ZeroHash,r=e.feedbackHash||a.ethers.ZeroHash,f=e.feedbackUri||"";return{txHash:(await this.clientAdapter.send(this.reputationAddress,s.default,"giveFeedback",[e.agentId,e.score,n,t,f,r,e.feedbackAuth])).txHash}}}n.AIAgentReputationClient=i},50767:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.OrgIdentityClient=void 0;let a=t(80763),r=t(98744);class f{constructor(e,n){this.publicClient=null,this.adapter=e,this.ensRegistryAddress=n?.ensRegistry||"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",n?.rpcUrl&&(this.publicClient=(0,a.createPublicClient)({chain:r.sepolia,transport:(0,a.http)(n.rpcUrl)}))}async getOrgAccountByName(e){let n=this.normalizeEnsName(e);if(!n)return null;let t=this.namehash(n),a=await this.getResolver(t);if(!a)return null;try{let e=await this.adapter.call(a,[{name:"addr",type:"function",stateMutability:"view",inputs:[{name:"node",type:"bytes32"}],outputs:[{name:"",type:"address"}]}],"addr",[t]);if(e&&/^0x[a-fA-F0-9]{40}$/.test(e)&&!this.isZeroAddress(e))return e}catch{}return null}async getOrgEoaByAccount(e){return this.publicClient?await this.publicClient.readContract({address:e,abi:[{name:"owner",type:"function",stateMutability:"view",inputs:[],outputs:[{type:"address"}]}],functionName:"owner"}):null}async getOrgUrlByName(e){let n=this.normalizeEnsName(e);if(!n)return null;let t=this.namehash(n),a=await this.getResolver(t);if(!a)return null;try{let e=(await this.adapter.call(a,[{name:"text",type:"function",stateMutability:"view",inputs:[{name:"node",type:"bytes32"},{name:"key",type:"string"}],outputs:[{name:"",type:"string"}]}],"text",[t,"url"])||"").trim();return e.length>0?e:null}catch{}return null}async getOrgNameByAccount(e){let n=e.toLowerCase(),t=this.namehash(`${n.slice(2)}.addr.reverse`),a=null;try{a=await this.adapter.call(this.ensRegistryAddress,[{name:"resolver",type:"function",stateMutability:"view",inputs:[{name:"node",type:"bytes32"}],outputs:[{name:"",type:"address"}]}],"resolver",[t])}catch{}if(!a||this.isZeroAddress(a))return null;try{let e=(await this.adapter.call(a,[{name:"name",type:"function",stateMutability:"view",inputs:[{name:"node",type:"bytes32"}],outputs:[{name:"",type:"string"}]}],"name",[t])||"").trim().toLowerCase();return e.length>0?e:null}catch{return null}}async getResolver(e){try{let n=await this.adapter.call(this.ensRegistryAddress,[{name:"resolver",type:"function",stateMutability:"view",inputs:[{name:"node",type:"bytes32"}],outputs:[{name:"",type:"address"}]}],"resolver",[e]);if(n&&!this.isZeroAddress(n))return n}catch{}return null}normalizeEnsName(e){let n=(e||"").trim().toLowerCase().replace(/^ens:\s*/i,"");return n?/\./.test(n)?n:`${n}.eth`:""}namehash(e){let{keccak256:n,toUtf8Bytes:a}=t(34833),r="0x"+"00".repeat(32);if(!e)return r;let f=e.split(".");for(let e=f.length-1;e>=0;e--){let t=n(a(f[e]));r=n(Buffer.concat([Buffer.from(r.slice(2),"hex"),Buffer.from(t.slice(2),"hex")]))}return r}isZeroAddress(e){return/^0x0{40}$/i.test(e)}}n.OrgIdentityClient=f},15614:(e,n,t)=>{"use strict";n.jw=n.Fv=n.Cw=n.sk=void 0;var a=t(40389);Object.defineProperty(n,"sk",{enumerable:!0,get:function(){return a.AIAgentENSClient}});var r=t(28195);Object.defineProperty(n,"Cw",{enumerable:!0,get:function(){return r.AIAgentL2ENSDurenClient}}),t(7141);var f=t(94724);Object.defineProperty(n,"Fv",{enumerable:!0,get:function(){return f.AIAgentIdentityClient}}),t(5480);var s=t(50767);Object.defineProperty(n,"jw",{enumerable:!0,get:function(){return s.OrgIdentityClient}})},57718:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.ERC8004Client=void 0;let a=t(11879),r=t(34249),f=t(32330);class s{constructor(e){this.adapter=e.adapter,this.addresses=e.addresses,this.identity=new a.IdentityClient(this.adapter,this.addresses.identityRegistry),this.reputation=new r.ReputationClient(this.adapter,this.addresses.reputationRegistry,this.addresses.identityRegistry),this.validation=new f.ValidationClient(this.adapter,this.addresses.validationRegistry)}async getAddress(){return await this.adapter.getAddress()}async getChainId(){return await this.adapter.getChainId()}getAddresses(){return{...this.addresses}}}n.ERC8004Client=s},11879:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.IdentityClient=void 0;let a=function(e){return e&&e.__esModule?e:{default:e}}(t(7581));class r{constructor(e,n){this.adapter=e,this.contractAddress=n}async register(){let e=await this.adapter.send(this.contractAddress,a.default,"register",[]);return{agentId:this.extractAgentIdFromReceipt(e),txHash:e.txHash}}async registerWithURI(e){let n=await this.adapter.send(this.contractAddress,a.default,"register(string)",[e]);return{agentId:this.extractAgentIdFromReceipt(n),txHash:n.txHash}}async registerWithMetadata(e,n=[]){let t=n.map(e=>({key:e.key,value:this.stringToBytes(e.value)})),r=await this.adapter.send(this.contractAddress,a.default,"register(string,(string,bytes)[])",[e,t]);return{agentId:this.extractAgentIdFromReceipt(r),txHash:r.txHash}}async getTokenURI(e){return await this.adapter.call(this.contractAddress,a.default,"tokenURI",[e])}async setAgentUri(e,n){return{txHash:(await this.adapter.send(this.contractAddress,a.default,"setAgentUri",[e,n])).txHash}}async getOwner(e){return await this.adapter.call(this.contractAddress,a.default,"ownerOf",[e])}async getMetadata(e,n){let t=await this.adapter.call(this.contractAddress,a.default,"getMetadata",[e,n]);return this.bytesToString(t)}async setMetadata(e,n,t){return{txHash:(await this.adapter.send(this.contractAddress,a.default,"setMetadata",[e,n,this.stringToBytes(t)])).txHash}}async getRegistrationFile(e){let n=await this.getTokenURI(e);if(console.log("********************* getRegistrationFile: uri",n),n.startsWith("ipfs://")){let e=n.replace("ipfs://",""),t=`https://ipfs.io/ipfs/${e}`,a=await fetch(t);return await a.json()}if(n.startsWith("https://")||n.startsWith("http://")){let e=await fetch(n);return await e.json()}throw Error(`Unsupported URI scheme: ${n}`)}extractAgentIdFromReceipt(e){if(e.events&&e.events.length>0){let n=e.events.find(e=>"Registered"===e.name);if(n&&n.args)return BigInt(n.args.agentId||n.args[0])}throw Error("Could not extract agentId from transaction receipt - Registered event not found. This usually means the contract is not deployed or the ABI does not match the deployed contract.")}stringToBytes(e){return new TextEncoder().encode(e)}bytesToString(e){if(e instanceof Uint8Array)return new TextDecoder().decode(e);if("string"==typeof e&&e.startsWith("0x")){let n=e.slice(2),t=new Uint8Array(n.length/2);for(let e=0;e<n.length;e+=2)t[e/2]=parseInt(n.slice(e,e+2),16);return new TextDecoder().decode(t)}return e.toString()}}n.IdentityClient=r},34249:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.ReputationClient=void 0;let a=function(e){return e&&e.__esModule?e:{default:e}}(t(53650)),r=t(34833);class f{constructor(e,n,t){this.adapter=e,this.contractAddress=n,this.identityRegistryAddress=t}createFeedbackAuth(e,n,t,a,r,f){return{agentId:e,clientAddress:n,indexLimit:t,expiry:a,chainId:r,identityRegistry:this.identityRegistryAddress,signerAddress:f}}async signFeedbackAuth(e){let n=r.ethers.AbiCoder.defaultAbiCoder().encode(["uint256","address","uint256","uint256","uint256","address","address"],[e.agentId,e.clientAddress,e.indexLimit,e.expiry,e.chainId,e.identityRegistry,e.signerAddress]),t=r.ethers.keccak256(n),a=await this.adapter.signMessage(r.ethers.getBytes(t));return r.ethers.concat([n,a])}async giveFeedback(e){if(e.score<0||e.score>100)throw Error("Score MUST be between 0 and 100");let n=e.tag1?r.ethers.id(e.tag1).slice(0,66):r.ethers.ZeroHash,t=e.tag2?r.ethers.id(e.tag2).slice(0,66):r.ethers.ZeroHash,f=e.feedbackHash||r.ethers.ZeroHash,s=e.feedbackUri||"";return{txHash:(await this.adapter.send(this.contractAddress,a.default,"giveFeedback",[e.agentId,e.score,n,t,s,f,e.feedbackAuth])).txHash}}async revokeFeedback(e,n){return{txHash:(await this.adapter.send(this.contractAddress,a.default,"revokeFeedback",[e,n])).txHash}}async appendResponse(e,n,t,f,s){let i=s||r.ethers.ZeroHash;return{txHash:(await this.adapter.send(this.contractAddress,a.default,"appendResponse",[e,n,t,f,i])).txHash}}async getIdentityRegistry(){return await this.adapter.call(this.contractAddress,a.default,"getIdentityRegistry",[])}async getSummary(e,n,t,f){let s=t?r.ethers.id(t).slice(0,66):r.ethers.ZeroHash,i=f?r.ethers.id(f).slice(0,66):r.ethers.ZeroHash,o=await this.adapter.call(this.contractAddress,a.default,"getSummary",[e,n||[],s,i]);return{count:BigInt(o.count||o[0]),averageScore:Number(o.averageScore||o[1])}}async readFeedback(e,n,t){let r=await this.adapter.call(this.contractAddress,a.default,"readFeedback",[e,n,t]);return{score:Number(r.score||r[0]),tag1:r.tag1||r[1],tag2:r.tag2||r[2],isRevoked:!!(r.isRevoked||r[3])}}async readAllFeedback(e,n,t,f,s){let i=t?r.ethers.id(t).slice(0,66):r.ethers.ZeroHash,o=f?r.ethers.id(f).slice(0,66):r.ethers.ZeroHash,d=await this.adapter.call(this.contractAddress,a.default,"readAllFeedback",[e,n||[],i,o,s||!1]);return{clientAddresses:d.clientAddresses||d[0],scores:(d.scores||d[1]).map(Number),tag1s:d.tag1s||d[2],tag2s:d.tag2s||d[3],revokedStatuses:(d.revokedStatuses||d[4]).map(Boolean)}}async getResponseCount(e,n,t,f){let s=n||r.ethers.ZeroAddress,i=t||BigInt(0);return BigInt(await this.adapter.call(this.contractAddress,a.default,"getResponseCount",[e,s,i,f||[]]))}async getClients(e){return await this.adapter.call(this.contractAddress,a.default,"getClients",[e])}async getLastIndex(e,n){return BigInt(await this.adapter.call(this.contractAddress,a.default,"getLastIndex",[e,n]))}}n.ReputationClient=f},32330:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.ValidationClient=void 0;let a=function(e){return e&&e.__esModule?e:{default:e}}(t(25639)),r=t(34833);class f{constructor(e,n){this.adapter=e,this.contractAddress=n}async validationRequest(e){return{txHash:(await this.adapter.send(this.contractAddress,a.default,"validationRequest",[e.validatorAddress,e.agentId,e.requestUri,e.requestHash])).txHash,requestHash:e.requestHash}}async validationResponse(e){if(e.response<0||e.response>100)throw Error("Response MUST be between 0 and 100");let n=e.responseUri||"",t=e.responseHash||r.ethers.ZeroHash,f=e.tag?r.ethers.id(e.tag).slice(0,66):r.ethers.ZeroHash;return{txHash:(await this.adapter.send(this.contractAddress,a.default,"validationResponse",[e.requestHash,e.response,n,t,f])).txHash}}async getIdentityRegistry(){return await this.adapter.call(this.contractAddress,a.default,"getIdentityRegistry",[])}async getValidationStatus(e){try{let n=await this.adapter.call(this.contractAddress,a.default,"getValidationStatus",[e]);return{validatorAddress:n.validatorAddress||n[0],agentId:BigInt(n.agentId||n[1]),response:Number(n.response||n[2]),responseHash:n.responseHash||n[3],tag:n.tag||n[4],lastUpdate:BigInt(n.lastUpdate||n[5])}}catch(n){if("BAD_DATA"===n.code||n.message?.includes("could not decode result data")){let n=await this.adapter.call(this.contractAddress,[{inputs:[{internalType:"bytes32",name:"requestHash",type:"bytes32"}],name:"getValidationStatus",outputs:[{internalType:"address",name:"validatorAddress",type:"address"},{internalType:"uint256",name:"agentId",type:"uint256"},{internalType:"uint8",name:"response",type:"uint8"},{internalType:"bytes32",name:"tag",type:"bytes32"},{internalType:"uint256",name:"lastUpdate",type:"uint256"}],stateMutability:"view",type:"function"}],"getValidationStatus",[e]);return{validatorAddress:n.validatorAddress||n[0],agentId:BigInt(n.agentId||n[1]),response:Number(n.response||n[2]),responseHash:r.ethers.ZeroHash,tag:n.tag||n[3],lastUpdate:BigInt(n.lastUpdate||n[4])}}throw n}}async getSummary(e,n,t){let f=t?r.ethers.id(t).slice(0,66):r.ethers.ZeroHash,s=await this.adapter.call(this.contractAddress,a.default,"getSummary",[e,n||[],f]);return{count:BigInt(s.count||s[0]),avgResponse:Number(s.avgResponse||s[1])}}async getAgentValidations(e){return await this.adapter.call(this.contractAddress,a.default,"getAgentValidations",[e])}async getValidatorRequests(e){return await this.adapter.call(this.contractAddress,a.default,"getValidatorRequests",[e])}}n.ValidationClient=f},7775:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.EthersAdapter=void 0;let a=t(34833);class r{constructor(e,n){this.provider=e,this.signer=n}getProvider(){return this.provider}getSigner(){return this.signer}async call(e,n,t,r){let f=new a.Contract(e,n,this.provider);return await f[t](...r)}async send(e,n,t,r){if(!this.signer)throw Error("Signer required for write operations");let f=new a.Contract(e,n,this.signer),s=await f[t](...r),i=await s.wait(),o=[];if(i&&i.logs)for(let e of i.logs)try{let n=f.interface.parseLog({topics:[...e.topics],data:e.data});n&&o.push({name:n.name,args:n.args})}catch(e){}return{txHash:i.hash,blockNumber:BigInt(i.blockNumber),receipt:i,events:o}}async getAddress(){return this.signer?await this.signer.getAddress():null}async getChainId(){return Number((await this.provider.getNetwork()).chainId)}async signMessage(e){if(!this.signer)throw Error("Signer required for signing");return await this.signer.signMessage(e)}async signTypedData(e,n,t){if(!this.signer)throw Error("Signer required for signing");if("signTypedData"in this.signer&&"function"==typeof this.signer.signTypedData)return await this.signer.signTypedData(e,n,t);throw Error("Signer does not support EIP-712 typed data signing")}}n.EthersAdapter=r},38550:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0})},6573:(e,n,t)=>{"use strict";var a=Object.create?function(e,n,t,a){void 0===a&&(a=t);var r=Object.getOwnPropertyDescriptor(n,t);(!r||("get"in r?!n.__esModule:r.writable||r.configurable))&&(r={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,a,r)}:function(e,n,t,a){void 0===a&&(a=t),e[a]=n[t]},r=function(e,n){for(var t in e)"default"===t||Object.prototype.hasOwnProperty.call(n,t)||a(n,e,t)};Object.defineProperty(n,"__esModule",{value:!0}),n.ValidationClient=n.ReputationClient=n.IdentityClient=n.ERC8004Client=void 0;var f=t(57718);Object.defineProperty(n,"ERC8004Client",{enumerable:!0,get:function(){return f.ERC8004Client}});var s=t(11879);Object.defineProperty(n,"IdentityClient",{enumerable:!0,get:function(){return s.IdentityClient}});var i=t(34249);Object.defineProperty(n,"ReputationClient",{enumerable:!0,get:function(){return i.ReputationClient}});var o=t(32330);Object.defineProperty(n,"ValidationClient",{enumerable:!0,get:function(){return o.ValidationClient}}),r(t(38550),n),r(t(7775),n),r(t(70458),n)},70458:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0})},55523:(e,n,t)=>{"use strict";t.r(n),t.d(n,{AIAgentENSClientProvider:()=>b,useAgentENSClient:()=>d});var a=t(3109),r=t(70371),f=t(68374),s=t(6573),i=t(15614);let o=r.createContext(null);function d(){let e=r.useContext(o);if(!e)throw Error("useAIAgentENSClient must be used within AIAgentENSClientProvider");return e}function b({children:e}){let n=r.useRef(null);if(!n.current){let e="https://eth-sepolia.g.alchemy.com/v2/WvEny4nR70VTUMX0DfR-A",{ethers:a}=t(34833),r=new a.JsonRpcProvider(e),o=new s.EthersAdapter(r);n.current=new i.sk(f.F,e,o,"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e","0xE99638b40E4Fff0129D56f03b55b6bbC4BBE49b5","0x8004a6090Cd10A7288092483047B097295Fb8847")}return a.jsx(o.Provider,{value:n.current,children:e})}},190:(e,n,t)=>{"use strict";t.d(n,{AIAgentENSClientsProvider:()=>l,v:()=>b});var a=t(3109),r=t(70371),f=t(6573),s=t(15614),i=t(74655),o=t(41663);let d=r.createContext({});function b(e){let n=r.useContext(d),{useAgentENSClient:a}=t(55523);if(e&&n[e])return console.log(`🔍 Switching to ENS client for chain: ${e}`),n[e];let f=Object.keys(n)[0];if(f)return console.log(`🔍 Using first available ENS client: ${f}`),n[f];try{return a?.()??null}catch{return console.log("\uD83D\uDD0D No ENS client available"),null}}function l({children:e}){console.log("\uD83D\uDD0D AIAgentENSClientsProvider component mounted");let{provider:n,address:b}=(0,i.m)(),[l,c]=r.useState({});return r.useEffect(()=>{console.log("\uD83D\uDD0D AIAgentENSClientsProvider useEffect triggered"),console.log("\uD83D\uDD0D web3AuthProvider:",!!n),console.log("\uD83D\uDD0D address:",b),console.log("\uD83D\uDD0D web3AuthProvider type:",typeof n),(async()=>{if(!n||!b){console.log("\uD83D\uDD0D Skipping ENS client creation - missing provider or address");return}console.log("\uD83D\uDD0D Starting ENS client creation...");let e=function(){let e=[];for(let n of o.MU){let t,a;let r=(e=>{switch(e){case 11155111:return"ETH_SEPOLIA";case 84532:return"BASE_SEPOLIA";case 11155420:return"OP_SEPOLIA";default:return"UNKNOWN"}})(n.chainId);switch(n.chainId){case 11155111:t="0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",a="0xE99638b40E4Fff0129D56f03b55b6bbC4BBE49b5";break;case 84532:t="0x1493b2567056c2181630115660963E13A8E32735",a="0x32d63B83BBA5a25f1f8aE308d7fd1F3c0b1abfA6";break;case 11155420:t="0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",a="0x8FADE66BF79Cd7F7d2b6b8C3C2C3C2C3C2C3C2C3";break;default:console.warn(`🔍 Unknown chain ID: ${n.chainId}`),t=void 0,a=void 0}console.log(`🔍 Chain ${n.chainId} (${r}):`),console.log(`🔍   ENS Registry: ${t||"MISSING"}`),console.log(`🔍   ENS Resolver: ${a||"MISSING"}`),t&&a&&e.push({chainIdHex:n.chainIdHex,rpcUrl:n.rpcUrl,identityRegistryAddress:n.identityRegistryAddress,ensRegistryAddress:t,ensResolverAddress:a,chain:n.viemChain,networkType:n.networkType})}return e}();if(console.log("\uD83D\uDD0D Configured chains:",e.length),!e.length){console.log("\uD83D\uDD0D No chains configured");return}let{ethers:a}=t(34833),r={};for(let t of e){console.log(`🔍 Creating ENS client for chain ${t.chainIdHex} (${t.chain.name})`),await n.request({method:"wallet_addEthereumChain",params:[{chainId:t.chainIdHex,chainName:o.hf(t.chainIdHex)?.chainName||"ETH Sepolia",nativeCurrency:{name:"Ether",symbol:"ETH",decimals:18},rpcUrls:[t.rpcUrl]}]}),await n.request({method:"wallet_switchEthereumChain",params:[{chainId:t.chainIdHex}]}),await new Promise(e=>setTimeout(e,1e3));let e=new a.BrowserProvider(n),i=await e.getSigner(),d=i?new f.EthersAdapter(e,i):new f.EthersAdapter(e,void 0),l=new a.JsonRpcProvider(t.rpcUrl),c={signMessage:d.signMessage?.bind(d),provider:l,getAddress:()=>Promise.resolve(b)};console.log(`🔍 Created hybrid ENS adapter for ${t.chain.name} (${t.chainIdHex})`);let p="L2"===t.networkType?new s.Cw(t.chain,t.rpcUrl,c,t.ensRegistryAddress,t.ensResolverAddress,t.identityRegistryAddress):new s.sk(t.chain,t.rpcUrl,c,t.ensRegistryAddress,t.ensResolverAddress,t.identityRegistryAddress);r[t.chainIdHex]=p,console.log(`✅ ENS client created for ${t.chain.name} (${t.chainIdHex})`)}c(r),console.log("\uD83D\uDD0D ENS clients created successfully:",Object.keys(r))})()},[n,b]),a.jsx(d.Provider,{value:l,children:e})}},49680:(e,n,t)=>{"use strict";t.r(n),t.d(n,{AIAgentIdentityClientProvider:()=>b,useAgentIdentityClient:()=>d});var a=t(3109),r=t(70371),f=t(15614),s=t(74655),i=t(68374);let o=r.createContext(null);function d(){return r.useContext(o)||r.useMemo(()=>{let e=async(...e)=>null;return{getAgentName:e,getAgentAccount:e,getAgentIdentityByName:async e=>({agentId:null,account:null}),getAgentAccountByName:e,getAgentUrlByName:e,getAgentEoaByAgentAccount:e}},[])}function b({children:e}){let{provider:n,address:t}=(0,s.m)(),[d,b]=r.useState(null);return r.useEffect(()=>{(async()=>{n&&t&&!d&&b(new f.Fv(i.F.id,"https://eth-sepolia.g.alchemy.com/v2/WvEny4nR70VTUMX0DfR-A","0x8004a6090Cd10A7288092483047B097295Fb8847"))})()},[n,t,d]),d?a.jsx(o.Provider,{value:d,children:e}):a.jsx(a.Fragment,{children:e})}},54536:(e,n,t)=>{"use strict";t.d(n,{AIAgentIdentityClientsProvider:()=>l,u:()=>d,v:()=>b});var a=t(3109),r=t(70371),f=t(15614),s=t(74655),i=t(41663);let o=r.createContext({});function d(){return r.useContext(o)}function b(e){let n=d(),{useAgentIdentityClient:a}=t(49680);if(e&&n[e])return n[e];let r=Object.keys(n)[0];if(r)return n[r];try{return a?.()??null}catch{return null}}function l({children:e}){let{provider:n,address:t}=(0,s.m)(),[d,b]=r.useState({}),[l,c]=r.useState(!1);return r.useEffect(()=>{(async()=>{if(!n||!t||!i.MU.length)return;c(!0);let e={...d};for(let n of(console.info("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! AIAgentIdentityClientsProvider: chains",i.MU),i.MU)){if(e[n.chainIdHex]){console.log(`✓ Client already exists for chain ${n.chainIdHex} (${n.chainName}), skipping`);continue}console.log("\uD83D\uDD0D Creating client for chain",n.chainIdHex,"(",n.chainName,")");let t=new f.Fv(n.chainId,n.rpcUrl,n.identityRegistryAddress);e[n.chainIdHex]=t}Object.keys(e).length!==Object.keys(d).length&&b(e),c(!1)})()},[n,t]),a.jsx(o.Provider,{value:d,children:e})}},20275:(e,n,t)=>{"use strict";t.d(n,{OrgIdentityClientProvider:()=>d,h:()=>o});var a=t(3109),r=t(70371),f=t(6573),s=t(15614);let i=r.createContext(null);function o(){let e=r.useContext(i);if(!e)throw Error("useOrgIdentityClient must be used within OrgIdentityClientProvider");return e}function d({children:e}){let n=r.useRef(null);if(!n.current){let{ethers:e}=t(34833),a=new e.JsonRpcProvider("https://eth-sepolia.g.alchemy.com/v2/WvEny4nR70VTUMX0DfR-A"),r=new f.EthersAdapter(a);n.current=new s.jw(r,{ensRegistry:"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"})}return a.jsx(i.Provider,{value:n.current,children:e})}},97388:(e,n,t)=>{"use strict";t.d(n,{default:()=>d});var a=t(3109);t(70371);var r=t(6415),f=t(33307),s=t(89505),i=t(73078);let o=(0,f.Z)({palette:{mode:"light",primary:{main:"#2563eb"},secondary:{main:"#0ea5e9"},background:{default:"#f8fafc"}},shape:{borderRadius:12}});function d({children:e}){return a.jsx(r.Z,{children:(0,a.jsxs)(s.Z,{theme:o,children:[a.jsx(i.ZP,{}),e]})})}},74655:(e,n,t)=>{"use strict";t.d(n,{Web3AuthProvider:()=>h,m:()=>m});var a=t(3109),r=t(70371),f=t(96884),s=t(56007),i=t(35974),o=t(63340),d=t(17921),b=t(68374);let l={chainId:`0x${b.F.id.toString(16)}`,chainName:"Sepolia Testnet",nativeCurrency:{name:"Ethereum",symbol:"ETH",decimals:18},rpcUrls:["https://eth-sepolia.g.alchemy.com/v2/WvEny4nR70VTUMX0DfR-A"],blockExplorerUrls:["https://sepolia.etherscan.io"]};async function c(){throw Error("MetaMask not detected")}async function p(){return null}async function u(){let e=await p();return e?.chainId===l.chainId}let y=r.createContext(void 0);function m(){let e=r.useContext(y);if(!e)throw Error("useWeb3Auth must be used within Web3AuthProvider");return e}function h({children:e,clientId:n,chainIdHex:t,rpcUrl:b}){let[l,p]=r.useState(null),[m,h]=r.useState(null),[g,v]=r.useState(null);r.useEffect(()=>{let e=!0;return(async()=>{let a=function(e,n,t){let a=new d.qR({config:{chainConfig:{chainNamespace:o.EN.EIP155,chainId:n,rpcTarget:t,displayName:"Sepolia Testnet",blockExplorerUrl:"https://sepolia.etherscan.io",ticker:"ETH",tickerName:"Ethereum",decimals:18}}}),r=new f.$L({clientId:e,privateKeyProvider:a,web3AuthNetwork:"sapphire_devnet"}),b=new s.NP;r.configureAdapter(b);let l=new i.Y({clientId:e,chainConfig:{chainNamespace:o.EN.EIP155,chainId:n,rpcTarget:t,displayName:"Sepolia Testnet",blockExplorerUrl:"https://sepolia.etherscan.io",ticker:"ETH",tickerName:"Ethereum",decimals:18}});return r.configureAdapter(l),r}(n,t,b);if(await a.initModal(),e&&(v(a),a.provider)){p(a.provider);try{let e=await a.provider.request({method:"eth_accounts"});h(e?.[0]??null)}catch{}}})(),()=>{e=!1}},[n,t,b]);let T=r.useCallback(async()=>{if(g)try{await u()||(console.log("Switching to Sepolia network..."),await c());let e=await g.connect();p(e);try{let n=await e.request({method:"eth_accounts"});h(n?.[0]??null)}catch(e){console.error("Error getting accounts:",e)}}catch(e){if(console.error("Error connecting to Web3Auth:",e),e&&"object"==typeof e&&"message"in e&&"string"==typeof e.message&&e.message.includes("nativeCurrency.symbol")){console.log("Detected network conflict, attempting to resolve...");try{await c();let e=await g.connect();p(e);let n=await e.request({method:"eth_accounts"});h(n?.[0]??null);return}catch(e){console.error("Retry after network fix failed:",e)}}try{let e=await g.connectTo("openlogin");p(e);let n=await e.request({method:"eth_accounts"});h(n?.[0]??null)}catch(e){console.error("Error with fallback connection:",e)}}},[g]),w=r.useCallback(async()=>{g&&(await g.logout(),p(null),h(null))},[g]);return a.jsx(y.Provider,{value:{address:m,isLoggedIn:!!m,login:T,logout:w,provider:l},children:e})}},41663:(e,n,t)=>{"use strict";t.d(n,{MU:()=>s,RM:()=>p,WH:()=>y,_V:()=>m,bM:()=>u,eh:()=>c,h2:()=>i,hf:()=>o,jY:()=>d,jz:()=>b,v4:()=>l});var a=t(68374),r=t(84289),f=t(26347);let s=[{chainId:11155111,chainIdHex:"0xaa36a7",chainName:"Ethereum Sepolia",rpcUrl:"https://eth-sepolia.g.alchemy.com/v2/WvEny4nR70VTUMX0DfR-A",identityRegistryAddress:"0x8004a6090Cd10A7288092483047B097295Fb8847",bundlerUrl:"https://api.pimlico.io/v2/11155111/rpc?apikey=pim_HmE7RySzpkRBpcekjHfXpT",explorerUrl:"https://sepolia.etherscan.io",explorerName:"Etherscan",viemChain:a.F,networkType:"L1"},{chainId:84532,chainIdHex:"0x14a34",chainName:"Base Sepolia",rpcUrl:"https://base-sepolia.g.alchemy.com/v2/WvEny4nR70VTUMX0DfR-A",identityRegistryAddress:"0x8004AA63c570c570eBF15376c0dB199918BFe9Fb",bundlerUrl:"https://api.pimlico.io/v2/84532/rpc?apikey=pim_WXQDyiHW9VidMd66HJkbLT",explorerUrl:"https://sepolia.basescan.org",explorerName:"Basescan",viemChain:r.L,networkType:"L2"},{chainId:11155420,chainIdHex:"0xaef3c",chainName:"OP Sepolia",rpcUrl:"https://opt-mainnet.g.alchemy.com/v2/WvEny4nR70VTUMX0DfR-A",identityRegistryAddress:"",bundlerUrl:"https://api.pimlico.io/v2/11155420/rpc?apikey=pim_WXQDyiHW9VidMd66HJkbLT",explorerUrl:"https://sepolia-optimism.etherscan.io",explorerName:"Etherscan",viemChain:f.O,networkType:"L2"}].filter(e=>e.rpcUrl&&e.identityRegistryAddress&&e.bundlerUrl);function i(e){return s.find(n=>n.chainId===e)}function o(e){return s.find(n=>n.chainIdHex===e)}function d(e){let n=i(e);return n?.explorerUrl||"https://sepolia.etherscan.io"}function b(e){let n=i(e);return n?.explorerName||"Etherscan"}function l(e){let n=i(e);return n?.identityRegistryAddress}function c(e){let n=i(e);return n?.bundlerUrl}function p(e){let n=i(e);return n?.rpcUrl}function u(e){let n=i(e);return n?.chainIdHex}function y(e){let n=i(e);return n?.viemChain}function m(e){let n=i(e);return n?.networkType}},20584:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>c});var a=t(37432);t(21109);var r=t(54361);let f=(0,r.createProxy)(String.raw`/home/barb/erc8004/erc-8004-identity-indexer/apps/web/components/ThemeRegistry.tsx#default`);(0,r.createProxy)(String.raw`/home/barb/erc8004/erc-8004-identity-indexer/apps/web/components/Web3AuthProvider.tsx#useWeb3Auth`);let s=(0,r.createProxy)(String.raw`/home/barb/erc8004/erc-8004-identity-indexer/apps/web/components/Web3AuthProvider.tsx#Web3AuthProvider`);(0,r.createProxy)(String.raw`/home/barb/erc8004/erc-8004-identity-indexer/apps/web/components/OrgIdentityClientProvider.tsx#useOrgIdentityClient`);let i=(0,r.createProxy)(String.raw`/home/barb/erc8004/erc-8004-identity-indexer/apps/web/components/OrgIdentityClientProvider.tsx#OrgIdentityClientProvider`);(0,r.createProxy)(String.raw`/home/barb/erc8004/erc-8004-identity-indexer/apps/web/components/AIAgentIdentityClientProvider.tsx#useAgentIdentityClient`);let o=(0,r.createProxy)(String.raw`/home/barb/erc8004/erc-8004-identity-indexer/apps/web/components/AIAgentIdentityClientProvider.tsx#AIAgentIdentityClientProvider`);(0,r.createProxy)(String.raw`/home/barb/erc8004/erc-8004-identity-indexer/apps/web/components/AIAgentIdentityClientsProvider.tsx#useAgentIdentityClients`),(0,r.createProxy)(String.raw`/home/barb/erc8004/erc-8004-identity-indexer/apps/web/components/AIAgentIdentityClientsProvider.tsx#useAgentIdentityClientFor`);let d=(0,r.createProxy)(String.raw`/home/barb/erc8004/erc-8004-identity-indexer/apps/web/components/AIAgentIdentityClientsProvider.tsx#AIAgentIdentityClientsProvider`);(0,r.createProxy)(String.raw`/home/barb/erc8004/erc-8004-identity-indexer/apps/web/components/AIAgentENSClientProvider.tsx#useAgentENSClient`);let b=(0,r.createProxy)(String.raw`/home/barb/erc8004/erc-8004-identity-indexer/apps/web/components/AIAgentENSClientProvider.tsx#AIAgentENSClientProvider`);(0,r.createProxy)(String.raw`/home/barb/erc8004/erc-8004-identity-indexer/apps/web/components/AIAgentENSClientsProvider.tsx#useAgentENSClients`),(0,r.createProxy)(String.raw`/home/barb/erc8004/erc-8004-identity-indexer/apps/web/components/AIAgentENSClientsProvider.tsx#useAgentENSClientFor`);let l=(0,r.createProxy)(String.raw`/home/barb/erc8004/erc-8004-identity-indexer/apps/web/components/AIAgentENSClientsProvider.tsx#AIAgentENSClientsProvider`);function c({children:e}){return a.jsx("html",{lang:"en",children:a.jsx("body",{children:a.jsx(f,{children:a.jsx(s,{clientId:"BLPEpiCGGemncsyRbSt1NucfuR4IxWiGVPpuz0-8xNtoRtBn_d_XZxkcwm8c9V_FQUAj_1q9WuJNm7NYLnBORgE",chainIdHex:"0xaa36a7",rpcUrl:"https://eth-sepolia.g.alchemy.com/v2/WvEny4nR70VTUMX0DfR-A",children:a.jsx(b,{children:a.jsx(l,{children:a.jsx(i,{children:a.jsx(o,{children:a.jsx(d,{children:e})})})})})})})})})}},38436:e=>{"use strict";e.exports=JSON.parse('[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_toTokenId","type":"uint256"}],"name":"BatchMetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"agentId","type":"uint256"},{"indexed":true,"internalType":"string","name":"indexedKey","type":"string"},{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"bytes","name":"value","type":"bytes"}],"name":"MetadataSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"MetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"agentId","type":"uint256"},{"indexed":false,"internalType":"string","name":"tokenURI","type":"string"},{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"Registered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"agentId","type":"uint256"},{"indexed":false,"internalType":"string","name":"newUri","type":"string"},{"indexed":true,"internalType":"address","name":"updatedBy","type":"address"}],"name":"UriUpdated","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"string","name":"key","type":"string"}],"name":"getMetadata","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"register","outputs":[{"internalType":"uint256","name":"agentId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"tokenUri","type":"string"},{"components":[{"internalType":"string","name":"key","type":"string"},{"internalType":"bytes","name":"value","type":"bytes"}],"internalType":"struct IdentityRegistry.MetadataEntry[]","name":"metadata","type":"tuple[]"}],"name":"register","outputs":[{"internalType":"uint256","name":"agentId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"tokenUri","type":"string"}],"name":"register","outputs":[{"internalType":"uint256","name":"agentId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"string","name":"newUri","type":"string"}],"name":"setAgentUri","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"string","name":"key","type":"string"},{"internalType":"bytes","name":"value","type":"bytes"}],"name":"setMetadata","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}]')},48825:e=>{"use strict";e.exports=JSON.parse('{"address":"0x0635513f179D50A207757E05759CbD106d7dFcE8","abi":[{"inputs":[{"internalType":"contract ENS","name":"_ens","type":"address"},{"internalType":"contract IBaseRegistrar","name":"_registrar","type":"address"},{"internalType":"contract IMetadataService","name":"_metadataService","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"CannotUpgrade","type":"error"},{"inputs":[],"name":"IncompatibleParent","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"IncorrectTargetOwner","type":"error"},{"inputs":[],"name":"IncorrectTokenType","type":"error"},{"inputs":[{"internalType":"bytes32","name":"labelHash","type":"bytes32"},{"internalType":"bytes32","name":"expectedLabelhash","type":"bytes32"}],"name":"LabelMismatch","type":"error"},{"inputs":[{"internalType":"string","name":"label","type":"string"}],"name":"LabelTooLong","type":"error"},{"inputs":[],"name":"LabelTooShort","type":"error"},{"inputs":[],"name":"NameIsNotWrapped","type":"error"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"OperationProhibited","type":"error"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"addr","type":"address"}],"name":"Unauthorised","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"controller","type":"address"},{"indexed":false,"internalType":"bool","name":"active","type":"bool"}],"name":"ControllerChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"expiry","type":"uint64"}],"name":"ExpiryExtended","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint32","name":"fuses","type":"uint32"}],"name":"FusesSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"owner","type":"address"}],"name":"NameUnwrapped","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"name","type":"bytes"},{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":false,"internalType":"uint32","name":"fuses","type":"uint32"},{"indexed":false,"internalType":"uint64","name":"expiry","type":"uint64"}],"name":"NameWrapped","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"TransferBatch","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"TransferSingle","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"string","name":"value","type":"string"},{"indexed":true,"internalType":"uint256","name":"id","type":"uint256"}],"name":"URI","type":"event"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"_tokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint32","name":"fuseMask","type":"uint32"}],"name":"allFusesBurned","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"addr","type":"address"}],"name":"canExtendSubnames","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"addr","type":"address"}],"name":"canModifyName","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"controllers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ens","outputs":[{"internalType":"contract ENS","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"bytes32","name":"labelhash","type":"bytes32"},{"internalType":"uint64","name":"expiry","type":"uint64"}],"name":"extendExpiry","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"getData","outputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint32","name":"fuses","type":"uint32"},{"internalType":"uint64","name":"expiry","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"bytes32","name":"labelhash","type":"bytes32"}],"name":"isWrapped","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"isWrapped","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"metadataService","outputs":[{"internalType":"contract IMetadataService","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"names","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"id","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"address","name":"_to","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"recoverFunds","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"label","type":"string"},{"internalType":"address","name":"wrappedOwner","type":"address"},{"internalType":"uint256","name":"duration","type":"uint256"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"uint16","name":"ownerControlledFuses","type":"uint16"}],"name":"registerAndWrapETH2LD","outputs":[{"internalType":"uint256","name":"registrarExpiry","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"registrar","outputs":[{"internalType":"contract IBaseRegistrar","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"renew","outputs":[{"internalType":"uint256","name":"expires","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"bytes32","name":"labelhash","type":"bytes32"},{"internalType":"uint32","name":"fuses","type":"uint32"},{"internalType":"uint64","name":"expiry","type":"uint64"}],"name":"setChildFuses","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"controller","type":"address"},{"internalType":"bool","name":"active","type":"bool"}],"name":"setController","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint16","name":"ownerControlledFuses","type":"uint16"}],"name":"setFuses","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IMetadataService","name":"_metadataService","type":"address"}],"name":"setMetadataService","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"setRecord","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"resolver","type":"address"}],"name":"setResolver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"string","name":"label","type":"string"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint32","name":"fuses","type":"uint32"},{"internalType":"uint64","name":"expiry","type":"uint64"}],"name":"setSubnodeOwner","outputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"string","name":"label","type":"string"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"resolver","type":"address"},{"internalType":"uint64","name":"ttl","type":"uint64"},{"internalType":"uint32","name":"fuses","type":"uint32"},{"internalType":"uint64","name":"expiry","type":"uint64"}],"name":"setSubnodeRecord","outputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint64","name":"ttl","type":"uint64"}],"name":"setTTL","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract INameWrapperUpgrade","name":"_upgradeAddress","type":"address"}],"name":"setUpgradeContract","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"parentNode","type":"bytes32"},{"internalType":"bytes32","name":"labelhash","type":"bytes32"},{"internalType":"address","name":"controller","type":"address"}],"name":"unwrap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"labelhash","type":"bytes32"},{"internalType":"address","name":"registrant","type":"address"},{"internalType":"address","name":"controller","type":"address"}],"name":"unwrapETH2LD","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"name","type":"bytes"},{"internalType":"bytes","name":"extraData","type":"bytes"}],"name":"upgrade","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"upgradeContract","outputs":[{"internalType":"contract INameWrapperUpgrade","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"uri","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"name","type":"bytes"},{"internalType":"address","name":"wrappedOwner","type":"address"},{"internalType":"address","name":"resolver","type":"address"}],"name":"wrap","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"label","type":"string"},{"internalType":"address","name":"wrappedOwner","type":"address"},{"internalType":"uint16","name":"ownerControlledFuses","type":"uint16"},{"internalType":"address","name":"resolver","type":"address"}],"name":"wrapETH2LD","outputs":[{"internalType":"uint64","name":"expiry","type":"uint64"}],"stateMutability":"nonpayable","type":"function"}],"transactionHash":"0x60f94207da794ed2a42bef84ad3ffbe39aab7a08501fc6cc35b9bddacb182144","receipt":{"to":null,"from":"0x4Fe4e666Be5752f1FdD210F4Ab5DE2Cc26e3E0e8","contractAddress":"0x0635513f179D50A207757E05759CbD106d7dFcE8","transactionIndex":62,"gasUsed":"5487360","logsBloom":"0x00001000000000400000000000000000000000000000200000800000000004000000000000000000100000000000000000000000000010000000000000000000000000000000000000000000008000000001000000000000100000000000000000000000020000000000000004000800000000000000000000001000000000400000010000000000000000000000000000000000000010200000000000000000000000000000040000000019000000000000000000000000008000240000000080000000000000000002000000005040000000000000000020000000000020000000000000000000000020000100000000000000001000000000000008000000","blockHash":"0xa14ab7b389c1fa6e5c0635638d9aed3123472664c873a1296a4c3ce8cc5c6839","transactionHash":"0x60f94207da794ed2a42bef84ad3ffbe39aab7a08501fc6cc35b9bddacb182144","logs":[{"transactionIndex":62,"blockNumber":3790153,"transactionHash":"0x60f94207da794ed2a42bef84ad3ffbe39aab7a08501fc6cc35b9bddacb182144","address":"0x0635513f179D50A207757E05759CbD106d7dFcE8","topics":["0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000004fe4e666be5752f1fdd210f4ab5de2cc26e3e0e8"],"data":"0x","logIndex":94,"blockHash":"0xa14ab7b389c1fa6e5c0635638d9aed3123472664c873a1296a4c3ce8cc5c6839"},{"transactionIndex":62,"blockNumber":3790153,"transactionHash":"0x60f94207da794ed2a42bef84ad3ffbe39aab7a08501fc6cc35b9bddacb182144","address":"0xA0a1AbcDAe1a2a4A2EF8e9113Ff0e02DD81DC0C6","topics":["0x6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e92","0x0000000000000000000000000635513f179d50a207757e05759cbd106d7dfce8","0x4ef5377426f026cf8bf8e26532753941a1216caa1729302267b8c57117310271"],"data":"0x","logIndex":95,"blockHash":"0xa14ab7b389c1fa6e5c0635638d9aed3123472664c873a1296a4c3ce8cc5c6839"},{"transactionIndex":62,"blockNumber":3790153,"transactionHash":"0x60f94207da794ed2a42bef84ad3ffbe39aab7a08501fc6cc35b9bddacb182144","address":"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e","topics":["0xce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e82","0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2","0x3b2f093329dda9e8020bdae7615b2d0825e7b39a6b72263a3119df90765c2f95"],"data":"0x0000000000000000000000004fe4e666be5752f1fdd210f4ab5de2cc26e3e0e8","logIndex":96,"blockHash":"0xa14ab7b389c1fa6e5c0635638d9aed3123472664c873a1296a4c3ce8cc5c6839"}],"blockNumber":3790153,"cumulativeGasUsed":"20337800","status":1,"byzantium":true},"args":["0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e","0x57f1887a8bf19b14fc0df6fd9b2acc9af147ea85","0x2e9736e109a2745628a5915983f8d9172414f1ac"],"numDeployments":1,"solcInputHash":"e04502f562d98d0455f6c1c453418cdd","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.17+commit.8df45f5f\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"contract ENS\\",\\"name\\":\\"_ens\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"contract IBaseRegistrar\\",\\"name\\":\\"_registrar\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"contract IMetadataService\\",\\"name\\":\\"_metadataService\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"inputs\\":[],\\"name\\":\\"CannotUpgrade\\",\\"type\\":\\"error\\"},{\\"inputs\\":[],\\"name\\":\\"IncompatibleParent\\",\\"type\\":\\"error\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"IncorrectTargetOwner\\",\\"type\\":\\"error\\"},{\\"inputs\\":[],\\"name\\":\\"IncorrectTokenType\\",\\"type\\":\\"error\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"labelHash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"expectedLabelhash\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"LabelMismatch\\",\\"type\\":\\"error\\"},{\\"inputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"label\\",\\"type\\":\\"string\\"}],\\"name\\":\\"LabelTooLong\\",\\"type\\":\\"error\\"},{\\"inputs\\":[],\\"name\\":\\"LabelTooShort\\",\\"type\\":\\"error\\"},{\\"inputs\\":[],\\"name\\":\\"NameIsNotWrapped\\",\\"type\\":\\"error\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"OperationProhibited\\",\\"type\\":\\"error\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"addr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"Unauthorised\\",\\"type\\":\\"error\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"approved\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"Approval\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"bool\\",\\"name\\":\\"approved\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"ApprovalForAll\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"controller\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"bool\\",\\"name\\":\\"active\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"ControllerChanged\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint64\\",\\"name\\":\\"expiry\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"ExpiryExtended\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint32\\",\\"name\\":\\"fuses\\",\\"type\\":\\"uint32\\"}],\\"name\\":\\"FusesSet\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"NameUnwrapped\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"name\\",\\"type\\":\\"bytes\\"},{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint32\\",\\"name\\":\\"fuses\\",\\"type\\":\\"uint32\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint64\\",\\"name\\":\\"expiry\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"NameWrapped\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"previousOwner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"OwnershipTransferred\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"ids\\",\\"type\\":\\"uint256[]\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"values\\",\\"type\\":\\"uint256[]\\"}],\\"name\\":\\"TransferBatch\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"id\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"value\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"TransferSingle\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"value\\",\\"type\\":\\"string\\"},{\\"indexed\\":true,\\"internalType\\":\\"uint256\\",\\"name\\":\\"id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"URI\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"_tokens\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint32\\",\\"name\\":\\"fuseMask\\",\\"type\\":\\"uint32\\"}],\\"name\\":\\"allFusesBurned\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"balanceOf\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address[]\\",\\"name\\":\\"accounts\\",\\"type\\":\\"address[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"ids\\",\\"type\\":\\"uint256[]\\"}],\\"name\\":\\"balanceOfBatch\\",\\"outputs\\":[{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"\\",\\"type\\":\\"uint256[]\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"addr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"canExtendSubnames\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"addr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"canModifyName\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"name\\":\\"controllers\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"ens\\",\\"outputs\\":[{\\"internalType\\":\\"contract ENS\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"parentNode\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"labelhash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint64\\",\\"name\\":\\"expiry\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"extendExpiry\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"getApproved\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"getData\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint32\\",\\"name\\":\\"fuses\\",\\"type\\":\\"uint32\\"},{\\"internalType\\":\\"uint64\\",\\"name\\":\\"expiry\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"}],\\"name\\":\\"isApprovedForAll\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"parentNode\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"labelhash\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"isWrapped\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"isWrapped\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"metadataService\\",\\"outputs\\":[{\\"internalType\\":\\"contract IMetadataService\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"names\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"data\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"onERC721Received\\",\\"outputs\\":[{\\"internalType\\":\\"bytes4\\",\\"name\\":\\"\\",\\"type\\":\\"bytes4\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"owner\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"id\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"ownerOf\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"_token\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"_amount\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"recoverFunds\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"label\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"wrappedOwner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"duration\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"resolver\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"ownerControlledFuses\\",\\"type\\":\\"uint16\\"}],\\"name\\":\\"registerAndWrapETH2LD\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"registrarExpiry\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"registrar\\",\\"outputs\\":[{\\"internalType\\":\\"contract IBaseRegistrar\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"duration\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"renew\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"expires\\",\\"type\\":\\"uint256\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"renounceOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"ids\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"uint256[]\\",\\"name\\":\\"amounts\\",\\"type\\":\\"uint256[]\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"data\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"safeBatchTransferFrom\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"from\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"to\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"id\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"amount\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"data\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"safeTransferFrom\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"approved\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"setApprovalForAll\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"parentNode\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"labelhash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint32\\",\\"name\\":\\"fuses\\",\\"type\\":\\"uint32\\"},{\\"internalType\\":\\"uint64\\",\\"name\\":\\"expiry\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"setChildFuses\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"controller\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"active\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"setController\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"ownerControlledFuses\\",\\"type\\":\\"uint16\\"}],\\"name\\":\\"setFuses\\",\\"outputs\\":[{\\"internalType\\":\\"uint32\\",\\"name\\":\\"\\",\\"type\\":\\"uint32\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"contract IMetadataService\\",\\"name\\":\\"_metadataService\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setMetadataService\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"resolver\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint64\\",\\"name\\":\\"ttl\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"setRecord\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"resolver\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setResolver\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"parentNode\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"label\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint32\\",\\"name\\":\\"fuses\\",\\"type\\":\\"uint32\\"},{\\"internalType\\":\\"uint64\\",\\"name\\":\\"expiry\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"setSubnodeOwner\\",\\"outputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"parentNode\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"label\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"resolver\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint64\\",\\"name\\":\\"ttl\\",\\"type\\":\\"uint64\\"},{\\"internalType\\":\\"uint32\\",\\"name\\":\\"fuses\\",\\"type\\":\\"uint32\\"},{\\"internalType\\":\\"uint64\\",\\"name\\":\\"expiry\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"setSubnodeRecord\\",\\"outputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint64\\",\\"name\\":\\"ttl\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"setTTL\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"contract INameWrapperUpgrade\\",\\"name\\":\\"_upgradeAddress\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setUpgradeContract\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes4\\",\\"name\\":\\"interfaceId\\",\\"type\\":\\"bytes4\\"}],\\"name\\":\\"supportsInterface\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"newOwner\\",\\"type\\":\\"address\\"}],\\"name\\":\\"transferOwnership\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"parentNode\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"labelhash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"controller\\",\\"type\\":\\"address\\"}],\\"name\\":\\"unwrap\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"labelhash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"registrant\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"controller\\",\\"type\\":\\"address\\"}],\\"name\\":\\"unwrapETH2LD\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"name\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"extraData\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"upgrade\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[],\\"name\\":\\"upgradeContract\\",\\"outputs\\":[{\\"internalType\\":\\"contract INameWrapperUpgrade\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"tokenId\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"uri\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"name\\",\\"type\\":\\"bytes\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"wrappedOwner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"resolver\\",\\"type\\":\\"address\\"}],\\"name\\":\\"wrap\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"label\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"wrappedOwner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"ownerControlledFuses\\",\\"type\\":\\"uint16\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"resolver\\",\\"type\\":\\"address\\"}],\\"name\\":\\"wrapETH2LD\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"expiry\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"kind\\":\\"dev\\",\\"methods\\":{\\"allFusesBurned(bytes32,uint32)\\":{\\"params\\":{\\"fuseMask\\":\\"The fuses you want to check\\",\\"node\\":\\"Namehash of the name\\"},\\"returns\\":{\\"_0\\":\\"Boolean of whether or not all the selected fuses are burned\\"}},\\"approve(address,uint256)\\":{\\"params\\":{\\"to\\":\\"address to approve\\",\\"tokenId\\":\\"name to approve\\"}},\\"balanceOf(address,uint256)\\":{\\"details\\":\\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\\"},\\"balanceOfBatch(address[],uint256[])\\":{\\"details\\":\\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\\"},\\"canExtendSubnames(bytes32,address)\\":{\\"params\\":{\\"addr\\":\\"which address to check permissions for\\",\\"node\\":\\"namehash of the name to check\\"},\\"returns\\":{\\"_0\\":\\"whether or not is owner/operator or approved\\"}},\\"canModifyName(bytes32,address)\\":{\\"params\\":{\\"addr\\":\\"which address to check permissions for\\",\\"node\\":\\"namehash of the name to check\\"},\\"returns\\":{\\"_0\\":\\"whether or not is owner or operator\\"}},\\"extendExpiry(bytes32,bytes32,uint64)\\":{\\"params\\":{\\"expiry\\":\\"When the name will expire in seconds since the Unix epoch\\",\\"labelhash\\":\\"Labelhash of the name, e.g. vitalik.xyz would be keccak256(\'vitalik\')\\",\\"parentNode\\":\\"Parent namehash of the name e.g. vitalik.xyz would be namehash(\'xyz\')\\"},\\"returns\\":{\\"_0\\":\\"New expiry\\"}},\\"getApproved(uint256)\\":{\\"params\\":{\\"id\\":\\"Namehash of the name\\"},\\"returns\\":{\\"operator\\":\\"Approved operator of a name\\"}},\\"getData(uint256)\\":{\\"params\\":{\\"id\\":\\"Namehash of the name\\"},\\"returns\\":{\\"expiry\\":\\"Expiry of the name\\",\\"fuses\\":\\"Fuses of the name\\",\\"owner\\":\\"Owner of the name\\"}},\\"isApprovedForAll(address,address)\\":{\\"details\\":\\"See {IERC1155-isApprovedForAll}.\\"},\\"isWrapped(bytes32)\\":{\\"params\\":{\\"node\\":\\"Namehash of the name\\"},\\"returns\\":{\\"_0\\":\\"Boolean of whether or not the name is wrapped\\"}},\\"isWrapped(bytes32,bytes32)\\":{\\"params\\":{\\"labelhash\\":\\"Namehash of the name\\",\\"parentNode\\":\\"Namehash of the name\\"},\\"returns\\":{\\"_0\\":\\"Boolean of whether or not the name is wrapped\\"}},\\"owner()\\":{\\"details\\":\\"Returns the address of the current owner.\\"},\\"ownerOf(uint256)\\":{\\"params\\":{\\"id\\":\\"Label as a string of the .eth domain to wrap\\"},\\"returns\\":{\\"owner\\":\\"The owner of the name\\"}},\\"recoverFunds(address,address,uint256)\\":{\\"details\\":\\"The contract is Ownable and only the owner can call the recover function.\\",\\"params\\":{\\"_amount\\":\\"The amount of tokens to recover.\\",\\"_to\\":\\"The address to send the tokens to.\\",\\"_token\\":\\"The address of the ERC20 token to recover\\"}},\\"registerAndWrapETH2LD(string,address,uint256,address,uint16)\\":{\\"details\\":\\"Registers a new .eth second-level domain and wraps it.      Only callable by authorised controllers.\\",\\"params\\":{\\"duration\\":\\"The duration, in seconds, to register the name for.\\",\\"label\\":\\"The label to register (Eg, \'foo\' for \'foo.eth\').\\",\\"ownerControlledFuses\\":\\"Initial owner-controlled fuses to set\\",\\"resolver\\":\\"The resolver address to set on the ENS registry (optional).\\",\\"wrappedOwner\\":\\"The owner of the wrapped name.\\"},\\"returns\\":{\\"registrarExpiry\\":\\"The expiry date of the new name on the .eth registrar, in seconds since the Unix epoch.\\"}},\\"renew(uint256,uint256)\\":{\\"details\\":\\"Only callable by authorised controllers.\\",\\"params\\":{\\"duration\\":\\"The number of seconds to renew the name for.\\",\\"tokenId\\":\\"The hash of the label to register (eg, `keccak256(\'foo\')`, for \'foo.eth\').\\"},\\"returns\\":{\\"expires\\":\\"The expiry date of the name on the .eth registrar, in seconds since the Unix epoch.\\"}},\\"renounceOwnership()\\":{\\"details\\":\\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\\"},\\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\\":{\\"details\\":\\"See {IERC1155-safeBatchTransferFrom}.\\"},\\"safeTransferFrom(address,address,uint256,uint256,bytes)\\":{\\"details\\":\\"See {IERC1155-safeTransferFrom}.\\"},\\"setApprovalForAll(address,bool)\\":{\\"details\\":\\"See {IERC1155-setApprovalForAll}.\\"},\\"setChildFuses(bytes32,bytes32,uint32,uint64)\\":{\\"params\\":{\\"expiry\\":\\"When the name will expire in seconds since the Unix epoch\\",\\"fuses\\":\\"Fuses to burn\\",\\"labelhash\\":\\"Labelhash of the name, e.g. vitalik.xyz would be keccak256(\'vitalik\')\\",\\"parentNode\\":\\"Parent namehash of the name e.g. vitalik.xyz would be namehash(\'xyz\')\\"}},\\"setFuses(bytes32,uint16)\\":{\\"params\\":{\\"node\\":\\"Namehash of the name\\",\\"ownerControlledFuses\\":\\"Owner-controlled fuses to burn\\"},\\"returns\\":{\\"_0\\":\\"Old fuses\\"}},\\"setMetadataService(address)\\":{\\"params\\":{\\"_metadataService\\":\\"The new metadata service\\"}},\\"setRecord(bytes32,address,address,uint64)\\":{\\"params\\":{\\"node\\":\\"Namehash of the name to set a record for\\",\\"owner\\":\\"New owner in the registry\\",\\"resolver\\":\\"Resolver contract\\",\\"ttl\\":\\"Time to live in the registry\\"}},\\"setResolver(bytes32,address)\\":{\\"params\\":{\\"node\\":\\"namehash of the name\\",\\"resolver\\":\\"the resolver contract\\"}},\\"setSubnodeOwner(bytes32,string,address,uint32,uint64)\\":{\\"params\\":{\\"expiry\\":\\"When the name will expire in seconds since the Unix epoch\\",\\"fuses\\":\\"Initial fuses for the wrapped subdomain\\",\\"label\\":\\"Label of the subdomain as a string\\",\\"owner\\":\\"New owner in the wrapper\\",\\"parentNode\\":\\"Parent namehash of the subdomain\\"},\\"returns\\":{\\"node\\":\\"Namehash of the subdomain\\"}},\\"setSubnodeRecord(bytes32,string,address,address,uint64,uint32,uint64)\\":{\\"params\\":{\\"expiry\\":\\"When the name will expire in seconds since the Unix epoch\\",\\"fuses\\":\\"initial fuses for the wrapped subdomain\\",\\"label\\":\\"label of the subdomain as a string\\",\\"owner\\":\\"new owner in the wrapper\\",\\"parentNode\\":\\"parent namehash of the subdomain\\",\\"resolver\\":\\"resolver contract in the registry\\",\\"ttl\\":\\"ttl in the registry\\"},\\"returns\\":{\\"node\\":\\"Namehash of the subdomain\\"}},\\"setTTL(bytes32,uint64)\\":{\\"params\\":{\\"node\\":\\"Namehash of the name\\",\\"ttl\\":\\"TTL in the registry\\"}},\\"setUpgradeContract(address)\\":{\\"details\\":\\"The default value of upgradeContract is the 0 address. Use the 0 address at any time to make the contract not upgradable.\\",\\"params\\":{\\"_upgradeAddress\\":\\"address of an upgraded contract\\"}},\\"transferOwnership(address)\\":{\\"details\\":\\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\\"},\\"unwrap(bytes32,bytes32,address)\\":{\\"details\\":\\"Can be called by the owner in the wrapper or an authorised caller in the wrapper\\",\\"params\\":{\\"controller\\":\\"Sets the owner in the registry to this address\\",\\"labelhash\\":\\"Labelhash of the name, e.g. vitalik.xyz would be keccak256(\'vitalik\')\\",\\"parentNode\\":\\"Parent namehash of the name e.g. vitalik.xyz would be namehash(\'xyz\')\\"}},\\"unwrapETH2LD(bytes32,address,address)\\":{\\"details\\":\\"Can be called by the owner in the wrapper or an authorised caller in the wrapper\\",\\"params\\":{\\"controller\\":\\"Sets the owner in the registry to this address\\",\\"labelhash\\":\\"Labelhash of the .eth domain\\",\\"registrant\\":\\"Sets the owner in the .eth registrar to this address\\"}},\\"upgrade(bytes,bytes)\\":{\\"details\\":\\"Can be called by the owner or an authorised caller\\",\\"params\\":{\\"extraData\\":\\"Extra data to pass to the upgrade contract\\",\\"name\\":\\"The name to upgrade, in DNS format\\"}},\\"uri(uint256)\\":{\\"params\\":{\\"tokenId\\":\\"The id of the token\\"},\\"returns\\":{\\"_0\\":\\"string uri of the metadata service\\"}},\\"wrap(bytes,address,address)\\":{\\"details\\":\\"Can be called by the owner in the registry or an authorised caller in the registry\\",\\"params\\":{\\"name\\":\\"The name to wrap, in DNS format\\",\\"resolver\\":\\"Resolver contract\\",\\"wrappedOwner\\":\\"Owner of the name in this contract\\"}},\\"wrapETH2LD(string,address,uint16,address)\\":{\\"details\\":\\"Can be called by the owner of the name on the .eth registrar or an authorised caller on the registrar\\",\\"params\\":{\\"label\\":\\"Label as a string of the .eth domain to wrap\\",\\"ownerControlledFuses\\":\\"Initial owner-controlled fuses to set\\",\\"resolver\\":\\"Resolver contract address\\",\\"wrappedOwner\\":\\"Owner of the name in this contract\\"}}},\\"version\\":1},\\"userdoc\\":{\\"kind\\":\\"user\\",\\"methods\\":{\\"allFusesBurned(bytes32,uint32)\\":{\\"notice\\":\\"Checks all Fuses in the mask are burned for the node\\"},\\"approve(address,uint256)\\":{\\"notice\\":\\"Approves an address for a name\\"},\\"canExtendSubnames(bytes32,address)\\":{\\"notice\\":\\"Checks if owner/operator or approved by owner\\"},\\"canModifyName(bytes32,address)\\":{\\"notice\\":\\"Checks if owner or operator of the owner\\"},\\"extendExpiry(bytes32,bytes32,uint64)\\":{\\"notice\\":\\"Extends expiry for a name\\"},\\"getApproved(uint256)\\":{\\"notice\\":\\"Gets the owner of a name\\"},\\"getData(uint256)\\":{\\"notice\\":\\"Gets the data for a name\\"},\\"isWrapped(bytes32)\\":{\\"notice\\":\\"Checks if a name is wrapped\\"},\\"isWrapped(bytes32,bytes32)\\":{\\"notice\\":\\"Checks if a name is wrapped in a more gas efficient way\\"},\\"ownerOf(uint256)\\":{\\"notice\\":\\"Gets the owner of a name\\"},\\"recoverFunds(address,address,uint256)\\":{\\"notice\\":\\"Recover ERC20 tokens sent to the contract by mistake.\\"},\\"renew(uint256,uint256)\\":{\\"notice\\":\\"Renews a .eth second-level domain.\\"},\\"setChildFuses(bytes32,bytes32,uint32,uint64)\\":{\\"notice\\":\\"Sets fuses of a name that you own the parent of\\"},\\"setFuses(bytes32,uint16)\\":{\\"notice\\":\\"Sets fuses of a name\\"},\\"setMetadataService(address)\\":{\\"notice\\":\\"Set the metadata service. Only the owner can do this\\"},\\"setRecord(bytes32,address,address,uint64)\\":{\\"notice\\":\\"Sets records for the name in the ENS Registry\\"},\\"setResolver(bytes32,address)\\":{\\"notice\\":\\"Sets resolver contract in the registry\\"},\\"setSubnodeOwner(bytes32,string,address,uint32,uint64)\\":{\\"notice\\":\\"Sets the subdomain owner in the registry and then wraps the subdomain\\"},\\"setSubnodeRecord(bytes32,string,address,address,uint64,uint32,uint64)\\":{\\"notice\\":\\"Sets the subdomain owner in the registry with records and then wraps the subdomain\\"},\\"setTTL(bytes32,uint64)\\":{\\"notice\\":\\"Sets TTL in the registry\\"},\\"setUpgradeContract(address)\\":{\\"notice\\":\\"Set the address of the upgradeContract of the contract. only admin can do this\\"},\\"unwrap(bytes32,bytes32,address)\\":{\\"notice\\":\\"Unwraps a non .eth domain, of any kind. Could be a DNSSEC name vitalik.xyz or a subdomain\\"},\\"unwrapETH2LD(bytes32,address,address)\\":{\\"notice\\":\\"Unwraps a .eth domain. e.g. vitalik.eth\\"},\\"upgrade(bytes,bytes)\\":{\\"notice\\":\\"Upgrades a domain of any kind. Could be a .eth name vitalik.eth, a DNSSEC name vitalik.xyz, or a subdomain\\"},\\"uri(uint256)\\":{\\"notice\\":\\"Get the metadata uri\\"},\\"wrap(bytes,address,address)\\":{\\"notice\\":\\"Wraps a non .eth domain, of any kind. Could be a DNSSEC name vitalik.xyz or a subdomain\\"},\\"wrapETH2LD(string,address,uint16,address)\\":{\\"notice\\":\\"Wraps a .eth domain, creating a new token and sending the original ERC721 token to this contract\\"}},\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/wrapper/NameWrapper.sol\\":\\"NameWrapper\\"},\\"evmVersion\\":\\"london\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":1200},\\"remappings\\":[]},\\"sources\\":{\\"@openzeppelin/contracts/access/Ownable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../utils/Context.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Contract module which provides a basic access control mechanism, where\\\\n * there is an account (an owner) that can be granted exclusive access to\\\\n * specific functions.\\\\n *\\\\n * By default, the owner account will be the one that deploys the contract. This\\\\n * can later be changed with {transferOwnership}.\\\\n *\\\\n * This module is used through inheritance. It will make available the modifier\\\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\\\n * the owner.\\\\n */\\\\nabstract contract Ownable is Context {\\\\n    address private _owner;\\\\n\\\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\\\n\\\\n    /**\\\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\\\n     */\\\\n    constructor() {\\\\n        _transferOwnership(_msgSender());\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if called by any account other than the owner.\\\\n     */\\\\n    modifier onlyOwner() {\\\\n        _checkOwner();\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the address of the current owner.\\\\n     */\\\\n    function owner() public view virtual returns (address) {\\\\n        return _owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Throws if the sender is not the owner.\\\\n     */\\\\n    function _checkOwner() internal view virtual {\\\\n        require(owner() == _msgSender(), \\\\\\"Ownable: caller is not the owner\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Leaves the contract without owner. It will not be possible to call\\\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\\\n     *\\\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\\\n     * thereby removing any functionality that is only available to the owner.\\\\n     */\\\\n    function renounceOwnership() public virtual onlyOwner {\\\\n        _transferOwnership(address(0));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Can only be called by the current owner.\\\\n     */\\\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\\\n        require(newOwner != address(0), \\\\\\"Ownable: new owner is the zero address\\\\\\");\\\\n        _transferOwnership(newOwner);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\\\n     * Internal function without access restriction.\\\\n     */\\\\n    function _transferOwnership(address newOwner) internal virtual {\\\\n        address oldOwner = _owner;\\\\n        _owner = newOwner;\\\\n        emit OwnershipTransferred(oldOwner, newOwner);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../../utils/introspection/IERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\\\n *\\\\n * _Available since v3.1._\\\\n */\\\\ninterface IERC1155 is IERC165 {\\\\n    /**\\\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\\\n     */\\\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\\\n     * transfers.\\\\n     */\\\\n    event TransferBatch(\\\\n        address indexed operator,\\\\n        address indexed from,\\\\n        address indexed to,\\\\n        uint256[] ids,\\\\n        uint256[] values\\\\n    );\\\\n\\\\n    /**\\\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\\\n     * `approved`.\\\\n     */\\\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\\\n     *\\\\n     * If an {URI} event was emitted for `id`, the standard\\\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\\\n     * returned by {IERC1155MetadataURI-uri}.\\\\n     */\\\\n    event URI(string value, uint256 indexed id);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     */\\\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `accounts` and `ids` must have the same length.\\\\n     */\\\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\\\n        external\\\\n        view\\\\n        returns (uint256[] memory);\\\\n\\\\n    /**\\\\n     * @dev Grants or revokes permission to `operator` to transfer the caller\'s tokens, according to `approved`,\\\\n     *\\\\n     * Emits an {ApprovalForAll} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `operator` cannot be the caller.\\\\n     */\\\\n    function setApprovalForAll(address operator, bool approved) external;\\\\n\\\\n    /**\\\\n     * @dev Returns true if `operator` is approved to transfer ``account``\'s tokens.\\\\n     *\\\\n     * See {setApprovalForAll}.\\\\n     */\\\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\\\n     *\\\\n     * Emits a {TransferSingle} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `to` cannot be the zero address.\\\\n     * - If the caller is not `from`, it must have been approved to spend ``from``\'s tokens via {setApprovalForAll}.\\\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\\\n     * acceptance magic value.\\\\n     */\\\\n    function safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 id,\\\\n        uint256 amount,\\\\n        bytes calldata data\\\\n    ) external;\\\\n\\\\n    /**\\\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\\\n     *\\\\n     * Emits a {TransferBatch} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `ids` and `amounts` must have the same length.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\\\n     * acceptance magic value.\\\\n     */\\\\n    function safeBatchTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256[] calldata ids,\\\\n        uint256[] calldata amounts,\\\\n        bytes calldata data\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x6392f2cfe3a5ee802227fe7a2dfd47096d881aec89bddd214b35c5b46d3cd941\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../../utils/introspection/IERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev _Available since v3.1._\\\\n */\\\\ninterface IERC1155Receiver is IERC165 {\\\\n    /**\\\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\\\n     *\\\\n     * NOTE: To accept the transfer, this must return\\\\n     * `bytes4(keccak256(\\\\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\\\\"))`\\\\n     * (i.e. 0xf23a6e61, or its own function selector).\\\\n     *\\\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\\\n     * @param from The address which previously owned the token\\\\n     * @param id The ID of the token being transferred\\\\n     * @param value The amount of tokens being transferred\\\\n     * @param data Additional data with no specified format\\\\n     * @return `bytes4(keccak256(\\\\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\\\\"))` if transfer is allowed\\\\n     */\\\\n    function onERC1155Received(\\\\n        address operator,\\\\n        address from,\\\\n        uint256 id,\\\\n        uint256 value,\\\\n        bytes calldata data\\\\n    ) external returns (bytes4);\\\\n\\\\n    /**\\\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\\\n     * been updated.\\\\n     *\\\\n     * NOTE: To accept the transfer(s), this must return\\\\n     * `bytes4(keccak256(\\\\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\\\\"))`\\\\n     * (i.e. 0xbc197c81, or its own function selector).\\\\n     *\\\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\\\n     * @param from The address which previously owned the token\\\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\\\n     * @param data Additional data with no specified format\\\\n     * @return `bytes4(keccak256(\\\\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\\\\"))` if transfer is allowed\\\\n     */\\\\n    function onERC1155BatchReceived(\\\\n        address operator,\\\\n        address from,\\\\n        uint256[] calldata ids,\\\\n        uint256[] calldata values,\\\\n        bytes calldata data\\\\n    ) external returns (bytes4);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../IERC1155.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\\\n *\\\\n * _Available since v3.1._\\\\n */\\\\ninterface IERC1155MetadataURI is IERC1155 {\\\\n    /**\\\\n     * @dev Returns the URI for token type `id`.\\\\n     *\\\\n     * If the `\\\\\\\\{id\\\\\\\\}` substring is present in the URI, it must be replaced by\\\\n     * clients with the actual token type ID.\\\\n     */\\\\n    function uri(uint256 id) external view returns (string memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa66d18b9a85458d28fc3304717964502ae36f7f8a2ff35bc83f6f85d74b03574\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\\\n */\\\\ninterface IERC20 {\\\\n    /**\\\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\\\n     * another (`to`).\\\\n     *\\\\n     * Note that `value` may be zero.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\\\n     * a call to {approve}. `value` is the new allowance.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens in existence.\\\\n     */\\\\n    function totalSupply() external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens owned by `account`.\\\\n     */\\\\n    function balanceOf(address account) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from the caller\'s account to `to`.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transfer(address to, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Returns the remaining number of tokens that `spender` will be\\\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\\\n     * zero by default.\\\\n     *\\\\n     * This value changes when {approve} or {transferFrom} are called.\\\\n     */\\\\n    function allowance(address owner, address spender) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\'s tokens.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\\\n     * that someone may use both the old and the new allowance by unfortunate\\\\n     * transaction ordering. One possible solution to mitigate this race\\\\n     * condition is to first reduce the spender\'s allowance to 0 and set the\\\\n     * desired value afterwards:\\\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address spender, uint256 amount) external returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\\\n     * allowance mechanism. `amount` is then deducted from the caller\'s\\\\n     * allowance.\\\\n     *\\\\n     * Returns a boolean value indicating whether the operation succeeded.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 amount\\\\n    ) external returns (bool);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../../utils/introspection/IERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Required interface of an ERC721 compliant contract.\\\\n */\\\\ninterface IERC721 is IERC165 {\\\\n    /**\\\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\\\n     */\\\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\\\n\\\\n    /**\\\\n     * @dev Returns the number of tokens in ``owner``\'s account.\\\\n     */\\\\n    function balanceOf(address owner) external view returns (uint256 balance);\\\\n\\\\n    /**\\\\n     * @dev Returns the owner of the `tokenId` token.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must exist.\\\\n     */\\\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\\\n\\\\n    /**\\\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `from` cannot be the zero address.\\\\n     * - `to` cannot be the zero address.\\\\n     * - `tokenId` token must exist and be owned by `from`.\\\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId,\\\\n        bytes calldata data\\\\n    ) external;\\\\n\\\\n    /**\\\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `from` cannot be the zero address.\\\\n     * - `to` cannot be the zero address.\\\\n     * - `tokenId` token must exist and be owned by `from`.\\\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) external;\\\\n\\\\n    /**\\\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\\\n     *\\\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `from` cannot be the zero address.\\\\n     * - `to` cannot be the zero address.\\\\n     * - `tokenId` token must be owned by `from`.\\\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) external;\\\\n\\\\n    /**\\\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\\\n     * The approval is cleared when the token is transferred.\\\\n     *\\\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The caller must own the token or be an approved operator.\\\\n     * - `tokenId` must exist.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address to, uint256 tokenId) external;\\\\n\\\\n    /**\\\\n     * @dev Approve or remove `operator` as an operator for the caller.\\\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The `operator` cannot be the caller.\\\\n     *\\\\n     * Emits an {ApprovalForAll} event.\\\\n     */\\\\n    function setApprovalForAll(address operator, bool _approved) external;\\\\n\\\\n    /**\\\\n     * @dev Returns the account approved for `tokenId` token.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must exist.\\\\n     */\\\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\\\n\\\\n    /**\\\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\\\n     *\\\\n     * See {setApprovalForAll}\\\\n     */\\\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @title ERC721 token receiver interface\\\\n * @dev Interface for any contract that wants to support safeTransfers\\\\n * from ERC721 asset contracts.\\\\n */\\\\ninterface IERC721Receiver {\\\\n    /**\\\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\\\n     * by `operator` from `from`, this function is called.\\\\n     *\\\\n     * It must return its Solidity selector to confirm the token transfer.\\\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\\\n     *\\\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\\\n     */\\\\n    function onERC721Received(\\\\n        address operator,\\\\n        address from,\\\\n        uint256 tokenId,\\\\n        bytes calldata data\\\\n    ) external returns (bytes4);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Address.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\\\n\\\\npragma solidity ^0.8.1;\\\\n\\\\n/**\\\\n * @dev Collection of functions related to the address type\\\\n */\\\\nlibrary Address {\\\\n    /**\\\\n     * @dev Returns true if `account` is a contract.\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * It is unsafe to assume that an address for which this function returns\\\\n     * false is an externally-owned account (EOA) and not a contract.\\\\n     *\\\\n     * Among others, `isContract` will return false for the following\\\\n     * types of addresses:\\\\n     *\\\\n     *  - an externally-owned account\\\\n     *  - a contract in construction\\\\n     *  - an address where a contract will be created\\\\n     *  - an address where a contract lived, but was destroyed\\\\n     * ====\\\\n     *\\\\n     * [IMPORTANT]\\\\n     * ====\\\\n     * You shouldn\'t rely on `isContract` to protect against flash loan attacks!\\\\n     *\\\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\\\n     * constructor.\\\\n     * ====\\\\n     */\\\\n    function isContract(address account) internal view returns (bool) {\\\\n        // This method relies on extcodesize/address.code.length, which returns 0\\\\n        // for contracts in construction, since the code is only stored at the end\\\\n        // of the constructor execution.\\\\n\\\\n        return account.code.length > 0;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Replacement for Solidity\'s `transfer`: sends `amount` wei to\\\\n     * `recipient`, forwarding all available gas and reverting on errors.\\\\n     *\\\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\\\n     * imposed by `transfer`, making them unable to receive funds via\\\\n     * `transfer`. {sendValue} removes this limitation.\\\\n     *\\\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\\\n     *\\\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\\\n     * taken to not create reentrancy vulnerabilities. Consider using\\\\n     * {ReentrancyGuard} or the\\\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\\\n     */\\\\n    function sendValue(address payable recipient, uint256 amount) internal {\\\\n        require(address(this).balance >= amount, \\\\\\"Address: insufficient balance\\\\\\");\\\\n\\\\n        (bool success, ) = recipient.call{value: amount}(\\\\\\"\\\\\\");\\\\n        require(success, \\\\\\"Address: unable to send value, recipient may have reverted\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Performs a Solidity function call using a low level `call`. A\\\\n     * plain `call` is an unsafe replacement for a function call: use this\\\\n     * function instead.\\\\n     *\\\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\\\n     * function (like regular Solidity function calls).\\\\n     *\\\\n     * Returns the raw returned data. To convert to the expected return value,\\\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `target` must be a contract.\\\\n     * - calling `target` with `data` must not revert.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, 0, \\\\\\"Address: low-level call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, 0, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but also transferring `value` wei to `target`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - the calling contract must have an ETH balance of at least `value`.\\\\n     * - the called Solidity function must be `payable`.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value\\\\n    ) internal returns (bytes memory) {\\\\n        return functionCallWithValue(target, data, value, \\\\\\"Address: low-level call with value failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\\\n     *\\\\n     * _Available since v3.1._\\\\n     */\\\\n    function functionCallWithValue(\\\\n        address target,\\\\n        bytes memory data,\\\\n        uint256 value,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        require(address(this).balance >= value, \\\\\\"Address: insufficient balance for call\\\\\\");\\\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\\\n        return functionStaticCall(target, data, \\\\\\"Address: low-level static call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a static call.\\\\n     *\\\\n     * _Available since v3.3._\\\\n     */\\\\n    function functionStaticCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal view returns (bytes memory) {\\\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\\\n        return functionDelegateCall(target, data, \\\\\\"Address: low-level delegate call failed\\\\\\");\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\\\n     * but performing a delegate call.\\\\n     *\\\\n     * _Available since v3.4._\\\\n     */\\\\n    function functionDelegateCall(\\\\n        address target,\\\\n        bytes memory data,\\\\n        string memory errorMessage\\\\n    ) internal returns (bytes memory) {\\\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\\\n     *\\\\n     * _Available since v4.8._\\\\n     */\\\\n    function verifyCallResultFromTarget(\\\\n        address target,\\\\n        bool success,\\\\n        bytes memory returndata,\\\\n        string memory errorMessage\\\\n    ) internal view returns (bytes memory) {\\\\n        if (success) {\\\\n            if (returndata.length == 0) {\\\\n                // only check isContract if the call was successful and the return data is empty\\\\n                // otherwise we already know that it was a contract\\\\n                require(isContract(target), \\\\\\"Address: call to non-contract\\\\\\");\\\\n            }\\\\n            return returndata;\\\\n        } else {\\\\n            _revert(returndata, errorMessage);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn\'t, either by bubbling the\\\\n     * revert reason or using the provided one.\\\\n     *\\\\n     * _Available since v4.3._\\\\n     */\\\\n    function verifyCallResult(\\\\n        bool success,\\\\n        bytes memory returndata,\\\\n        string memory errorMessage\\\\n    ) internal pure returns (bytes memory) {\\\\n        if (success) {\\\\n            return returndata;\\\\n        } else {\\\\n            _revert(returndata, errorMessage);\\\\n        }\\\\n    }\\\\n\\\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\\\n        // Look for revert reason and bubble it up if present\\\\n        if (returndata.length > 0) {\\\\n            // The easiest way to bubble the revert reason is using memory via assembly\\\\n            /// @solidity memory-safe-assembly\\\\n            assembly {\\\\n                let returndata_size := mload(returndata)\\\\n                revert(add(32, returndata), returndata_size)\\\\n            }\\\\n        } else {\\\\n            revert(errorMessage);\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/Context.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Provides information about the current execution context, including the\\\\n * sender of the transaction and its data. While these are generally available\\\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\\\n * manner, since when dealing with meta-transactions the account sending and\\\\n * paying for execution may not be the actual sender (as far as an application\\\\n * is concerned).\\\\n *\\\\n * This contract is only required for intermediate, library-like contracts.\\\\n */\\\\nabstract contract Context {\\\\n    function _msgSender() internal view virtual returns (address) {\\\\n        return msg.sender;\\\\n    }\\\\n\\\\n    function _msgData() internal view virtual returns (bytes calldata) {\\\\n        return msg.data;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC165} interface.\\\\n *\\\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\\\n * for the additional interface id that will be supported. For example:\\\\n *\\\\n * ```solidity\\\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\\\n * }\\\\n * ```\\\\n *\\\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\\\n */\\\\nabstract contract ERC165 is IERC165 {\\\\n    /**\\\\n     * @dev See {IERC165-supportsInterface}.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\n        return interfaceId == type(IERC165).interfaceId;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC165 standard, as defined in the\\\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\\\n *\\\\n * Implementers can declare support of contract interfaces, which can then be\\\\n * queried by others ({ERC165Checker}).\\\\n *\\\\n * For an implementation, see {ERC165}.\\\\n */\\\\ninterface IERC165 {\\\\n    /**\\\\n     * @dev Returns true if this contract implements the interface defined by\\\\n     * `interfaceId`. See the corresponding\\\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\\\n     * to learn more about how these ids are created.\\\\n     *\\\\n     * This function call must use less than 30 000 gas.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\\",\\"license\\":\\"MIT\\"},\\"contracts/ethregistrar/IBaseRegistrar.sol\\":{\\"content\\":\\"import \\\\\\"../registry/ENS.sol\\\\\\";\\\\nimport \\\\\\"./IBaseRegistrar.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\\\\";\\\\n\\\\ninterface IBaseRegistrar is IERC721 {\\\\n    event ControllerAdded(address indexed controller);\\\\n    event ControllerRemoved(address indexed controller);\\\\n    event NameMigrated(\\\\n        uint256 indexed id,\\\\n        address indexed owner,\\\\n        uint256 expires\\\\n    );\\\\n    event NameRegistered(\\\\n        uint256 indexed id,\\\\n        address indexed owner,\\\\n        uint256 expires\\\\n    );\\\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\\\n\\\\n    // Authorises a controller, who can register and renew domains.\\\\n    function addController(address controller) external;\\\\n\\\\n    // Revoke controller permission for an address.\\\\n    function removeController(address controller) external;\\\\n\\\\n    // Set the resolver for the TLD this registrar manages.\\\\n    function setResolver(address resolver) external;\\\\n\\\\n    // Returns the expiration timestamp of the specified label hash.\\\\n    function nameExpires(uint256 id) external view returns (uint256);\\\\n\\\\n    // Returns true if the specified name is available for registration.\\\\n    function available(uint256 id) external view returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Register a name.\\\\n     */\\\\n    function register(\\\\n        uint256 id,\\\\n        address owner,\\\\n        uint256 duration\\\\n    ) external returns (uint256);\\\\n\\\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\\\n     */\\\\n    function reclaim(uint256 id, address owner) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x15f7b1dfa7cd34444daf79ec9b4d40437caa9257893ce0639d706fcc2ba69e52\\"},\\"contracts/registry/ENS.sol\\":{\\"content\\":\\"pragma solidity >=0.8.4;\\\\n\\\\ninterface ENS {\\\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\\\n\\\\n    // Logged when the owner of a node transfers ownership to a new account.\\\\n    event Transfer(bytes32 indexed node, address owner);\\\\n\\\\n    // Logged when the resolver for a node changes.\\\\n    event NewResolver(bytes32 indexed node, address resolver);\\\\n\\\\n    // Logged when the TTL of a node changes\\\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\\\n\\\\n    // Logged when an operator is added or removed.\\\\n    event ApprovalForAll(\\\\n        address indexed owner,\\\\n        address indexed operator,\\\\n        bool approved\\\\n    );\\\\n\\\\n    function setRecord(\\\\n        bytes32 node,\\\\n        address owner,\\\\n        address resolver,\\\\n        uint64 ttl\\\\n    ) external;\\\\n\\\\n    function setSubnodeRecord(\\\\n        bytes32 node,\\\\n        bytes32 label,\\\\n        address owner,\\\\n        address resolver,\\\\n        uint64 ttl\\\\n    ) external;\\\\n\\\\n    function setSubnodeOwner(\\\\n        bytes32 node,\\\\n        bytes32 label,\\\\n        address owner\\\\n    ) external returns (bytes32);\\\\n\\\\n    function setResolver(bytes32 node, address resolver) external;\\\\n\\\\n    function setOwner(bytes32 node, address owner) external;\\\\n\\\\n    function setTTL(bytes32 node, uint64 ttl) external;\\\\n\\\\n    function setApprovalForAll(address operator, bool approved) external;\\\\n\\\\n    function owner(bytes32 node) external view returns (address);\\\\n\\\\n    function resolver(bytes32 node) external view returns (address);\\\\n\\\\n    function ttl(bytes32 node) external view returns (uint64);\\\\n\\\\n    function recordExists(bytes32 node) external view returns (bool);\\\\n\\\\n    function isApprovedForAll(\\\\n        address owner,\\\\n        address operator\\\\n    ) external view returns (bool);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x7cb1158c7d268b63de1468e28e2711b28d686e2628ddb22da2149cd93ddeafda\\"},\\"contracts/reverseRegistrar/IReverseRegistrar.sol\\":{\\"content\\":\\"pragma solidity >=0.8.4;\\\\n\\\\ninterface IReverseRegistrar {\\\\n    function setDefaultResolver(address resolver) external;\\\\n\\\\n    function claim(address owner) external returns (bytes32);\\\\n\\\\n    function claimForAddr(\\\\n        address addr,\\\\n        address owner,\\\\n        address resolver\\\\n    ) external returns (bytes32);\\\\n\\\\n    function claimWithResolver(\\\\n        address owner,\\\\n        address resolver\\\\n    ) external returns (bytes32);\\\\n\\\\n    function setName(string memory name) external returns (bytes32);\\\\n\\\\n    function setNameForAddr(\\\\n        address addr,\\\\n        address owner,\\\\n        address resolver,\\\\n        string memory name\\\\n    ) external returns (bytes32);\\\\n\\\\n    function node(address addr) external pure returns (bytes32);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x83adfcf6da72b1bcd1e3ac387afe5fc7fdf7f2ac28b7601544d2ca4b9d45d159\\"},\\"contracts/reverseRegistrar/ReverseClaimer.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.17 <0.9.0;\\\\n\\\\nimport {ENS} from \\\\\\"../registry/ENS.sol\\\\\\";\\\\nimport {IReverseRegistrar} from \\\\\\"../reverseRegistrar/IReverseRegistrar.sol\\\\\\";\\\\n\\\\ncontract ReverseClaimer {\\\\n    bytes32 constant ADDR_REVERSE_NODE =\\\\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\\\n\\\\n    constructor(ENS ens, address claimant) {\\\\n        IReverseRegistrar reverseRegistrar = IReverseRegistrar(\\\\n            ens.owner(ADDR_REVERSE_NODE)\\\\n        );\\\\n        reverseRegistrar.claim(claimant);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x78a28627241535b595f6fff476a1fa7acc90c80684fe7784734920fc8af6fc22\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/ERC20Recoverable.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.17 <0.9.0;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\\\\";\\\\n\\\\n/**\\\\n    @notice Contract is used to recover ERC20 tokens sent to the contract by mistake.\\\\n */\\\\n\\\\ncontract ERC20Recoverable is Ownable {\\\\n    /**\\\\n    @notice Recover ERC20 tokens sent to the contract by mistake.\\\\n    @dev The contract is Ownable and only the owner can call the recover function.\\\\n    @param _to The address to send the tokens to.\\\\n@param _token The address of the ERC20 token to recover\\\\n    @param _amount The amount of tokens to recover.\\\\n */\\\\n    function recoverFunds(\\\\n        address _token,\\\\n        address _to,\\\\n        uint256 _amount\\\\n    ) external onlyOwner {\\\\n        IERC20(_token).transfer(_to, _amount);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x793a38091e1f81499a29ddba82c2b2f3cdd07071b81a832886e8e02a45ff352a\\",\\"license\\":\\"MIT\\"},\\"contracts/wrapper/BytesUtils.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity ~0.8.17;\\\\n\\\\nlibrary BytesUtils {\\\\n    /*\\\\n     * @dev Returns the keccak-256 hash of a byte range.\\\\n     * @param self The byte string to hash.\\\\n     * @param offset The position to start hashing at.\\\\n     * @param len The number of bytes to hash.\\\\n     * @return The hash of the byte range.\\\\n     */\\\\n    function keccak(\\\\n        bytes memory self,\\\\n        uint256 offset,\\\\n        uint256 len\\\\n    ) internal pure returns (bytes32 ret) {\\\\n        require(offset + len <= self.length);\\\\n        assembly {\\\\n            ret := keccak256(add(add(self, 32), offset), len)\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the ENS namehash of a DNS-encoded name.\\\\n     * @param self The DNS-encoded name to hash.\\\\n     * @param offset The offset at which to start hashing.\\\\n     * @return The namehash of the name.\\\\n     */\\\\n    function namehash(\\\\n        bytes memory self,\\\\n        uint256 offset\\\\n    ) internal pure returns (bytes32) {\\\\n        (bytes32 labelhash, uint256 newOffset) = readLabel(self, offset);\\\\n        if (labelhash == bytes32(0)) {\\\\n            require(offset == self.length - 1, \\\\\\"namehash: Junk at end of name\\\\\\");\\\\n            return bytes32(0);\\\\n        }\\\\n        return\\\\n            keccak256(abi.encodePacked(namehash(self, newOffset), labelhash));\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the keccak-256 hash of a DNS-encoded label, and the offset to the start of the next label.\\\\n     * @param self The byte string to read a label from.\\\\n     * @param idx The index to read a label at.\\\\n     * @return labelhash The hash of the label at the specified index, or 0 if it is the last label.\\\\n     * @return newIdx The index of the start of the next label.\\\\n     */\\\\n    function readLabel(\\\\n        bytes memory self,\\\\n        uint256 idx\\\\n    ) internal pure returns (bytes32 labelhash, uint256 newIdx) {\\\\n        require(idx < self.length, \\\\\\"readLabel: Index out of bounds\\\\\\");\\\\n        uint256 len = uint256(uint8(self[idx]));\\\\n        if (len > 0) {\\\\n            labelhash = keccak(self, idx + 1, len);\\\\n        } else {\\\\n            labelhash = bytes32(0);\\\\n        }\\\\n        newIdx = idx + len + 1;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf862cd86d749158a554e3cb517efa9097331ec0cf7225117f21e96fb50c67edb\\",\\"license\\":\\"MIT\\"},\\"contracts/wrapper/Controllable.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity ~0.8.17;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\n\\\\ncontract Controllable is Ownable {\\\\n    mapping(address => bool) public controllers;\\\\n\\\\n    event ControllerChanged(address indexed controller, bool active);\\\\n\\\\n    function setController(address controller, bool active) public onlyOwner {\\\\n        controllers[controller] = active;\\\\n        emit ControllerChanged(controller, active);\\\\n    }\\\\n\\\\n    modifier onlyController() {\\\\n        require(\\\\n            controllers[msg.sender],\\\\n            \\\\\\"Controllable: Caller is not a controller\\\\\\"\\\\n        );\\\\n        _;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x9a9191656a82eda6763cda29ce893ddbfddb6c43559ff3b90c00a184e14e1fa1\\",\\"license\\":\\"MIT\\"},\\"contracts/wrapper/ERC1155Fuse.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity ~0.8.17;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/Address.sol\\\\\\";\\\\n\\\\n/* This contract is a variation on ERC1155 with the additions of _setData, getData and _beforeTransfer and ownerOf. _setData and getData allows the use of the other 96 bits next to the address of the owner for extra data. We use this to store \'fuses\' that control permissions that can be burnt. 32 bits are used for the fuses themselves and 64 bits are used for the expiry of the name. When a name has expired, its fuses will be be set back to 0 */\\\\n\\\\nabstract contract ERC1155Fuse is ERC165, IERC1155, IERC1155MetadataURI {\\\\n    using Address for address;\\\\n    /**\\\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\\\n     */\\\\n    event Approval(\\\\n        address indexed owner,\\\\n        address indexed approved,\\\\n        uint256 indexed tokenId\\\\n    );\\\\n    mapping(uint256 => uint256) public _tokens;\\\\n\\\\n    // Mapping from owner to operator approvals\\\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\\\n    // Mapping from token ID to approved address\\\\n    mapping(uint256 => address) internal _tokenApprovals;\\\\n\\\\n    /**************************************************************************\\\\n     * ERC721 methods\\\\n     *************************************************************************/\\\\n\\\\n    function ownerOf(uint256 id) public view virtual returns (address) {\\\\n        (address owner, , ) = getData(id);\\\\n        return owner;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-approve}.\\\\n     */\\\\n    function approve(address to, uint256 tokenId) public virtual {\\\\n        address owner = ownerOf(tokenId);\\\\n        require(to != owner, \\\\\\"ERC721: approval to current owner\\\\\\");\\\\n\\\\n        require(\\\\n            msg.sender == owner || isApprovedForAll(owner, msg.sender),\\\\n            \\\\\\"ERC721: approve caller is not token owner or approved for all\\\\\\"\\\\n        );\\\\n\\\\n        _approve(to, tokenId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC721-getApproved}.\\\\n     */\\\\n    function getApproved(\\\\n        uint256 tokenId\\\\n    ) public view virtual returns (address) {\\\\n        return _tokenApprovals[tokenId];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC165-supportsInterface}.\\\\n     */\\\\n    function supportsInterface(\\\\n        bytes4 interfaceId\\\\n    ) public view virtual override(ERC165, IERC165) returns (bool) {\\\\n        return\\\\n            interfaceId == type(IERC1155).interfaceId ||\\\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\\\n            super.supportsInterface(interfaceId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC1155-balanceOf}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     */\\\\n    function balanceOf(\\\\n        address account,\\\\n        uint256 id\\\\n    ) public view virtual override returns (uint256) {\\\\n        require(\\\\n            account != address(0),\\\\n            \\\\\\"ERC1155: balance query for the zero address\\\\\\"\\\\n        );\\\\n        address owner = ownerOf(id);\\\\n        if (owner == account) {\\\\n            return 1;\\\\n        }\\\\n        return 0;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC1155-balanceOfBatch}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `accounts` and `ids` must have the same length.\\\\n     */\\\\n    function balanceOfBatch(\\\\n        address[] memory accounts,\\\\n        uint256[] memory ids\\\\n    ) public view virtual override returns (uint256[] memory) {\\\\n        require(\\\\n            accounts.length == ids.length,\\\\n            \\\\\\"ERC1155: accounts and ids length mismatch\\\\\\"\\\\n        );\\\\n\\\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\\\n\\\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\\\n        }\\\\n\\\\n        return batchBalances;\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC1155-setApprovalForAll}.\\\\n     */\\\\n    function setApprovalForAll(\\\\n        address operator,\\\\n        bool approved\\\\n    ) public virtual override {\\\\n        require(\\\\n            msg.sender != operator,\\\\n            \\\\\\"ERC1155: setting approval status for self\\\\\\"\\\\n        );\\\\n\\\\n        _operatorApprovals[msg.sender][operator] = approved;\\\\n        emit ApprovalForAll(msg.sender, operator, approved);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC1155-isApprovedForAll}.\\\\n     */\\\\n    function isApprovedForAll(\\\\n        address account,\\\\n        address operator\\\\n    ) public view virtual override returns (bool) {\\\\n        return _operatorApprovals[account][operator];\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Returns the Name\'s owner address and fuses\\\\n     */\\\\n    function getData(\\\\n        uint256 tokenId\\\\n    ) public view virtual returns (address owner, uint32 fuses, uint64 expiry) {\\\\n        uint256 t = _tokens[tokenId];\\\\n        owner = address(uint160(t));\\\\n        expiry = uint64(t >> 192);\\\\n        fuses = uint32(t >> 160);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC1155-safeTransferFrom}.\\\\n     */\\\\n    function safeTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256 id,\\\\n        uint256 amount,\\\\n        bytes memory data\\\\n    ) public virtual override {\\\\n        require(to != address(0), \\\\\\"ERC1155: transfer to the zero address\\\\\\");\\\\n        require(\\\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\\\n            \\\\\\"ERC1155: caller is not owner nor approved\\\\\\"\\\\n        );\\\\n\\\\n        _transfer(from, to, id, amount, data);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\\\n     */\\\\n    function safeBatchTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256[] memory ids,\\\\n        uint256[] memory amounts,\\\\n        bytes memory data\\\\n    ) public virtual override {\\\\n        require(\\\\n            ids.length == amounts.length,\\\\n            \\\\\\"ERC1155: ids and amounts length mismatch\\\\\\"\\\\n        );\\\\n        require(to != address(0), \\\\\\"ERC1155: transfer to the zero address\\\\\\");\\\\n        require(\\\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\\\n            \\\\\\"ERC1155: transfer caller is not owner nor approved\\\\\\"\\\\n        );\\\\n\\\\n        for (uint256 i = 0; i < ids.length; ++i) {\\\\n            uint256 id = ids[i];\\\\n            uint256 amount = amounts[i];\\\\n\\\\n            (address oldOwner, uint32 fuses, uint64 expiry) = getData(id);\\\\n\\\\n            _beforeTransfer(id, fuses, expiry);\\\\n\\\\n            require(\\\\n                amount == 1 && oldOwner == from,\\\\n                \\\\\\"ERC1155: insufficient balance for transfer\\\\\\"\\\\n            );\\\\n            _setData(id, to, fuses, expiry);\\\\n        }\\\\n\\\\n        emit TransferBatch(msg.sender, from, to, ids, amounts);\\\\n\\\\n        _doSafeBatchTransferAcceptanceCheck(\\\\n            msg.sender,\\\\n            from,\\\\n            to,\\\\n            ids,\\\\n            amounts,\\\\n            data\\\\n        );\\\\n    }\\\\n\\\\n    /**************************************************************************\\\\n     * Internal/private methods\\\\n     *************************************************************************/\\\\n\\\\n    /**\\\\n     * @dev Sets the Name\'s owner address and fuses\\\\n     */\\\\n    function _setData(\\\\n        uint256 tokenId,\\\\n        address owner,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) internal virtual {\\\\n        _tokens[tokenId] =\\\\n            uint256(uint160(owner)) |\\\\n            (uint256(fuses) << 160) |\\\\n            (uint256(expiry) << 192);\\\\n    }\\\\n\\\\n    function _beforeTransfer(\\\\n        uint256 id,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) internal virtual;\\\\n\\\\n    function _clearOwnerAndFuses(\\\\n        address owner,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) internal virtual returns (address, uint32);\\\\n\\\\n    function _mint(\\\\n        bytes32 node,\\\\n        address owner,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) internal virtual {\\\\n        uint256 tokenId = uint256(node);\\\\n        (address oldOwner, uint32 oldFuses, uint64 oldExpiry) = getData(\\\\n            uint256(node)\\\\n        );\\\\n\\\\n        uint32 parentControlledFuses = (uint32(type(uint16).max) << 16) &\\\\n            oldFuses;\\\\n\\\\n        if (oldExpiry > expiry) {\\\\n            expiry = oldExpiry;\\\\n        }\\\\n\\\\n        if (oldExpiry >= block.timestamp) {\\\\n            fuses = fuses | parentControlledFuses;\\\\n        }\\\\n\\\\n        require(oldOwner == address(0), \\\\\\"ERC1155: mint of existing token\\\\\\");\\\\n        require(owner != address(0), \\\\\\"ERC1155: mint to the zero address\\\\\\");\\\\n        require(\\\\n            owner != address(this),\\\\n            \\\\\\"ERC1155: newOwner cannot be the NameWrapper contract\\\\\\"\\\\n        );\\\\n\\\\n        _setData(tokenId, owner, fuses, expiry);\\\\n        emit TransferSingle(msg.sender, address(0x0), owner, tokenId, 1);\\\\n        _doSafeTransferAcceptanceCheck(\\\\n            msg.sender,\\\\n            address(0),\\\\n            owner,\\\\n            tokenId,\\\\n            1,\\\\n            \\\\\\"\\\\\\"\\\\n        );\\\\n    }\\\\n\\\\n    function _burn(uint256 tokenId) internal virtual {\\\\n        (address oldOwner, uint32 fuses, uint64 expiry) = ERC1155Fuse.getData(\\\\n            tokenId\\\\n        );\\\\n        (, fuses) = _clearOwnerAndFuses(oldOwner, fuses, expiry);\\\\n        // Clear approvals\\\\n        delete _tokenApprovals[tokenId];\\\\n        // Fuses and expiry are kept on burn\\\\n        _setData(tokenId, address(0x0), fuses, expiry);\\\\n        emit TransferSingle(msg.sender, oldOwner, address(0x0), tokenId, 1);\\\\n    }\\\\n\\\\n    function _transfer(\\\\n        address from,\\\\n        address to,\\\\n        uint256 id,\\\\n        uint256 amount,\\\\n        bytes memory data\\\\n    ) internal {\\\\n        (address oldOwner, uint32 fuses, uint64 expiry) = getData(id);\\\\n\\\\n        _beforeTransfer(id, fuses, expiry);\\\\n\\\\n        require(\\\\n            amount == 1 && oldOwner == from,\\\\n            \\\\\\"ERC1155: insufficient balance for transfer\\\\\\"\\\\n        );\\\\n\\\\n        if (oldOwner == to) {\\\\n            return;\\\\n        }\\\\n\\\\n        _setData(id, to, fuses, expiry);\\\\n\\\\n        emit TransferSingle(msg.sender, from, to, id, amount);\\\\n\\\\n        _doSafeTransferAcceptanceCheck(msg.sender, from, to, id, amount, data);\\\\n    }\\\\n\\\\n    function _doSafeTransferAcceptanceCheck(\\\\n        address operator,\\\\n        address from,\\\\n        address to,\\\\n        uint256 id,\\\\n        uint256 amount,\\\\n        bytes memory data\\\\n    ) private {\\\\n        if (to.isContract()) {\\\\n            try\\\\n                IERC1155Receiver(to).onERC1155Received(\\\\n                    operator,\\\\n                    from,\\\\n                    id,\\\\n                    amount,\\\\n                    data\\\\n                )\\\\n            returns (bytes4 response) {\\\\n                if (\\\\n                    response != IERC1155Receiver(to).onERC1155Received.selector\\\\n                ) {\\\\n                    revert(\\\\\\"ERC1155: ERC1155Receiver rejected tokens\\\\\\");\\\\n                }\\\\n            } catch Error(string memory reason) {\\\\n                revert(reason);\\\\n            } catch {\\\\n                revert(\\\\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\\\\");\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    function _doSafeBatchTransferAcceptanceCheck(\\\\n        address operator,\\\\n        address from,\\\\n        address to,\\\\n        uint256[] memory ids,\\\\n        uint256[] memory amounts,\\\\n        bytes memory data\\\\n    ) private {\\\\n        if (to.isContract()) {\\\\n            try\\\\n                IERC1155Receiver(to).onERC1155BatchReceived(\\\\n                    operator,\\\\n                    from,\\\\n                    ids,\\\\n                    amounts,\\\\n                    data\\\\n                )\\\\n            returns (bytes4 response) {\\\\n                if (\\\\n                    response !=\\\\n                    IERC1155Receiver(to).onERC1155BatchReceived.selector\\\\n                ) {\\\\n                    revert(\\\\\\"ERC1155: ERC1155Receiver rejected tokens\\\\\\");\\\\n                }\\\\n            } catch Error(string memory reason) {\\\\n                revert(reason);\\\\n            } catch {\\\\n                revert(\\\\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\\\\");\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    /* ERC721 internal functions */\\\\n\\\\n    /**\\\\n     * @dev Approve `to` to operate on `tokenId`\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function _approve(address to, uint256 tokenId) internal virtual {\\\\n        _tokenApprovals[tokenId] = to;\\\\n        emit Approval(ownerOf(tokenId), to, tokenId);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xfbbd36e7f5df0fe7a8e9199783af99ac61ab24122e4a9fdb072bbd4cd676a88b\\",\\"license\\":\\"MIT\\"},\\"contracts/wrapper/IMetadataService.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity ~0.8.17;\\\\n\\\\ninterface IMetadataService {\\\\n    function uri(uint256) external view returns (string memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb3f1cf6df01ed7b15e5f2318f6823afbdb586ca38c2124c67955c645647ae9a2\\",\\"license\\":\\"MIT\\"},\\"contracts/wrapper/INameWrapper.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity ~0.8.17;\\\\n\\\\nimport \\\\\\"../registry/ENS.sol\\\\\\";\\\\nimport \\\\\\"../ethregistrar/IBaseRegistrar.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\\\\";\\\\nimport \\\\\\"./IMetadataService.sol\\\\\\";\\\\nimport \\\\\\"./INameWrapperUpgrade.sol\\\\\\";\\\\n\\\\nuint32 constant CANNOT_UNWRAP = 1;\\\\nuint32 constant CANNOT_BURN_FUSES = 2;\\\\nuint32 constant CANNOT_TRANSFER = 4;\\\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\\\nuint32 constant CANNOT_SET_TTL = 16;\\\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\\\nuint32 constant CANNOT_APPROVE = 64;\\\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\\\nuint32 constant IS_DOT_ETH = 1 << 17;\\\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\\\nuint32 constant CAN_DO_EVERYTHING = 0;\\\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\\\n// all fuses apart from IS_DOT_ETH\\\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\\\n\\\\ninterface INameWrapper is IERC1155 {\\\\n    event NameWrapped(\\\\n        bytes32 indexed node,\\\\n        bytes name,\\\\n        address owner,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    );\\\\n\\\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\\\n\\\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\\\n\\\\n    function ens() external view returns (ENS);\\\\n\\\\n    function registrar() external view returns (IBaseRegistrar);\\\\n\\\\n    function metadataService() external view returns (IMetadataService);\\\\n\\\\n    function names(bytes32) external view returns (bytes memory);\\\\n\\\\n    function name() external view returns (string memory);\\\\n\\\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\\\n\\\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\\\n\\\\n    function wrap(\\\\n        bytes calldata name,\\\\n        address wrappedOwner,\\\\n        address resolver\\\\n    ) external;\\\\n\\\\n    function wrapETH2LD(\\\\n        string calldata label,\\\\n        address wrappedOwner,\\\\n        uint16 ownerControlledFuses,\\\\n        address resolver\\\\n    ) external returns (uint64 expires);\\\\n\\\\n    function registerAndWrapETH2LD(\\\\n        string calldata label,\\\\n        address wrappedOwner,\\\\n        uint256 duration,\\\\n        address resolver,\\\\n        uint16 ownerControlledFuses\\\\n    ) external returns (uint256 registrarExpiry);\\\\n\\\\n    function renew(\\\\n        uint256 labelHash,\\\\n        uint256 duration\\\\n    ) external returns (uint256 expires);\\\\n\\\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\\\n\\\\n    function unwrapETH2LD(\\\\n        bytes32 label,\\\\n        address newRegistrant,\\\\n        address newController\\\\n    ) external;\\\\n\\\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\\\n\\\\n    function setFuses(\\\\n        bytes32 node,\\\\n        uint16 ownerControlledFuses\\\\n    ) external returns (uint32 newFuses);\\\\n\\\\n    function setChildFuses(\\\\n        bytes32 parentNode,\\\\n        bytes32 labelhash,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) external;\\\\n\\\\n    function setSubnodeRecord(\\\\n        bytes32 node,\\\\n        string calldata label,\\\\n        address owner,\\\\n        address resolver,\\\\n        uint64 ttl,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) external returns (bytes32);\\\\n\\\\n    function setRecord(\\\\n        bytes32 node,\\\\n        address owner,\\\\n        address resolver,\\\\n        uint64 ttl\\\\n    ) external;\\\\n\\\\n    function setSubnodeOwner(\\\\n        bytes32 node,\\\\n        string calldata label,\\\\n        address newOwner,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) external returns (bytes32);\\\\n\\\\n    function extendExpiry(\\\\n        bytes32 node,\\\\n        bytes32 labelhash,\\\\n        uint64 expiry\\\\n    ) external returns (uint64);\\\\n\\\\n    function canModifyName(\\\\n        bytes32 node,\\\\n        address addr\\\\n    ) external view returns (bool);\\\\n\\\\n    function setResolver(bytes32 node, address resolver) external;\\\\n\\\\n    function setTTL(bytes32 node, uint64 ttl) external;\\\\n\\\\n    function ownerOf(uint256 id) external view returns (address owner);\\\\n\\\\n    function approve(address to, uint256 tokenId) external;\\\\n\\\\n    function getApproved(uint256 tokenId) external view returns (address);\\\\n\\\\n    function getData(\\\\n        uint256 id\\\\n    ) external view returns (address, uint32, uint64);\\\\n\\\\n    function setMetadataService(IMetadataService _metadataService) external;\\\\n\\\\n    function uri(uint256 tokenId) external view returns (string memory);\\\\n\\\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\\\n\\\\n    function allFusesBurned(\\\\n        bytes32 node,\\\\n        uint32 fuseMask\\\\n    ) external view returns (bool);\\\\n\\\\n    function isWrapped(bytes32) external view returns (bool);\\\\n\\\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x70310eb67146d7290731c31841399640ac3b6a949eadc6598bc150123d185c57\\",\\"license\\":\\"MIT\\"},\\"contracts/wrapper/INameWrapperUpgrade.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity ~0.8.17;\\\\n\\\\ninterface INameWrapperUpgrade {\\\\n    function wrapFromUpgrade(\\\\n        bytes calldata name,\\\\n        address wrappedOwner,\\\\n        uint32 fuses,\\\\n        uint64 expiry,\\\\n        address approved,\\\\n        bytes calldata extraData\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\\",\\"license\\":\\"MIT\\"},\\"contracts/wrapper/NameWrapper.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity ~0.8.17;\\\\n\\\\nimport {ERC1155Fuse, IERC165, IERC1155MetadataURI} from \\\\\\"./ERC1155Fuse.sol\\\\\\";\\\\nimport {Controllable} from \\\\\\"./Controllable.sol\\\\\\";\\\\nimport {INameWrapper, CANNOT_UNWRAP, CANNOT_BURN_FUSES, CANNOT_TRANSFER, CANNOT_SET_RESOLVER, CANNOT_SET_TTL, CANNOT_CREATE_SUBDOMAIN, CANNOT_APPROVE, PARENT_CANNOT_CONTROL, CAN_DO_EVERYTHING, IS_DOT_ETH, CAN_EXTEND_EXPIRY, PARENT_CONTROLLED_FUSES, USER_SETTABLE_FUSES} from \\\\\\"./INameWrapper.sol\\\\\\";\\\\nimport {INameWrapperUpgrade} from \\\\\\"./INameWrapperUpgrade.sol\\\\\\";\\\\nimport {IMetadataService} from \\\\\\"./IMetadataService.sol\\\\\\";\\\\nimport {ENS} from \\\\\\"../registry/ENS.sol\\\\\\";\\\\nimport {IReverseRegistrar} from \\\\\\"../reverseRegistrar/IReverseRegistrar.sol\\\\\\";\\\\nimport {ReverseClaimer} from \\\\\\"../reverseRegistrar/ReverseClaimer.sol\\\\\\";\\\\nimport {IBaseRegistrar} from \\\\\\"../ethregistrar/IBaseRegistrar.sol\\\\\\";\\\\nimport {IERC721Receiver} from \\\\\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\\\\";\\\\nimport {Ownable} from \\\\\\"@openzeppelin/contracts/access/Ownable.sol\\\\\\";\\\\nimport {BytesUtils} from \\\\\\"./BytesUtils.sol\\\\\\";\\\\nimport {ERC20Recoverable} from \\\\\\"../utils/ERC20Recoverable.sol\\\\\\";\\\\n\\\\nerror Unauthorised(bytes32 node, address addr);\\\\nerror IncompatibleParent();\\\\nerror IncorrectTokenType();\\\\nerror LabelMismatch(bytes32 labelHash, bytes32 expectedLabelhash);\\\\nerror LabelTooShort();\\\\nerror LabelTooLong(string label);\\\\nerror IncorrectTargetOwner(address owner);\\\\nerror CannotUpgrade();\\\\nerror OperationProhibited(bytes32 node);\\\\nerror NameIsNotWrapped();\\\\nerror NameIsStillExpired();\\\\n\\\\ncontract NameWrapper is\\\\n    Ownable,\\\\n    ERC1155Fuse,\\\\n    INameWrapper,\\\\n    Controllable,\\\\n    IERC721Receiver,\\\\n    ERC20Recoverable,\\\\n    ReverseClaimer\\\\n{\\\\n    using BytesUtils for bytes;\\\\n\\\\n    ENS public immutable ens;\\\\n    IBaseRegistrar public immutable registrar;\\\\n    IMetadataService public metadataService;\\\\n    mapping(bytes32 => bytes) public names;\\\\n    string public constant name = \\\\\\"NameWrapper\\\\\\";\\\\n\\\\n    uint64 private constant GRACE_PERIOD = 90 days;\\\\n    bytes32 private constant ETH_NODE =\\\\n        0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\\\\n    bytes32 private constant ETH_LABELHASH =\\\\n        0x4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0;\\\\n    bytes32 private constant ROOT_NODE =\\\\n        0x0000000000000000000000000000000000000000000000000000000000000000;\\\\n\\\\n    INameWrapperUpgrade public upgradeContract;\\\\n    uint64 private constant MAX_EXPIRY = type(uint64).max;\\\\n\\\\n    constructor(\\\\n        ENS _ens,\\\\n        IBaseRegistrar _registrar,\\\\n        IMetadataService _metadataService\\\\n    ) ReverseClaimer(_ens, msg.sender) {\\\\n        ens = _ens;\\\\n        registrar = _registrar;\\\\n        metadataService = _metadataService;\\\\n\\\\n        /* Burn PARENT_CANNOT_CONTROL and CANNOT_UNWRAP fuses for ROOT_NODE and ETH_NODE and set expiry to max */\\\\n\\\\n        _setData(\\\\n            uint256(ETH_NODE),\\\\n            address(0),\\\\n            uint32(PARENT_CANNOT_CONTROL | CANNOT_UNWRAP),\\\\n            MAX_EXPIRY\\\\n        );\\\\n        _setData(\\\\n            uint256(ROOT_NODE),\\\\n            address(0),\\\\n            uint32(PARENT_CANNOT_CONTROL | CANNOT_UNWRAP),\\\\n            MAX_EXPIRY\\\\n        );\\\\n        names[ROOT_NODE] = \\\\\\"\\\\\\\\x00\\\\\\";\\\\n        names[ETH_NODE] = \\\\\\"\\\\\\\\x03eth\\\\\\\\x00\\\\\\";\\\\n    }\\\\n\\\\n    function supportsInterface(\\\\n        bytes4 interfaceId\\\\n    ) public view virtual override(ERC1155Fuse, INameWrapper) returns (bool) {\\\\n        return\\\\n            interfaceId == type(INameWrapper).interfaceId ||\\\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\\\n            super.supportsInterface(interfaceId);\\\\n    }\\\\n\\\\n    /* ERC1155 Fuse */\\\\n\\\\n    /**\\\\n     * @notice Gets the owner of a name\\\\n     * @param id Label as a string of the .eth domain to wrap\\\\n     * @return owner The owner of the name\\\\n     */\\\\n\\\\n    function ownerOf(\\\\n        uint256 id\\\\n    ) public view override(ERC1155Fuse, INameWrapper) returns (address owner) {\\\\n        return super.ownerOf(id);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Gets the owner of a name\\\\n     * @param id Namehash of the name\\\\n     * @return operator Approved operator of a name\\\\n     */\\\\n\\\\n    function getApproved(\\\\n        uint256 id\\\\n    )\\\\n        public\\\\n        view\\\\n        override(ERC1155Fuse, INameWrapper)\\\\n        returns (address operator)\\\\n    {\\\\n        address owner = ownerOf(id);\\\\n        if (owner == address(0)) {\\\\n            return address(0);\\\\n        }\\\\n        return super.getApproved(id);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Approves an address for a name\\\\n     * @param to address to approve\\\\n     * @param tokenId name to approve\\\\n     */\\\\n\\\\n    function approve(\\\\n        address to,\\\\n        uint256 tokenId\\\\n    ) public override(ERC1155Fuse, INameWrapper) {\\\\n        (, uint32 fuses, ) = getData(tokenId);\\\\n        if (fuses & CANNOT_APPROVE == CANNOT_APPROVE) {\\\\n            revert OperationProhibited(bytes32(tokenId));\\\\n        }\\\\n        super.approve(to, tokenId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Gets the data for a name\\\\n     * @param id Namehash of the name\\\\n     * @return owner Owner of the name\\\\n     * @return fuses Fuses of the name\\\\n     * @return expiry Expiry of the name\\\\n     */\\\\n\\\\n    function getData(\\\\n        uint256 id\\\\n    )\\\\n        public\\\\n        view\\\\n        override(ERC1155Fuse, INameWrapper)\\\\n        returns (address owner, uint32 fuses, uint64 expiry)\\\\n    {\\\\n        (owner, fuses, expiry) = super.getData(id);\\\\n\\\\n        (owner, fuses) = _clearOwnerAndFuses(owner, fuses, expiry);\\\\n    }\\\\n\\\\n    /* Metadata service */\\\\n\\\\n    /**\\\\n     * @notice Set the metadata service. Only the owner can do this\\\\n     * @param _metadataService The new metadata service\\\\n     */\\\\n\\\\n    function setMetadataService(\\\\n        IMetadataService _metadataService\\\\n    ) public onlyOwner {\\\\n        metadataService = _metadataService;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Get the metadata uri\\\\n     * @param tokenId The id of the token\\\\n     * @return string uri of the metadata service\\\\n     */\\\\n\\\\n    function uri(\\\\n        uint256 tokenId\\\\n    )\\\\n        public\\\\n        view\\\\n        override(INameWrapper, IERC1155MetadataURI)\\\\n        returns (string memory)\\\\n    {\\\\n        return metadataService.uri(tokenId);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Set the address of the upgradeContract of the contract. only admin can do this\\\\n     * @dev The default value of upgradeContract is the 0 address. Use the 0 address at any time\\\\n     * to make the contract not upgradable.\\\\n     * @param _upgradeAddress address of an upgraded contract\\\\n     */\\\\n\\\\n    function setUpgradeContract(\\\\n        INameWrapperUpgrade _upgradeAddress\\\\n    ) public onlyOwner {\\\\n        if (address(upgradeContract) != address(0)) {\\\\n            registrar.setApprovalForAll(address(upgradeContract), false);\\\\n            ens.setApprovalForAll(address(upgradeContract), false);\\\\n        }\\\\n\\\\n        upgradeContract = _upgradeAddress;\\\\n\\\\n        if (address(upgradeContract) != address(0)) {\\\\n            registrar.setApprovalForAll(address(upgradeContract), true);\\\\n            ens.setApprovalForAll(address(upgradeContract), true);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Checks if msg.sender is the owner or operator of the owner of a name\\\\n     * @param node namehash of the name to check\\\\n     */\\\\n\\\\n    modifier onlyTokenOwner(bytes32 node) {\\\\n        if (!canModifyName(node, msg.sender)) {\\\\n            revert Unauthorised(node, msg.sender);\\\\n        }\\\\n\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Checks if owner or operator of the owner\\\\n     * @param node namehash of the name to check\\\\n     * @param addr which address to check permissions for\\\\n     * @return whether or not is owner or operator\\\\n     */\\\\n\\\\n    function canModifyName(\\\\n        bytes32 node,\\\\n        address addr\\\\n    ) public view returns (bool) {\\\\n        (address owner, uint32 fuses, uint64 expiry) = getData(uint256(node));\\\\n        return\\\\n            (owner == addr || isApprovedForAll(owner, addr)) &&\\\\n            !_isETH2LDInGracePeriod(fuses, expiry);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Checks if owner/operator or approved by owner\\\\n     * @param node namehash of the name to check\\\\n     * @param addr which address to check permissions for\\\\n     * @return whether or not is owner/operator or approved\\\\n     */\\\\n\\\\n    function canExtendSubnames(\\\\n        bytes32 node,\\\\n        address addr\\\\n    ) public view returns (bool) {\\\\n        (address owner, uint32 fuses, uint64 expiry) = getData(uint256(node));\\\\n        return\\\\n            (owner == addr ||\\\\n                isApprovedForAll(owner, addr) ||\\\\n                getApproved(uint256(node)) == addr) &&\\\\n            !_isETH2LDInGracePeriod(fuses, expiry);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Wraps a .eth domain, creating a new token and sending the original ERC721 token to this contract\\\\n     * @dev Can be called by the owner of the name on the .eth registrar or an authorised caller on the registrar\\\\n     * @param label Label as a string of the .eth domain to wrap\\\\n     * @param wrappedOwner Owner of the name in this contract\\\\n     * @param ownerControlledFuses Initial owner-controlled fuses to set\\\\n     * @param resolver Resolver contract address\\\\n     */\\\\n\\\\n    function wrapETH2LD(\\\\n        string calldata label,\\\\n        address wrappedOwner,\\\\n        uint16 ownerControlledFuses,\\\\n        address resolver\\\\n    ) public returns (uint64 expiry) {\\\\n        uint256 tokenId = uint256(keccak256(bytes(label)));\\\\n        address registrant = registrar.ownerOf(tokenId);\\\\n        if (\\\\n            registrant != msg.sender &&\\\\n            !registrar.isApprovedForAll(registrant, msg.sender)\\\\n        ) {\\\\n            revert Unauthorised(\\\\n                _makeNode(ETH_NODE, bytes32(tokenId)),\\\\n                msg.sender\\\\n            );\\\\n        }\\\\n\\\\n        // transfer the token from the user to this contract\\\\n        registrar.transferFrom(registrant, address(this), tokenId);\\\\n\\\\n        // transfer the ens record back to the new owner (this contract)\\\\n        registrar.reclaim(tokenId, address(this));\\\\n\\\\n        expiry = uint64(registrar.nameExpires(tokenId)) + GRACE_PERIOD;\\\\n\\\\n        _wrapETH2LD(\\\\n            label,\\\\n            wrappedOwner,\\\\n            ownerControlledFuses,\\\\n            expiry,\\\\n            resolver\\\\n        );\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Registers a new .eth second-level domain and wraps it.\\\\n     *      Only callable by authorised controllers.\\\\n     * @param label The label to register (Eg, \'foo\' for \'foo.eth\').\\\\n     * @param wrappedOwner The owner of the wrapped name.\\\\n     * @param duration The duration, in seconds, to register the name for.\\\\n     * @param resolver The resolver address to set on the ENS registry (optional).\\\\n     * @param ownerControlledFuses Initial owner-controlled fuses to set\\\\n     * @return registrarExpiry The expiry date of the new name on the .eth registrar, in seconds since the Unix epoch.\\\\n     */\\\\n\\\\n    function registerAndWrapETH2LD(\\\\n        string calldata label,\\\\n        address wrappedOwner,\\\\n        uint256 duration,\\\\n        address resolver,\\\\n        uint16 ownerControlledFuses\\\\n    ) external onlyController returns (uint256 registrarExpiry) {\\\\n        uint256 tokenId = uint256(keccak256(bytes(label)));\\\\n        registrarExpiry = registrar.register(tokenId, address(this), duration);\\\\n        _wrapETH2LD(\\\\n            label,\\\\n            wrappedOwner,\\\\n            ownerControlledFuses,\\\\n            uint64(registrarExpiry) + GRACE_PERIOD,\\\\n            resolver\\\\n        );\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Renews a .eth second-level domain.\\\\n     * @dev Only callable by authorised controllers.\\\\n     * @param tokenId The hash of the label to register (eg, `keccak256(\'foo\')`, for \'foo.eth\').\\\\n     * @param duration The number of seconds to renew the name for.\\\\n     * @return expires The expiry date of the name on the .eth registrar, in seconds since the Unix epoch.\\\\n     */\\\\n\\\\n    function renew(\\\\n        uint256 tokenId,\\\\n        uint256 duration\\\\n    ) external onlyController returns (uint256 expires) {\\\\n        bytes32 node = _makeNode(ETH_NODE, bytes32(tokenId));\\\\n\\\\n        uint256 registrarExpiry = registrar.renew(tokenId, duration);\\\\n\\\\n        // Do not set anything in wrapper if name is not wrapped\\\\n        try registrar.ownerOf(tokenId) returns (address registrarOwner) {\\\\n            if (\\\\n                registrarOwner != address(this) ||\\\\n                ens.owner(node) != address(this)\\\\n            ) {\\\\n                return registrarExpiry;\\\\n            }\\\\n        } catch {\\\\n            return registrarExpiry;\\\\n        }\\\\n\\\\n        // Set expiry in Wrapper\\\\n        uint64 expiry = uint64(registrarExpiry) + GRACE_PERIOD;\\\\n\\\\n        // Use super to allow names expired on the wrapper, but not expired on the registrar to renew()\\\\n        (address owner, uint32 fuses, ) = super.getData(uint256(node));\\\\n        _setData(node, owner, fuses, expiry);\\\\n\\\\n        return registrarExpiry;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Wraps a non .eth domain, of any kind. Could be a DNSSEC name vitalik.xyz or a subdomain\\\\n     * @dev Can be called by the owner in the registry or an authorised caller in the registry\\\\n     * @param name The name to wrap, in DNS format\\\\n     * @param wrappedOwner Owner of the name in this contract\\\\n     * @param resolver Resolver contract\\\\n     */\\\\n\\\\n    function wrap(\\\\n        bytes calldata name,\\\\n        address wrappedOwner,\\\\n        address resolver\\\\n    ) public {\\\\n        (bytes32 labelhash, uint256 offset) = name.readLabel(0);\\\\n        bytes32 parentNode = name.namehash(offset);\\\\n        bytes32 node = _makeNode(parentNode, labelhash);\\\\n\\\\n        names[node] = name;\\\\n\\\\n        if (parentNode == ETH_NODE) {\\\\n            revert IncompatibleParent();\\\\n        }\\\\n\\\\n        address owner = ens.owner(node);\\\\n\\\\n        if (owner != msg.sender && !ens.isApprovedForAll(owner, msg.sender)) {\\\\n            revert Unauthorised(node, msg.sender);\\\\n        }\\\\n\\\\n        if (resolver != address(0)) {\\\\n            ens.setResolver(node, resolver);\\\\n        }\\\\n\\\\n        ens.setOwner(node, address(this));\\\\n\\\\n        _wrap(node, name, wrappedOwner, 0, 0);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Unwraps a .eth domain. e.g. vitalik.eth\\\\n     * @dev Can be called by the owner in the wrapper or an authorised caller in the wrapper\\\\n     * @param labelhash Labelhash of the .eth domain\\\\n     * @param registrant Sets the owner in the .eth registrar to this address\\\\n     * @param controller Sets the owner in the registry to this address\\\\n     */\\\\n\\\\n    function unwrapETH2LD(\\\\n        bytes32 labelhash,\\\\n        address registrant,\\\\n        address controller\\\\n    ) public onlyTokenOwner(_makeNode(ETH_NODE, labelhash)) {\\\\n        if (registrant == address(this)) {\\\\n            revert IncorrectTargetOwner(registrant);\\\\n        }\\\\n        _unwrap(_makeNode(ETH_NODE, labelhash), controller);\\\\n        registrar.safeTransferFrom(\\\\n            address(this),\\\\n            registrant,\\\\n            uint256(labelhash)\\\\n        );\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Unwraps a non .eth domain, of any kind. Could be a DNSSEC name vitalik.xyz or a subdomain\\\\n     * @dev Can be called by the owner in the wrapper or an authorised caller in the wrapper\\\\n     * @param parentNode Parent namehash of the name e.g. vitalik.xyz would be namehash(\'xyz\')\\\\n     * @param labelhash Labelhash of the name, e.g. vitalik.xyz would be keccak256(\'vitalik\')\\\\n     * @param controller Sets the owner in the registry to this address\\\\n     */\\\\n\\\\n    function unwrap(\\\\n        bytes32 parentNode,\\\\n        bytes32 labelhash,\\\\n        address controller\\\\n    ) public onlyTokenOwner(_makeNode(parentNode, labelhash)) {\\\\n        if (parentNode == ETH_NODE) {\\\\n            revert IncompatibleParent();\\\\n        }\\\\n        if (controller == address(0x0) || controller == address(this)) {\\\\n            revert IncorrectTargetOwner(controller);\\\\n        }\\\\n        _unwrap(_makeNode(parentNode, labelhash), controller);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Sets fuses of a name\\\\n     * @param node Namehash of the name\\\\n     * @param ownerControlledFuses Owner-controlled fuses to burn\\\\n     * @return Old fuses\\\\n     */\\\\n\\\\n    function setFuses(\\\\n        bytes32 node,\\\\n        uint16 ownerControlledFuses\\\\n    )\\\\n        public\\\\n        onlyTokenOwner(node)\\\\n        operationAllowed(node, CANNOT_BURN_FUSES)\\\\n        returns (uint32)\\\\n    {\\\\n        // owner protected by onlyTokenOwner\\\\n        (address owner, uint32 oldFuses, uint64 expiry) = getData(\\\\n            uint256(node)\\\\n        );\\\\n        _setFuses(node, owner, ownerControlledFuses | oldFuses, expiry, expiry);\\\\n        return oldFuses;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Extends expiry for a name\\\\n     * @param parentNode Parent namehash of the name e.g. vitalik.xyz would be namehash(\'xyz\')\\\\n     * @param labelhash Labelhash of the name, e.g. vitalik.xyz would be keccak256(\'vitalik\')\\\\n     * @param expiry When the name will expire in seconds since the Unix epoch\\\\n     * @return New expiry\\\\n     */\\\\n\\\\n    function extendExpiry(\\\\n        bytes32 parentNode,\\\\n        bytes32 labelhash,\\\\n        uint64 expiry\\\\n    ) public returns (uint64) {\\\\n        bytes32 node = _makeNode(parentNode, labelhash);\\\\n\\\\n        if (!_isWrapped(node)) {\\\\n            revert NameIsNotWrapped();\\\\n        }\\\\n\\\\n        // this flag is used later, when checking fuses\\\\n        bool canExtendSubname = canExtendSubnames(parentNode, msg.sender);\\\\n        // only allow the owner of the name or owner of the parent name\\\\n        if (!canExtendSubname && !canModifyName(node, msg.sender)) {\\\\n            revert Unauthorised(node, msg.sender);\\\\n        }\\\\n\\\\n        (address owner, uint32 fuses, uint64 oldExpiry) = getData(\\\\n            uint256(node)\\\\n        );\\\\n\\\\n        // Either CAN_EXTEND_EXPIRY must be set, or the caller must have permission to modify the parent name\\\\n        if (!canExtendSubname && fuses & CAN_EXTEND_EXPIRY == 0) {\\\\n            revert OperationProhibited(node);\\\\n        }\\\\n\\\\n        // Max expiry is set to the expiry of the parent\\\\n        (, , uint64 maxExpiry) = getData(uint256(parentNode));\\\\n        expiry = _normaliseExpiry(expiry, oldExpiry, maxExpiry);\\\\n\\\\n        _setData(node, owner, fuses, expiry);\\\\n        emit ExpiryExtended(node, expiry);\\\\n        return expiry;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Upgrades a domain of any kind. Could be a .eth name vitalik.eth, a DNSSEC name vitalik.xyz, or a subdomain\\\\n     * @dev Can be called by the owner or an authorised caller\\\\n     * @param name The name to upgrade, in DNS format\\\\n     * @param extraData Extra data to pass to the upgrade contract\\\\n     */\\\\n\\\\n    function upgrade(bytes calldata name, bytes calldata extraData) public {\\\\n        bytes32 node = name.namehash(0);\\\\n\\\\n        if (address(upgradeContract) == address(0)) {\\\\n            revert CannotUpgrade();\\\\n        }\\\\n\\\\n        if (!canModifyName(node, msg.sender)) {\\\\n            revert Unauthorised(node, msg.sender);\\\\n        }\\\\n\\\\n        (address currentOwner, uint32 fuses, uint64 expiry) = getData(\\\\n            uint256(node)\\\\n        );\\\\n\\\\n        address approved = getApproved(uint256(node));\\\\n\\\\n        _burn(uint256(node));\\\\n\\\\n        upgradeContract.wrapFromUpgrade(\\\\n            name,\\\\n            currentOwner,\\\\n            fuses,\\\\n            expiry,\\\\n            approved,\\\\n            extraData\\\\n        );\\\\n    }\\\\n\\\\n    /** \\\\n    /* @notice Sets fuses of a name that you own the parent of\\\\n     * @param parentNode Parent namehash of the name e.g. vitalik.xyz would be namehash(\'xyz\')\\\\n     * @param labelhash Labelhash of the name, e.g. vitalik.xyz would be keccak256(\'vitalik\')\\\\n     * @param fuses Fuses to burn\\\\n     * @param expiry When the name will expire in seconds since the Unix epoch\\\\n     */\\\\n\\\\n    function setChildFuses(\\\\n        bytes32 parentNode,\\\\n        bytes32 labelhash,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) public {\\\\n        bytes32 node = _makeNode(parentNode, labelhash);\\\\n        _checkFusesAreSettable(node, fuses);\\\\n        (address owner, uint32 oldFuses, uint64 oldExpiry) = getData(\\\\n            uint256(node)\\\\n        );\\\\n        if (owner == address(0) || ens.owner(node) != address(this)) {\\\\n            revert NameIsNotWrapped();\\\\n        }\\\\n        // max expiry is set to the expiry of the parent\\\\n        (, uint32 parentFuses, uint64 maxExpiry) = getData(uint256(parentNode));\\\\n        if (parentNode == ROOT_NODE) {\\\\n            if (!canModifyName(node, msg.sender)) {\\\\n                revert Unauthorised(node, msg.sender);\\\\n            }\\\\n        } else {\\\\n            if (!canModifyName(parentNode, msg.sender)) {\\\\n                revert Unauthorised(parentNode, msg.sender);\\\\n            }\\\\n        }\\\\n\\\\n        _checkParentFuses(node, fuses, parentFuses);\\\\n\\\\n        expiry = _normaliseExpiry(expiry, oldExpiry, maxExpiry);\\\\n\\\\n        // if PARENT_CANNOT_CONTROL has been burned and fuses have changed\\\\n        if (\\\\n            oldFuses & PARENT_CANNOT_CONTROL != 0 &&\\\\n            oldFuses | fuses != oldFuses\\\\n        ) {\\\\n            revert OperationProhibited(node);\\\\n        }\\\\n        fuses |= oldFuses;\\\\n        _setFuses(node, owner, fuses, oldExpiry, expiry);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Sets the subdomain owner in the registry and then wraps the subdomain\\\\n     * @param parentNode Parent namehash of the subdomain\\\\n     * @param label Label of the subdomain as a string\\\\n     * @param owner New owner in the wrapper\\\\n     * @param fuses Initial fuses for the wrapped subdomain\\\\n     * @param expiry When the name will expire in seconds since the Unix epoch\\\\n     * @return node Namehash of the subdomain\\\\n     */\\\\n\\\\n    function setSubnodeOwner(\\\\n        bytes32 parentNode,\\\\n        string calldata label,\\\\n        address owner,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) public onlyTokenOwner(parentNode) returns (bytes32 node) {\\\\n        bytes32 labelhash = keccak256(bytes(label));\\\\n        node = _makeNode(parentNode, labelhash);\\\\n        _checkCanCallSetSubnodeOwner(parentNode, node);\\\\n        _checkFusesAreSettable(node, fuses);\\\\n        bytes memory name = _saveLabel(parentNode, node, label);\\\\n        expiry = _checkParentFusesAndExpiry(parentNode, node, fuses, expiry);\\\\n\\\\n        if (!_isWrapped(node)) {\\\\n            ens.setSubnodeOwner(parentNode, labelhash, address(this));\\\\n            _wrap(node, name, owner, fuses, expiry);\\\\n        } else {\\\\n            _updateName(parentNode, node, label, owner, fuses, expiry);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Sets the subdomain owner in the registry with records and then wraps the subdomain\\\\n     * @param parentNode parent namehash of the subdomain\\\\n     * @param label label of the subdomain as a string\\\\n     * @param owner new owner in the wrapper\\\\n     * @param resolver resolver contract in the registry\\\\n     * @param ttl ttl in the registry\\\\n     * @param fuses initial fuses for the wrapped subdomain\\\\n     * @param expiry When the name will expire in seconds since the Unix epoch\\\\n     * @return node Namehash of the subdomain\\\\n     */\\\\n\\\\n    function setSubnodeRecord(\\\\n        bytes32 parentNode,\\\\n        string memory label,\\\\n        address owner,\\\\n        address resolver,\\\\n        uint64 ttl,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) public onlyTokenOwner(parentNode) returns (bytes32 node) {\\\\n        bytes32 labelhash = keccak256(bytes(label));\\\\n        node = _makeNode(parentNode, labelhash);\\\\n        _checkCanCallSetSubnodeOwner(parentNode, node);\\\\n        _checkFusesAreSettable(node, fuses);\\\\n        _saveLabel(parentNode, node, label);\\\\n        expiry = _checkParentFusesAndExpiry(parentNode, node, fuses, expiry);\\\\n        if (!_isWrapped(node)) {\\\\n            ens.setSubnodeRecord(\\\\n                parentNode,\\\\n                labelhash,\\\\n                address(this),\\\\n                resolver,\\\\n                ttl\\\\n            );\\\\n            _storeNameAndWrap(parentNode, node, label, owner, fuses, expiry);\\\\n        } else {\\\\n            ens.setSubnodeRecord(\\\\n                parentNode,\\\\n                labelhash,\\\\n                address(this),\\\\n                resolver,\\\\n                ttl\\\\n            );\\\\n            _updateName(parentNode, node, label, owner, fuses, expiry);\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Sets records for the name in the ENS Registry\\\\n     * @param node Namehash of the name to set a record for\\\\n     * @param owner New owner in the registry\\\\n     * @param resolver Resolver contract\\\\n     * @param ttl Time to live in the registry\\\\n     */\\\\n\\\\n    function setRecord(\\\\n        bytes32 node,\\\\n        address owner,\\\\n        address resolver,\\\\n        uint64 ttl\\\\n    )\\\\n        public\\\\n        onlyTokenOwner(node)\\\\n        operationAllowed(\\\\n            node,\\\\n            CANNOT_TRANSFER | CANNOT_SET_RESOLVER | CANNOT_SET_TTL\\\\n        )\\\\n    {\\\\n        ens.setRecord(node, address(this), resolver, ttl);\\\\n        if (owner == address(0)) {\\\\n            (, uint32 fuses, ) = getData(uint256(node));\\\\n            if (fuses & IS_DOT_ETH == IS_DOT_ETH) {\\\\n                revert IncorrectTargetOwner(owner);\\\\n            }\\\\n            _unwrap(node, address(0));\\\\n        } else {\\\\n            address oldOwner = ownerOf(uint256(node));\\\\n            _transfer(oldOwner, owner, uint256(node), 1, \\\\\\"\\\\\\");\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Sets resolver contract in the registry\\\\n     * @param node namehash of the name\\\\n     * @param resolver the resolver contract\\\\n     */\\\\n\\\\n    function setResolver(\\\\n        bytes32 node,\\\\n        address resolver\\\\n    ) public onlyTokenOwner(node) operationAllowed(node, CANNOT_SET_RESOLVER) {\\\\n        ens.setResolver(node, resolver);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Sets TTL in the registry\\\\n     * @param node Namehash of the name\\\\n     * @param ttl TTL in the registry\\\\n     */\\\\n\\\\n    function setTTL(\\\\n        bytes32 node,\\\\n        uint64 ttl\\\\n    ) public onlyTokenOwner(node) operationAllowed(node, CANNOT_SET_TTL) {\\\\n        ens.setTTL(node, ttl);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Allows an operation only if none of the specified fuses are burned.\\\\n     * @param node The namehash of the name to check fuses on.\\\\n     * @param fuseMask A bitmask of fuses that must not be burned.\\\\n     */\\\\n\\\\n    modifier operationAllowed(bytes32 node, uint32 fuseMask) {\\\\n        (, uint32 fuses, ) = getData(uint256(node));\\\\n        if (fuses & fuseMask != 0) {\\\\n            revert OperationProhibited(node);\\\\n        }\\\\n        _;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Check whether a name can call setSubnodeOwner/setSubnodeRecord\\\\n     * @dev Checks both CANNOT_CREATE_SUBDOMAIN and PARENT_CANNOT_CONTROL and whether not they have been burnt\\\\n     *      and checks whether the owner of the subdomain is 0x0 for creating or already exists for\\\\n     *      replacing a subdomain. If either conditions are true, then it is possible to call\\\\n     *      setSubnodeOwner\\\\n     * @param parentNode Namehash of the parent name to check\\\\n     * @param subnode Namehash of the subname to check\\\\n     */\\\\n\\\\n    function _checkCanCallSetSubnodeOwner(\\\\n        bytes32 parentNode,\\\\n        bytes32 subnode\\\\n    ) internal view {\\\\n        (\\\\n            address subnodeOwner,\\\\n            uint32 subnodeFuses,\\\\n            uint64 subnodeExpiry\\\\n        ) = getData(uint256(subnode));\\\\n\\\\n        // check if the registry owner is 0 and expired\\\\n        // check if the wrapper owner is 0 and expired\\\\n        // If either, then check parent fuses for CANNOT_CREATE_SUBDOMAIN\\\\n        bool expired = subnodeExpiry < block.timestamp;\\\\n        if (\\\\n            expired &&\\\\n            // protects a name that has been unwrapped with PCC and doesn\'t allow the parent to take control by recreating it if unexpired\\\\n            (subnodeOwner == address(0) ||\\\\n                // protects a name that has been burnt and doesn\'t allow the parent to take control by recreating it if unexpired\\\\n                ens.owner(subnode) == address(0))\\\\n        ) {\\\\n            (, uint32 parentFuses, ) = getData(uint256(parentNode));\\\\n            if (parentFuses & CANNOT_CREATE_SUBDOMAIN != 0) {\\\\n                revert OperationProhibited(subnode);\\\\n            }\\\\n        } else {\\\\n            if (subnodeFuses & PARENT_CANNOT_CONTROL != 0) {\\\\n                revert OperationProhibited(subnode);\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Checks all Fuses in the mask are burned for the node\\\\n     * @param node Namehash of the name\\\\n     * @param fuseMask The fuses you want to check\\\\n     * @return Boolean of whether or not all the selected fuses are burned\\\\n     */\\\\n\\\\n    function allFusesBurned(\\\\n        bytes32 node,\\\\n        uint32 fuseMask\\\\n    ) public view returns (bool) {\\\\n        (, uint32 fuses, ) = getData(uint256(node));\\\\n        return fuses & fuseMask == fuseMask;\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Checks if a name is wrapped\\\\n     * @param node Namehash of the name\\\\n     * @return Boolean of whether or not the name is wrapped\\\\n     */\\\\n\\\\n    function isWrapped(bytes32 node) public view returns (bool) {\\\\n        bytes memory name = names[node];\\\\n        if (name.length == 0) {\\\\n            return false;\\\\n        }\\\\n        (bytes32 labelhash, uint256 offset) = name.readLabel(0);\\\\n        bytes32 parentNode = name.namehash(offset);\\\\n        return isWrapped(parentNode, labelhash);\\\\n    }\\\\n\\\\n    /**\\\\n     * @notice Checks if a name is wrapped in a more gas efficient way\\\\n     * @param parentNode Namehash of the name\\\\n     * @param labelhash Namehash of the name\\\\n     * @return Boolean of whether or not the name is wrapped\\\\n     */\\\\n\\\\n    function isWrapped(\\\\n        bytes32 parentNode,\\\\n        bytes32 labelhash\\\\n    ) public view returns (bool) {\\\\n        bytes32 node = _makeNode(parentNode, labelhash);\\\\n        bool wrapped = _isWrapped(node);\\\\n        if (parentNode != ETH_NODE) {\\\\n            return wrapped;\\\\n        }\\\\n        try registrar.ownerOf(uint256(labelhash)) returns (address owner) {\\\\n            return owner == address(this);\\\\n        } catch {\\\\n            return false;\\\\n        }\\\\n    }\\\\n\\\\n    function onERC721Received(\\\\n        address to,\\\\n        address,\\\\n        uint256 tokenId,\\\\n        bytes calldata data\\\\n    ) public returns (bytes4) {\\\\n        //check if it\'s the eth registrar ERC721\\\\n        if (msg.sender != address(registrar)) {\\\\n            revert IncorrectTokenType();\\\\n        }\\\\n\\\\n        (\\\\n            string memory label,\\\\n            address owner,\\\\n            uint16 ownerControlledFuses,\\\\n            address resolver\\\\n        ) = abi.decode(data, (string, address, uint16, address));\\\\n\\\\n        bytes32 labelhash = bytes32(tokenId);\\\\n        bytes32 labelhashFromData = keccak256(bytes(label));\\\\n\\\\n        if (labelhashFromData != labelhash) {\\\\n            revert LabelMismatch(labelhashFromData, labelhash);\\\\n        }\\\\n\\\\n        // transfer the ens record back to the new owner (this contract)\\\\n        registrar.reclaim(uint256(labelhash), address(this));\\\\n\\\\n        uint64 expiry = uint64(registrar.nameExpires(tokenId)) + GRACE_PERIOD;\\\\n\\\\n        _wrapETH2LD(label, owner, ownerControlledFuses, expiry, resolver);\\\\n\\\\n        return IERC721Receiver(to).onERC721Received.selector;\\\\n    }\\\\n\\\\n    /***** Internal functions */\\\\n\\\\n    function _beforeTransfer(\\\\n        uint256 id,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) internal override {\\\\n        // For this check, treat .eth 2LDs as expiring at the start of the grace period.\\\\n        if (fuses & IS_DOT_ETH == IS_DOT_ETH) {\\\\n            expiry -= GRACE_PERIOD;\\\\n        }\\\\n\\\\n        if (expiry < block.timestamp) {\\\\n            // Transferable if the name was not emancipated\\\\n            if (fuses & PARENT_CANNOT_CONTROL != 0) {\\\\n                revert(\\\\\\"ERC1155: insufficient balance for transfer\\\\\\");\\\\n            }\\\\n        } else {\\\\n            // Transferable if CANNOT_TRANSFER is unburned\\\\n            if (fuses & CANNOT_TRANSFER != 0) {\\\\n                revert OperationProhibited(bytes32(id));\\\\n            }\\\\n        }\\\\n\\\\n        // delete token approval if CANNOT_APPROVE has not been burnt\\\\n        if (fuses & CANNOT_APPROVE == 0) {\\\\n            delete _tokenApprovals[id];\\\\n        }\\\\n    }\\\\n\\\\n    function _clearOwnerAndFuses(\\\\n        address owner,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) internal view override returns (address, uint32) {\\\\n        if (expiry < block.timestamp) {\\\\n            if (fuses & PARENT_CANNOT_CONTROL == PARENT_CANNOT_CONTROL) {\\\\n                owner = address(0);\\\\n            }\\\\n            fuses = 0;\\\\n        }\\\\n\\\\n        return (owner, fuses);\\\\n    }\\\\n\\\\n    function _makeNode(\\\\n        bytes32 node,\\\\n        bytes32 labelhash\\\\n    ) private pure returns (bytes32) {\\\\n        return keccak256(abi.encodePacked(node, labelhash));\\\\n    }\\\\n\\\\n    function _addLabel(\\\\n        string memory label,\\\\n        bytes memory name\\\\n    ) internal pure returns (bytes memory ret) {\\\\n        if (bytes(label).length < 1) {\\\\n            revert LabelTooShort();\\\\n        }\\\\n        if (bytes(label).length > 255) {\\\\n            revert LabelTooLong(label);\\\\n        }\\\\n        return abi.encodePacked(uint8(bytes(label).length), label, name);\\\\n    }\\\\n\\\\n    function _mint(\\\\n        bytes32 node,\\\\n        address owner,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) internal override {\\\\n        _canFusesBeBurned(node, fuses);\\\\n        (address oldOwner, , ) = super.getData(uint256(node));\\\\n        if (oldOwner != address(0)) {\\\\n            // burn and unwrap old token of old owner\\\\n            _burn(uint256(node));\\\\n            emit NameUnwrapped(node, address(0));\\\\n        }\\\\n        super._mint(node, owner, fuses, expiry);\\\\n    }\\\\n\\\\n    function _wrap(\\\\n        bytes32 node,\\\\n        bytes memory name,\\\\n        address wrappedOwner,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) internal {\\\\n        _mint(node, wrappedOwner, fuses, expiry);\\\\n        emit NameWrapped(node, name, wrappedOwner, fuses, expiry);\\\\n    }\\\\n\\\\n    function _storeNameAndWrap(\\\\n        bytes32 parentNode,\\\\n        bytes32 node,\\\\n        string memory label,\\\\n        address owner,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) internal {\\\\n        bytes memory name = _addLabel(label, names[parentNode]);\\\\n        _wrap(node, name, owner, fuses, expiry);\\\\n    }\\\\n\\\\n    function _saveLabel(\\\\n        bytes32 parentNode,\\\\n        bytes32 node,\\\\n        string memory label\\\\n    ) internal returns (bytes memory) {\\\\n        bytes memory name = _addLabel(label, names[parentNode]);\\\\n        names[node] = name;\\\\n        return name;\\\\n    }\\\\n\\\\n    function _updateName(\\\\n        bytes32 parentNode,\\\\n        bytes32 node,\\\\n        string memory label,\\\\n        address owner,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) internal {\\\\n        (address oldOwner, uint32 oldFuses, uint64 oldExpiry) = getData(\\\\n            uint256(node)\\\\n        );\\\\n        bytes memory name = _addLabel(label, names[parentNode]);\\\\n        if (names[node].length == 0) {\\\\n            names[node] = name;\\\\n        }\\\\n        _setFuses(node, oldOwner, oldFuses | fuses, oldExpiry, expiry);\\\\n        if (owner == address(0)) {\\\\n            _unwrap(node, address(0));\\\\n        } else {\\\\n            _transfer(oldOwner, owner, uint256(node), 1, \\\\\\"\\\\\\");\\\\n        }\\\\n    }\\\\n\\\\n    // wrapper function for stack limit\\\\n    function _checkParentFusesAndExpiry(\\\\n        bytes32 parentNode,\\\\n        bytes32 node,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) internal view returns (uint64) {\\\\n        (, , uint64 oldExpiry) = getData(uint256(node));\\\\n        (, uint32 parentFuses, uint64 maxExpiry) = getData(uint256(parentNode));\\\\n        _checkParentFuses(node, fuses, parentFuses);\\\\n        return _normaliseExpiry(expiry, oldExpiry, maxExpiry);\\\\n    }\\\\n\\\\n    function _checkParentFuses(\\\\n        bytes32 node,\\\\n        uint32 fuses,\\\\n        uint32 parentFuses\\\\n    ) internal pure {\\\\n        bool isBurningParentControlledFuses = fuses & PARENT_CONTROLLED_FUSES !=\\\\n            0;\\\\n\\\\n        bool parentHasNotBurnedCU = parentFuses & CANNOT_UNWRAP == 0;\\\\n\\\\n        if (isBurningParentControlledFuses && parentHasNotBurnedCU) {\\\\n            revert OperationProhibited(node);\\\\n        }\\\\n    }\\\\n\\\\n    function _normaliseExpiry(\\\\n        uint64 expiry,\\\\n        uint64 oldExpiry,\\\\n        uint64 maxExpiry\\\\n    ) private pure returns (uint64) {\\\\n        // Expiry cannot be more than maximum allowed\\\\n        // .eth names will check registrar, non .eth check parent\\\\n        if (expiry > maxExpiry) {\\\\n            expiry = maxExpiry;\\\\n        }\\\\n        // Expiry cannot be less than old expiry\\\\n        if (expiry < oldExpiry) {\\\\n            expiry = oldExpiry;\\\\n        }\\\\n\\\\n        return expiry;\\\\n    }\\\\n\\\\n    function _wrapETH2LD(\\\\n        string memory label,\\\\n        address wrappedOwner,\\\\n        uint32 fuses,\\\\n        uint64 expiry,\\\\n        address resolver\\\\n    ) private {\\\\n        bytes32 labelhash = keccak256(bytes(label));\\\\n        bytes32 node = _makeNode(ETH_NODE, labelhash);\\\\n        // hardcode dns-encoded eth string for gas savings\\\\n        bytes memory name = _addLabel(label, \\\\\\"\\\\\\\\x03eth\\\\\\\\x00\\\\\\");\\\\n        names[node] = name;\\\\n\\\\n        _wrap(\\\\n            node,\\\\n            name,\\\\n            wrappedOwner,\\\\n            fuses | PARENT_CANNOT_CONTROL | IS_DOT_ETH,\\\\n            expiry\\\\n        );\\\\n\\\\n        if (resolver != address(0)) {\\\\n            ens.setResolver(node, resolver);\\\\n        }\\\\n    }\\\\n\\\\n    function _unwrap(bytes32 node, address owner) private {\\\\n        if (allFusesBurned(node, CANNOT_UNWRAP)) {\\\\n            revert OperationProhibited(node);\\\\n        }\\\\n\\\\n        // Burn token and fuse data\\\\n        _burn(uint256(node));\\\\n        ens.setOwner(node, owner);\\\\n\\\\n        emit NameUnwrapped(node, owner);\\\\n    }\\\\n\\\\n    function _setFuses(\\\\n        bytes32 node,\\\\n        address owner,\\\\n        uint32 fuses,\\\\n        uint64 oldExpiry,\\\\n        uint64 expiry\\\\n    ) internal {\\\\n        _setData(node, owner, fuses, expiry);\\\\n        emit FusesSet(node, fuses);\\\\n        if (expiry > oldExpiry) {\\\\n            emit ExpiryExtended(node, expiry);\\\\n        }\\\\n    }\\\\n\\\\n    function _setData(\\\\n        bytes32 node,\\\\n        address owner,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) internal {\\\\n        _canFusesBeBurned(node, fuses);\\\\n        super._setData(uint256(node), owner, fuses, expiry);\\\\n    }\\\\n\\\\n    function _canFusesBeBurned(bytes32 node, uint32 fuses) internal pure {\\\\n        // If a non-parent controlled fuse is being burned, check PCC and CU are burnt\\\\n        if (\\\\n            fuses & ~PARENT_CONTROLLED_FUSES != 0 &&\\\\n            fuses & (PARENT_CANNOT_CONTROL | CANNOT_UNWRAP) !=\\\\n            (PARENT_CANNOT_CONTROL | CANNOT_UNWRAP)\\\\n        ) {\\\\n            revert OperationProhibited(node);\\\\n        }\\\\n    }\\\\n\\\\n    function _checkFusesAreSettable(bytes32 node, uint32 fuses) internal pure {\\\\n        if (fuses | USER_SETTABLE_FUSES != USER_SETTABLE_FUSES) {\\\\n            // Cannot directly burn other non-user settable fuses\\\\n            revert OperationProhibited(node);\\\\n        }\\\\n    }\\\\n\\\\n    function _isWrapped(bytes32 node) internal view returns (bool) {\\\\n        return\\\\n            ownerOf(uint256(node)) != address(0) &&\\\\n            ens.owner(node) == address(this);\\\\n    }\\\\n\\\\n    function _isETH2LDInGracePeriod(\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) internal view returns (bool) {\\\\n        return\\\\n            fuses & IS_DOT_ETH == IS_DOT_ETH &&\\\\n            expiry - GRACE_PERIOD < block.timestamp;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x91ee0a58d8ecf132c4e7fba9a25bbf45bbfc3634f2024b30a6a2eea4a151ed0c\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x60c06040523480156200001157600080fd5b5060405162006502380380620065028339810160408190526200003491620002f8565b823362000041816200028f565b6040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e260048201526000906001600160a01b038416906302571be390602401602060405180830381865afa158015620000a9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000cf91906200034c565b604051630f41a04d60e11b81526001600160a01b03848116600483015291925090821690631e83409a906024016020604051808303816000875af11580156200011c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000142919062000373565b505050506001600160a01b0383811660805282811660a052600580546001600160a01b031916918316919091179055600163fffeffff60a01b03197fafa26c20e8b3d9a2853d642cfe1021dae26242ffedfac91c97aab212c1a4b93b8190557fa6eef7e35abe7026729641147f7915573c7e97b47efa546f5f6e3230263bcb4955604080518082019091526001815260006020808301829052908052600690527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f89062000210908262000432565b506040805180820190915260058152626cae8d60e31b6020808301919091527f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae600052600690527ffb9e8e321b8a5ec48f12a7b41f22c6e595d761285c9eb19d8dda7c99edf1b54f9062000285908262000432565b50505050620004fe565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620002f557600080fd5b50565b6000806000606084860312156200030e57600080fd5b83516200031b81620002df565b60208501519093506200032e81620002df565b60408501519092506200034181620002df565b809150509250925092565b6000602082840312156200035f57600080fd5b81516200036c81620002df565b9392505050565b6000602082840312156200038657600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620003b857607f821691505b602082108103620003d957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200042d57600081815260208120601f850160051c81016020861015620004085750805b601f850160051c820191505b81811015620004295782815560010162000414565b5050505b505050565b81516001600160401b038111156200044e576200044e6200038d565b62000466816200045f8454620003a3565b84620003df565b602080601f8311600181146200049e5760008415620004855750858301515b600019600386901b1c1916600185901b17855562000429565b600085815260208120601f198616915b82811015620004cf57888601518255948401946001909101908401620004ae565b5085821015620004ee5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a051615ef76200060b6000396000818161050601528181610c1501528181610cef01528181610d7901528181611c6601528181611cfc01528181611daa01528181611ecc01528181611f4201528181611fc20152818161224401528181612380015281816124b2015281816126970152818161271d0152612f5201526000818161055301528181610b9b01528181610ed70152818161108b0152818161113d015281816115550152818161240501528181612537015281816127c8015281816129bf01528181612ccd0152818161317d0152818161322b015281816132f40152818161336d015281816139ca01528181613ae501528181613d4d015261438d0152615ef76000f3fe608060405234801561001057600080fd5b506004361061031f5760003560e01c80636352211e116101a7578063c93ab3fd116100ee578063e985e9c511610097578063f242432a11610071578063f242432a146107d7578063f2fde38b146107ea578063fd0cd0d9146107fd57600080fd5b8063e985e9c514610768578063eb8ae530146107a4578063ed70554d146107b757600080fd5b8063d9a50c12116100c8578063d9a50c121461071f578063da8c229e14610732578063e0dba60f1461075557600080fd5b8063c93ab3fd146106e6578063cf408823146106f9578063d8c9921a1461070c57600080fd5b8063a22cb46511610150578063b6bcad261161012a578063b6bcad26146106ad578063c475abff146106c0578063c658e086146106d357600080fd5b8063a22cb46514610674578063a401498214610687578063adf4960a1461069a57600080fd5b80638b4dfa75116101815780638b4dfa751461063d5780638cf8b41e146106505780638da5cb5b1461066357600080fd5b80636352211e146105f65780636e5d6ad214610609578063715018a61461063557600080fd5b80631f4e15041161026b5780633f15457f116102145780634e1273f4116101ee5780634e1273f4146105b057806353095467146105d05780635d3590d5146105e357600080fd5b80633f15457f1461054e578063402906fc1461057557806341415eab1461059d57600080fd5b80632b20e397116102455780632b20e397146105015780632eb2c2d61461052857806333c69ea91461053b57600080fd5b80631f4e1504146104c857806320c38e2b146104db57806324c1af44146104ee57600080fd5b80630e4cd725116102cd578063150b7a02116102a7578063150b7a02146104765780631534e177146104a25780631896f70a146104b557600080fd5b80630e4cd7251461043d5780630e89341c1461045057806314ab90381461046357600080fd5b806306fdde03116102fe57806306fdde03146103b4578063081812fc146103fd578063095ea7b31461042857600080fd5b8062fdd58e146103245780630178fe3f1461034a57806301ffc9a714610391575b600080fd5b610337610332366004614d26565b610810565b6040519081526020015b60405180910390f35b61035d610358366004614d52565b6108cf565b604080516001600160a01b03909416845263ffffffff909216602084015267ffffffffffffffff1690820152606001610341565b6103a461039f366004614d81565b6108ff565b6040519015158152602001610341565b6103f06040518060400160405280600b81526020017f4e616d655772617070657200000000000000000000000000000000000000000081525081565b6040516103419190614dee565b61041061040b366004614d52565b610958565b6040516001600160a01b039091168152602001610341565b61043b610436366004614d26565b61099d565b005b6103a461044b366004614e01565b6109e3565b6103f061045e366004614d52565b610a7d565b61043b610471366004614e4e565b610aef565b610489610484366004614ec3565b610c08565b6040516001600160e01b03199091168152602001610341565b61043b6104b0366004614f36565b610e1a565b61043b6104c3366004614e01565b610e44565b600754610410906001600160a01b031681565b6103f06104e9366004614d52565b610f06565b6103376104fc36600461502e565b610fa0565b6104107f000000000000000000000000000000000000000000000000000000000000000081565b61043b610536366004615156565b6111b4565b61043b610549366004615204565b6114de565b6104107f000000000000000000000000000000000000000000000000000000000000000081565b61058861058336600461525c565b6116d3565b60405163ffffffff9091168152602001610341565b6103a46105ab366004614e01565b611775565b6105c36105be36600461527f565b6117d2565b604051610341919061537d565b600554610410906001600160a01b031681565b61043b6105f1366004615390565b611910565b610410610604366004614d52565b6119aa565b61061c6106173660046153d1565b6119b5565b60405167ffffffffffffffff9091168152602001610341565b61043b611b0a565b61043b61064b366004615406565b611b1e565b61061c61065e366004615448565b611cc8565b6000546001600160a01b0316610410565b61043b6106823660046154d1565b612094565b6103376106953660046154ff565b61217e565b6103a46106a8366004615580565b612319565b61043b6106bb366004614f36565b61233e565b6103376106ce3660046155a3565b612596565b6103376106e13660046155c5565b61288d565b61043b6106f4366004615638565b612a9a565b61043b6107073660046156a4565b612c0b565b61043b61071a3660046156dc565b612dc4565b6103a461072d3660046155a3565b612ed4565b6103a4610740366004614f36565b60046020526000908152604090205460ff1681565b61043b6107633660046154d1565b612fe1565b6103a461077636600461570a565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b61043b6107b2366004615738565b613049565b6103376107c5366004614d52565b60016020526000908152604090205481565b61043b6107e53660046157a0565b613414565b61043b6107f8366004614f36565b613531565b6103a461080b366004614d52565b6135be565b60006001600160a01b0383166108935760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600061089e836119aa565b9050836001600160a01b0316816001600160a01b0316036108c35760019150506108c9565b60009150505b92915050565b60008181526001602052604090205460a081901c60c082901c6108f3838383613696565b90959094509092509050565b60006001600160e01b031982167fd82c42d800000000000000000000000000000000000000000000000000000000148061094957506001600160e01b03198216630a85bd0160e11b145b806108c957506108c9826136cd565b600080610964836119aa565b90506001600160a01b03811661097d5750600092915050565b6000838152600360205260409020546001600160a01b03165b9392505050565b60006109a8826108cf565b50915050603f1960408216016109d45760405163a2a7201360e01b81526004810183905260240161088a565b6109de838361374f565b505050565b60008080806109f1866108cf565b925092509250846001600160a01b0316836001600160a01b03161480610a3c57506001600160a01b0380841660009081526002602090815260408083209389168352929052205460ff165b80610a6057506001600160a01b038516610a5587610958565b6001600160a01b0316145b8015610a735750610a718282613899565b155b9695505050505050565b6005546040516303a24d0760e21b8152600481018390526060916001600160a01b031690630e89341c90602401600060405180830381865afa158015610ac7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108c99190810190615809565b81610afa8133611775565b610b205760405163168ab55d60e31b81526004810182905233602482015260440161088a565b8260106000610b2e836108cf565b5091505063ffffffff8282161615610b5c5760405163a2a7201360e01b81526004810184905260240161088a565b6040517f14ab90380000000000000000000000000000000000000000000000000000000081526004810187905267ffffffffffffffff861660248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906314ab9038906044015b600060405180830381600087803b158015610be857600080fd5b505af1158015610bfc573d6000803e3d6000fd5b50505050505050505050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c6c576040517f1931a53800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808080610c7d86880188615881565b83516020850120939750919550935091508890808214610cd3576040517fc65c3ccc000000000000000000000000000000000000000000000000000000008152600481018290526024810183905260440161088a565b604051630a3b53db60e21b8152600481018390523060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906328ed4f6c90604401600060405180830381600087803b158015610d3b57600080fd5b505af1158015610d4f573d6000803e3d6000fd5b5050604051636b727d4360e11b8152600481018d9052600092506276a70091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d6e4fa8690602401602060405180830381865afa158015610dc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de491906158e9565b610dee9190615918565b9050610e0187878761ffff1684886138ca565b50630a85bd0160e11b9c9b505050505050505050505050565b610e22613a30565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b81610e4f8133611775565b610e755760405163168ab55d60e31b81526004810182905233602482015260440161088a565b8260086000610e83836108cf565b5091505063ffffffff8282161615610eb15760405163a2a7201360e01b81526004810184905260240161088a565b604051630c4b7b8560e11b8152600481018790526001600160a01b0386811660248301527f00000000000000000000000000000000000000000000000000000000000000001690631896f70a90604401610bce565b60066020526000908152604090208054610f1f90615940565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4b90615940565b8015610f985780601f10610f6d57610100808354040283529160200191610f98565b820191906000526020600020905b815481529060010190602001808311610f7b57829003601f168201915b505050505081565b600087610fad8133611775565b610fd35760405163168ab55d60e31b81526004810182905233602482015260440161088a565b8751602089012061100b8a82604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b92506110178a84613a8a565b6110218386613bc9565b61102c8a848b613bfc565b506110398a848787613cc9565b935061104483613d0f565b6110fa576040516305ef2c7f60e41b8152600481018b9052602481018290523060448201526001600160a01b03888116606483015267ffffffffffffffff881660848301527f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f09060a401600060405180830381600087803b1580156110cf57600080fd5b505af11580156110e3573d6000803e3d6000fd5b505050506110f58a848b8b8989613dc8565b6111a7565b6040516305ef2c7f60e41b8152600481018b9052602481018290523060448201526001600160a01b03888116606483015267ffffffffffffffff881660848301527f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f09060a401600060405180830381600087803b15801561118157600080fd5b505af1158015611195573d6000803e3d6000fd5b505050506111a78a848b8b8989613dff565b5050979650505050505050565b815183511461122b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d61746368000000000000000000000000000000000000000000000000606482015260840161088a565b6001600160a01b03841661128f5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161088a565b6001600160a01b0385163314806112c957506001600160a01b038516600090815260026020908152604080832033845290915290205460ff165b61133b5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000606482015260840161088a565b60005b835181101561147157600084828151811061135b5761135b61597a565b6020026020010151905060008483815181106113795761137961597a565b602002602001015190506000806000611391856108cf565b9250925092506113a2858383613ec3565b8360011480156113c357508a6001600160a01b0316836001600160a01b0316145b6114225760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161088a565b60008581526001602052604090206001600160a01b038b1663ffffffff60a01b60a085901b16176001600160c01b031960c084901b1617905550505050508061146a90615990565b905061133e565b50836001600160a01b0316856001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516114c19291906159a9565b60405180910390a46114d7338686868686613fb0565b5050505050565b604080516020808201879052818301869052825180830384018152606090920190925280519101206115108184613bc9565b6000808061151d846108cf565b919450925090506001600160a01b03831615806115cc57506040516302571be360e01b81526004810185905230906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa15801561159c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c091906159d7565b6001600160a01b031614155b156115ea57604051635374b59960e01b815260040160405180910390fd5b6000806115f68a6108cf565b90935091508a90506116375761160c8633611775565b6116325760405163168ab55d60e31b81526004810187905233602482015260440161088a565b611667565b6116418a33611775565b6116675760405163168ab55d60e31b8152600481018b905233602482015260440161088a565b611672868984614155565b61167d878483614190565b9650620100008416158015906116a157508363ffffffff1688851763ffffffff1614155b156116c25760405163a2a7201360e01b81526004810187905260240161088a565b96831796610bfc86868a868b6141da565b6000826116e08133611775565b6117065760405163168ab55d60e31b81526004810182905233602482015260440161088a565b8360026000611714836108cf565b5091505063ffffffff82821616156117425760405163a2a7201360e01b81526004810184905260240161088a565b6000808061174f8a6108cf565b9250925092506117688a84848c61ffff161784856141da565b5098975050505050505050565b6000808080611783866108cf565b925092509250846001600160a01b0316836001600160a01b03161480610a6057506001600160a01b0380841660009081526002602090815260408083209389168352929052205460ff16610a60565b6060815183511461184b5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d617463680000000000000000000000000000000000000000000000606482015260840161088a565b6000835167ffffffffffffffff81111561186757611867614f53565b604051908082528060200260200182016040528015611890578160200160208202803683370190505b50905060005b8451811015611908576118db8582815181106118b4576118b461597a565b60200260200101518583815181106118ce576118ce61597a565b6020026020010151610810565b8282815181106118ed576118ed61597a565b602090810291909101015261190181615990565b9050611896565b509392505050565b611918613a30565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af1158015611980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a491906159f4565b50505050565b60006108c982614284565b604080516020808201869052818301859052825180830384018152606090920190925280519101206000906119e981613d0f565b611a0657604051635374b59960e01b815260040160405180910390fd5b6000611a1286336109e3565b905080158015611a295750611a278233611775565b155b15611a505760405163168ab55d60e31b81526004810183905233602482015260440161088a565b60008080611a5d856108cf565b92509250925083158015611a745750620400008216155b15611a955760405163a2a7201360e01b81526004810186905260240161088a565b6000611aa08a6108cf565b92505050611aaf888383614190565b9750611abd8685858b61429a565b60405167ffffffffffffffff8916815286907ff675815a0817338f93a7da433f6bd5f5542f1029b11b455191ac96c7f6a9b1329060200160405180910390a2509598975050505050505050565b611b12613a30565b611b1c60006142e2565b565b604080517f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae60208083019190915281830186905282518083038401815260609092019092528051910120611b728133611775565b611b985760405163168ab55d60e31b81526004810182905233602482015260440161088a565b306001600160a01b03841603611bcc57604051632ca49b0d60e11b81526001600160a01b038416600482015260240161088a565b604080517f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae60208083019190915281830187905282518083038401815260609092019092528051910120611c21905b83614332565b6040517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038481166024830152604482018690527f000000000000000000000000000000000000000000000000000000000000000016906342842e0e90606401600060405180830381600087803b158015611caa57600080fd5b505af1158015611cbe573d6000803e3d6000fd5b5050505050505050565b6000808686604051611cdb929190615a11565b6040519081900381206331a9108f60e11b82526004820181905291506000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015611d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6f91906159d7565b90506001600160a01b0381163314801590611e17575060405163e985e9c560e01b81526001600160a01b0382811660048301523360248301527f0000000000000000000000000000000000000000000000000000000000000000169063e985e9c590604401602060405180830381865afa158015611df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1591906159f4565b155b15611e8757604080517f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae6020808301919091528183018590528251808303840181526060830193849052805191012063168ab55d60e31b909252606481019190915233608482015260a40161088a565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152306024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90606401600060405180830381600087803b158015611f1057600080fd5b505af1158015611f24573d6000803e3d6000fd5b5050604051630a3b53db60e21b8152600481018590523060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506328ed4f6c9150604401600060405180830381600087803b158015611f9057600080fd5b505af1158015611fa4573d6000803e3d6000fd5b5050604051636b727d4360e11b8152600481018590526276a70092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316915063d6e4fa8690602401602060405180830381865afa158015612012573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203691906158e9565b6120409190615918565b925061208988888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250505061ffff881686886138ca565b505095945050505050565b6001600160a01b03821633036121125760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c660000000000000000000000000000000000000000000000606482015260840161088a565b3360008181526002602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b3360009081526004602052604081205460ff166121ee5760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f604482015267373a3937b63632b960c11b606482015260840161088a565b60008787604051612200929190615a11565b6040519081900381207ffca247ac000000000000000000000000000000000000000000000000000000008252600482018190523060248301526044820187905291507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fca247ac906064016020604051808303816000875af1158015612295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b991906158e9565b915061230e88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250505061ffff86166123086276a70087615918565b886138ca565b509695505050505050565b600080612325846108cf565b50841663ffffffff908116908516149250505092915050565b612346613a30565b6007546001600160a01b0316156124665760075460405163a22cb46560e01b81526001600160a01b039182166004820152600060248201527f00000000000000000000000000000000000000000000000000000000000000009091169063a22cb46590604401600060405180830381600087803b1580156123c657600080fd5b505af11580156123da573d6000803e3d6000fd5b505060075460405163a22cb46560e01b81526001600160a01b039182166004820152600060248201527f0000000000000000000000000000000000000000000000000000000000000000909116925063a22cb4659150604401600060405180830381600087803b15801561244d57600080fd5b505af1158015612461573d6000803e3d6000fd5b505050505b600780546001600160a01b0319166001600160a01b038316908117909155156125935760075460405163a22cb46560e01b81526001600160a01b039182166004820152600160248201527f00000000000000000000000000000000000000000000000000000000000000009091169063a22cb46590604401600060405180830381600087803b1580156124f857600080fd5b505af115801561250c573d6000803e3d6000fd5b505060075460405163a22cb46560e01b81526001600160a01b039182166004820152600160248201527f0000000000000000000000000000000000000000000000000000000000000000909116925063a22cb4659150604401600060405180830381600087803b15801561257f57600080fd5b505af11580156114d7573d6000803e3d6000fd5b50565b3360009081526004602052604081205460ff166126065760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f604482015267373a3937b63632b960c11b606482015260840161088a565b604080517f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae602080830191909152818301869052825180830384018152606090920190925280519101206000906040517fc475abff00000000000000000000000000000000000000000000000000000000815260048101869052602481018590529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c475abff906044016020604051808303816000875af11580156126e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270491906158e9565b6040516331a9108f60e11b8152600481018790529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa925050508015612788575060408051601f3d908101601f19168201909252612785918101906159d7565b60015b6127955791506108c99050565b6001600160a01b0381163014158061283f57506040516302571be360e01b81526004810184905230906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa15801561280f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283391906159d7565b6001600160a01b031614155b1561284e575091506108c99050565b50600061285e6276a70083615918565b60008481526001602052604090205490915060a081901c6128818583838661429a565b50919695505050505050565b60008661289a8133611775565b6128c05760405163168ab55d60e31b81526004810182905233602482015260440161088a565b600087876040516128d2929190615a11565b6040518091039020905061290d8982604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b92506129198984613a8a565b6129238386613bc9565b60006129668a858b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613bfc92505050565b90506129748a858888613cc9565b945061297f84613d0f565b612a47576040517f06ab5923000000000000000000000000000000000000000000000000000000008152600481018b9052602481018390523060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906306ab5923906064016020604051808303816000875af1158015612a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3491906158e9565b50612a428482898989614424565b612a8d565b612a8d8a858b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d92508c91508b9050613dff565b5050509695505050505050565b6000612ae0600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506144669050565b6007549091506001600160a01b0316612b25576040517f24c1d6d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612b2f8133611775565b612b555760405163168ab55d60e31b81526004810182905233602482015260440161088a565b60008080612b62846108cf565b919450925090506000612b7485610958565b9050612b7f85614525565b600760009054906101000a90046001600160a01b03166001600160a01b0316639198c2768a8a878787878e8e6040518963ffffffff1660e01b8152600401612bce989796959493929190615a4a565b600060405180830381600087803b158015612be857600080fd5b505af1158015612bfc573d6000803e3d6000fd5b50505050505050505050505050565b83612c168133611775565b612c3c5760405163168ab55d60e31b81526004810182905233602482015260440161088a565b84601c6000612c4a836108cf565b5091505063ffffffff8282161615612c785760405163a2a7201360e01b81526004810184905260240161088a565b6040517fcf408823000000000000000000000000000000000000000000000000000000008152600481018990523060248201526001600160a01b03878116604483015267ffffffffffffffff871660648301527f0000000000000000000000000000000000000000000000000000000000000000169063cf40882390608401600060405180830381600087803b158015612d1157600080fd5b505af1158015612d25573d6000803e3d6000fd5b5050506001600160a01b0388169050612d8c576000612d43896108cf565b509150506201ffff1962020000821601612d7b57604051632ca49b0d60e11b81526001600160a01b038916600482015260240161088a565b612d86896000614332565b50611cbe565b6000612d97896119aa565b9050612db981898b60001c6001604051806020016040528060008152506145e7565b505050505050505050565b60408051602080820186905281830185905282518083038401815260609092019092528051910120612df68133611775565b612e1c5760405163168ab55d60e31b81526004810182905233602482015260440161088a565b7f6c32148f748aba23997146d7fe89e962e3cc30271290fb96f5f4337756c03b528401612e5c5760405163615a470360e01b815260040160405180910390fd5b6001600160a01b0382161580612e7a57506001600160a01b03821630145b15612ea357604051632ca49b0d60e11b81526001600160a01b038316600482015260240161088a565b604080516020808201879052818301869052825180830384018152606090920190925280519101206119a490611c1b565b604080516020808201859052818301849052825180830384018152606090920190925280519101206000906000612f0a82613d0f565b90507f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae8514612f3c5791506108c99050565b6040516331a9108f60e11b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa925050508015612fbd575060408051601f3d908101601f19168201909252612fba918101906159d7565b60015b612fcc576000925050506108c9565b6001600160a01b0316301492506108c9915050565b612fe9613a30565b6001600160a01b038216600081815260046020908152604091829020805460ff191685151590811790915591519182527f4c97694570a07277810af7e5669ffd5f6a2d6b74b6e9a274b8b870fd5114cf8791015b60405180910390a25050565b600080613090600087878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506147399050565b9150915060006130d98288888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506144669050565b604080516020808201849052818301879052825180830384018152606090920190925280519101209091506000906000818152600660205260409020909150613123888a83615af9565b507f6c32148f748aba23997146d7fe89e962e3cc30271290fb96f5f4337756c03b5282016131645760405163615a470360e01b815260040160405180910390fd5b6040516302571be360e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906302571be390602401602060405180830381865afa1580156131cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f091906159d7565b90506001600160a01b0381163314801590613298575060405163e985e9c560e01b81526001600160a01b0382811660048301523360248301527f0000000000000000000000000000000000000000000000000000000000000000169063e985e9c590604401602060405180830381865afa158015613272573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329691906159f4565b155b156132bf5760405163168ab55d60e31b81526004810183905233602482015260440161088a565b6001600160a01b0386161561335157604051630c4b7b8560e11b8152600481018390526001600160a01b0387811660248301527f00000000000000000000000000000000000000000000000000000000000000001690631896f70a90604401600060405180830381600087803b15801561333857600080fd5b505af115801561334c573d6000803e3d6000fd5b505050505b604051635b0fc9c360e01b8152600481018390523060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635b0fc9c390604401600060405180830381600087803b1580156133b957600080fd5b505af11580156133cd573d6000803e3d6000fd5b50505050612db9828a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052508d93509150819050614424565b6001600160a01b0384166134785760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161088a565b6001600160a01b0385163314806134b257506001600160a01b038516600090815260026020908152604080832033845290915290205460ff165b6135245760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201527f20617070726f7665640000000000000000000000000000000000000000000000606482015260840161088a565b6114d785858585856145e7565b613539613a30565b6001600160a01b0381166135b55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161088a565b612593816142e2565b600081815260066020526040812080548291906135da90615940565b80601f016020809104026020016040519081016040528092919081815260200182805461360690615940565b80156136535780601f1061362857610100808354040283529160200191613653565b820191906000526020600020905b81548152906001019060200180831161363657829003601f168201915b50505050509050805160000361366c5750600092915050565b6000806136798382614739565b9092509050600061368a8483614466565b9050610a738184612ed4565b600080428367ffffffffffffffff1610156136c45761ffff19620100008516016136bf57600094505b600093505b50929391925050565b60006001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061371757506001600160e01b031982166303a24d0760e21b145b806108c957507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146108c9565b600061375a826119aa565b9050806001600160a01b0316836001600160a01b0316036137e35760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161088a565b336001600160a01b038216148061381d57506001600160a01b038116600090815260026020908152604080832033845290915290205460ff165b61388f5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161088a565b6109de83836147f0565b6000620200008381161480156109965750426138b86276a70084615bb9565b67ffffffffffffffff16109392505050565b8451602086012060006139247f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae83604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b90506000613967886040518060400160405280600581526020017f036574680000000000000000000000000000000000000000000000000000000081525061485e565b60008381526006602052604090209091506139828282615bda565b50613995828289620300008a1789614424565b6001600160a01b03841615611cbe57604051630c4b7b8560e11b8152600481018390526001600160a01b0385811660248301527f00000000000000000000000000000000000000000000000000000000000000001690631896f70a90604401600060405180830381600087803b158015613a0e57600080fd5b505af1158015613a22573d6000803e3d6000fd5b505050505050505050505050565b6000546001600160a01b03163314611b1c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161088a565b60008080613a97846108cf565b919450925090504267ffffffffffffffff821610808015613b5b57506001600160a01b0384161580613b5b57506040516302571be360e01b8152600481018690526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa158015613b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b5091906159d7565b6001600160a01b0316145b15613b9a576000613b6b876108cf565b509150506020811615613b945760405163a2a7201360e01b81526004810187905260240161088a565b50613bc1565b62010000831615613bc15760405163a2a7201360e01b81526004810186905260240161088a565b505050505050565b63fffdffff81811763ffffffff1614613bf85760405163a2a7201360e01b81526004810183905260240161088a565b5050565b60606000613ca583600660008881526020019081526020016000208054613c2290615940565b80601f0160208091040260200160405190810160405280929190818152602001828054613c4e90615940565b8015613c9b5780601f10613c7057610100808354040283529160200191613c9b565b820191906000526020600020905b815481529060010190602001808311613c7e57829003601f168201915b505050505061485e565b6000858152600660205260409020909150613cc08282615bda565b50949350505050565b600080613cd5856108cf565b92505050600080613ce88860001c6108cf565b9250925050613cf8878784614155565b613d03858483614190565b98975050505050505050565b600080613d1b836119aa565b6001600160a01b0316141580156108c957506040516302571be360e01b81526004810183905230906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa158015613d94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613db891906159d7565b6001600160a01b03161492915050565b60008681526006602052604081208054613de7918791613c2290615940565b9050613df68682868686614424565b50505050505050565b60008080613e0c886108cf565b9250925092506000613e3688600660008d81526020019081526020016000208054613c2290615940565b60008a8152600660205260409020805491925090613e5390615940565b9050600003613e76576000898152600660205260409020613e748282615bda565b505b613e85898588861785896141da565b6001600160a01b038716613ea357613e9e896000614332565b610bfc565b610bfc84888b60001c6001604051806020016040528060008152506145e7565b6201ffff1962020000831601613ee357613ee06276a70082615bb9565b90505b428167ffffffffffffffff161015613f605762010000821615613f5b5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161088a565b613f85565b6004821615613f855760405163a2a7201360e01b81526004810184905260240161088a565b604082166000036109de575050600090815260036020526040902080546001600160a01b0319169055565b6001600160a01b0384163b15613bc15760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190613ff49089908990889088908890600401615c9a565b6020604051808303816000875af192505050801561402f575060408051601f3d908101601f1916820190925261402c91810190615cec565b60015b6140e45761403b615d09565b806308c379a003614074575061404f615d25565b8061405a5750614076565b8060405162461bcd60e51b815260040161088a9190614dee565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e746572000000000000000000000000606482015260840161088a565b6001600160e01b0319811663bc197c8160e01b14613df65760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161088a565b63ffff0000821615801590600183161590829061416f5750805b156114d75760405163a2a7201360e01b81526004810186905260240161088a565b60008167ffffffffffffffff168467ffffffffffffffff1611156141b2578193505b8267ffffffffffffffff168467ffffffffffffffff1610156141d2578293505b509192915050565b6141e68585858461429a565b60405163ffffffff8416815285907f39873f00c80f4f94b7bd1594aebcf650f003545b74824d57ddf4939e3ff3a34b9060200160405180910390a28167ffffffffffffffff168167ffffffffffffffff1611156114d75760405167ffffffffffffffff8216815285907ff675815a0817338f93a7da433f6bd5f5542f1029b11b455191ac96c7f6a9b132906020015b60405180910390a25050505050565b600080614290836108cf565b5090949350505050565b6142a48483614907565b60008481526001602052604090206001600160a01b03841663ffffffff60a01b60a085901b16176001600160c01b031960c084901b161790556119a4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61433d826001612319565b1561435e5760405163a2a7201360e01b81526004810183905260240161088a565b61436782614525565b604051635b0fc9c360e01b8152600481018390526001600160a01b0382811660248301527f00000000000000000000000000000000000000000000000000000000000000001690635b0fc9c390604401600060405180830381600087803b1580156143d157600080fd5b505af11580156143e5573d6000803e3d6000fd5b50506040516001600160a01b03841681528492507fee2ba1195c65bcf218a83d874335c6bf9d9067b4c672f3c3bf16cf40de7586c4915060200161303d565b61443085848484614940565b847f8ce7013e8abebc55c3890a68f5a27c67c3f7efa64e584de5fb22363c606fd340858585856040516142759493929190615daf565b60008060006144758585614739565b9092509050816144e7576001855161448d9190615df7565b84146144db5760405162461bcd60e51b815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d65000000604482015260640161088a565b50600091506108c99050565b6144f18582614466565b6040805160208101929092528101839052606001604051602081830303815290604052805190602001209250505092915050565b60008181526001602052604090205460a081901c60c082901c614549838383613696565b600086815260036020908152604080832080546001600160a01b03191690556001909152902063ffffffff60a01b60a083901b166001600160c01b031960c086901b1617905592506145989050565b60408051858152600160208201526000916001600160a01b0386169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a450505050565b60008060006145f5866108cf565b925092509250614606868383613ec3565b8460011480156146275750876001600160a01b0316836001600160a01b0316145b6146865760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161088a565b866001600160a01b0316836001600160a01b0316036146a7575050506114d7565b60008681526001602052604090206001600160a01b03881663ffffffff60a01b60a085901b16176001600160c01b031960c084901b1617905560408051878152602081018790526001600160a01b03808a1692908b169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611cbe3389898989896149b4565b6000808351831061478c5760405162461bcd60e51b815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e64730000604482015260640161088a565b60008484815181106147a0576147a061597a565b016020015160f81c905080156147cc576147c5856147bf866001615e0a565b83614ab0565b92506147d1565b600092505b6147db8185615e0a565b6147e6906001615e0a565b9150509250929050565b600081815260036020526040902080546001600160a01b0319166001600160a01b0384169081179091558190614825826119aa565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b606060018351101561489c576040517f280dacb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff835111156148da57826040517fe3ba295f00000000000000000000000000000000000000000000000000000000815260040161088a9190614dee565b825183836040516020016148f093929190615e1d565b604051602081830303815290604052905092915050565b61ffff81161580159061491f57506201000181811614155b15613bf85760405163a2a7201360e01b81526004810183905260240161088a565b61494a8483614907565b6000848152600160205260409020546001600160a01b038116156149a85761497185614525565b6040516000815285907fee2ba1195c65bcf218a83d874335c6bf9d9067b4c672f3c3bf16cf40de7586c49060200160405180910390a25b6114d785858585614ad4565b6001600160a01b0384163b15613bc15760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906149f89089908990889088908890600401615e7e565b6020604051808303816000875af1925050508015614a33575060408051601f3d908101601f19168201909252614a3091810190615cec565b60015b614a3f5761403b615d09565b6001600160e01b0319811663f23a6e6160e01b14613df65760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161088a565b8251600090614abf8385615e0a565b1115614aca57600080fd5b5091016020012090565b8360008080614ae2846108cf565b9194509250905063ffff0000821667ffffffffffffffff8087169083161115614b09578195505b428267ffffffffffffffff1610614b1f57958617955b6001600160a01b03841615614b765760405162461bcd60e51b815260206004820152601f60248201527f455243313135353a206d696e74206f66206578697374696e6720746f6b656e00604482015260640161088a565b6001600160a01b038816614bf25760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161088a565b306001600160a01b03891603614c705760405162461bcd60e51b815260206004820152603460248201527f455243313135353a206e65774f776e65722063616e6e6f74206265207468652060448201527f4e616d655772617070657220636f6e7472616374000000000000000000000000606482015260840161088a565b60008581526001602052604090206001600160a01b03891663ffffffff60a01b60a08a901b16176001600160c01b031960c089901b1617905560408051868152600160208201526001600160a01b038a169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612db93360008a886001604051806020016040528060008152506149b4565b6001600160a01b038116811461259357600080fd5b60008060408385031215614d3957600080fd5b8235614d4481614d11565b946020939093013593505050565b600060208284031215614d6457600080fd5b5035919050565b6001600160e01b03198116811461259357600080fd5b600060208284031215614d9357600080fd5b813561099681614d6b565b60005b83811015614db9578181015183820152602001614da1565b50506000910152565b60008151808452614dda816020860160208601614d9e565b601f01601f19169290920160200192915050565b6020815260006109966020830184614dc2565b60008060408385031215614e1457600080fd5b823591506020830135614e2681614d11565b809150509250929050565b803567ffffffffffffffff81168114614e4957600080fd5b919050565b60008060408385031215614e6157600080fd5b82359150614e7160208401614e31565b90509250929050565b60008083601f840112614e8c57600080fd5b50813567ffffffffffffffff811115614ea457600080fd5b602083019150836020828501011115614ebc57600080fd5b9250929050565b600080600080600060808688031215614edb57600080fd5b8535614ee681614d11565b94506020860135614ef681614d11565b935060408601359250606086013567ffffffffffffffff811115614f1957600080fd5b614f2588828901614e7a565b969995985093965092949392505050565b600060208284031215614f4857600080fd5b813561099681614d11565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715614f8f57614f8f614f53565b6040525050565b600067ffffffffffffffff821115614fb057614fb0614f53565b50601f01601f191660200190565b600082601f830112614fcf57600080fd5b8135614fda81614f96565b604051614fe78282614f69565b828152856020848701011115614ffc57600080fd5b82602086016020830137600092810160200192909252509392505050565b803563ffffffff81168114614e4957600080fd5b600080600080600080600060e0888a03121561504957600080fd5b87359650602088013567ffffffffffffffff81111561506757600080fd5b6150738a828b01614fbe565b965050604088013561508481614d11565b9450606088013561509481614d11565b93506150a260808901614e31565b92506150b060a0890161501a565b91506150be60c08901614e31565b905092959891949750929550565b600067ffffffffffffffff8211156150e6576150e6614f53565b5060051b60200190565b600082601f83011261510157600080fd5b8135602061510e826150cc565b60405161511b8282614f69565b83815260059390931b850182019282810191508684111561513b57600080fd5b8286015b8481101561230e578035835291830191830161513f565b600080600080600060a0868803121561516e57600080fd5b853561517981614d11565b9450602086013561518981614d11565b9350604086013567ffffffffffffffff808211156151a657600080fd5b6151b289838a016150f0565b945060608801359150808211156151c857600080fd5b6151d489838a016150f0565b935060808801359150808211156151ea57600080fd5b506151f788828901614fbe565b9150509295509295909350565b6000806000806080858703121561521a57600080fd5b84359350602085013592506152316040860161501a565b915061523f60608601614e31565b905092959194509250565b803561ffff81168114614e4957600080fd5b6000806040838503121561526f57600080fd5b82359150614e716020840161524a565b6000806040838503121561529257600080fd5b823567ffffffffffffffff808211156152aa57600080fd5b818501915085601f8301126152be57600080fd5b813560206152cb826150cc565b6040516152d88282614f69565b83815260059390931b85018201928281019150898411156152f857600080fd5b948201945b8386101561531f57853561531081614d11565b825294820194908201906152fd565b9650508601359250508082111561533557600080fd5b506147e6858286016150f0565b600081518084526020808501945080840160005b8381101561537257815187529582019590820190600101615356565b509495945050505050565b6020815260006109966020830184615342565b6000806000606084860312156153a557600080fd5b83356153b081614d11565b925060208401356153c081614d11565b929592945050506040919091013590565b6000806000606084860312156153e657600080fd5b83359250602084013591506153fd60408501614e31565b90509250925092565b60008060006060848603121561541b57600080fd5b83359250602084013561542d81614d11565b9150604084013561543d81614d11565b809150509250925092565b60008060008060006080868803121561546057600080fd5b853567ffffffffffffffff81111561547757600080fd5b61548388828901614e7a565b909650945050602086013561549781614d11565b92506154a56040870161524a565b915060608601356154b581614d11565b809150509295509295909350565b801515811461259357600080fd5b600080604083850312156154e457600080fd5b82356154ef81614d11565b91506020830135614e26816154c3565b60008060008060008060a0878903121561551857600080fd5b863567ffffffffffffffff81111561552f57600080fd5b61553b89828a01614e7a565b909750955050602087013561554f81614d11565b935060408701359250606087013561556681614d11565b91506155746080880161524a565b90509295509295509295565b6000806040838503121561559357600080fd5b82359150614e716020840161501a565b600080604083850312156155b657600080fd5b50508035926020909101359150565b60008060008060008060a087890312156155de57600080fd5b86359550602087013567ffffffffffffffff8111156155fc57600080fd5b61560889828a01614e7a565b909650945050604087013561561c81614d11565b925061562a6060880161501a565b915061557460808801614e31565b6000806000806040858703121561564e57600080fd5b843567ffffffffffffffff8082111561566657600080fd5b61567288838901614e7a565b9096509450602087013591508082111561568b57600080fd5b5061569887828801614e7a565b95989497509550505050565b600080600080608085870312156156ba57600080fd5b8435935060208501356156cc81614d11565b9250604085013561523181614d11565b6000806000606084860312156156f157600080fd5b8335925060208401359150604084013561543d81614d11565b6000806040838503121561571d57600080fd5b823561572881614d11565b91506020830135614e2681614d11565b6000806000806060858703121561574e57600080fd5b843567ffffffffffffffff81111561576557600080fd5b61577187828801614e7a565b909550935050602085013561578581614d11565b9150604085013561579581614d11565b939692955090935050565b600080600080600060a086880312156157b857600080fd5b85356157c381614d11565b945060208601356157d381614d11565b93506040860135925060608601359150608086013567ffffffffffffffff8111156157fd57600080fd5b6151f788828901614fbe565b60006020828403121561581b57600080fd5b815167ffffffffffffffff81111561583257600080fd5b8201601f8101841361584357600080fd5b805161584e81614f96565b60405161585b8282614f69565b82815286602084860101111561587057600080fd5b610a73836020830160208701614d9e565b6000806000806080858703121561589757600080fd5b843567ffffffffffffffff8111156158ae57600080fd5b6158ba87828801614fbe565b94505060208501356158cb81614d11565b92506158d96040860161524a565b9150606085013561579581614d11565b6000602082840312156158fb57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff81811683821601908082111561593957615939615902565b5092915050565b600181811c9082168061595457607f821691505b60208210810361597457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6000600182016159a2576159a2615902565b5060010190565b6040815260006159bc6040830185615342565b82810360208401526159ce8185615342565b95945050505050565b6000602082840312156159e957600080fd5b815161099681614d11565b600060208284031215615a0657600080fd5b8151610996816154c3565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60c081526000615a5e60c083018a8c615a21565b6001600160a01b03898116602085015263ffffffff8916604085015267ffffffffffffffff881660608501528616608084015282810360a0840152615aa4818587615a21565b9b9a5050505050505050505050565b601f8211156109de57600081815260208120601f850160051c81016020861015615ada5750805b601f850160051c820191505b81811015613bc157828155600101615ae6565b67ffffffffffffffff831115615b1157615b11614f53565b615b2583615b1f8354615940565b83615ab3565b6000601f841160018114615b595760008515615b415750838201355b600019600387901b1c1916600186901b1783556114d7565b600083815260209020601f19861690835b82811015615b8a5786850135825560209485019460019092019101615b6a565b5086821015615ba75760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b67ffffffffffffffff82811682821603908082111561593957615939615902565b815167ffffffffffffffff811115615bf457615bf4614f53565b615c0881615c028454615940565b84615ab3565b602080601f831160018114615c3d5760008415615c255750858301515b600019600386901b1c1916600185901b178555613bc1565b600085815260208120601f198616915b82811015615c6c57888601518255948401946001909101908401615c4d565b5085821015615c8a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001600160a01b03808816835280871660208401525060a06040830152615cc660a0830186615342565b8281036060840152615cd88186615342565b90508281036080840152613d038185614dc2565b600060208284031215615cfe57600080fd5b815161099681614d6b565b600060033d1115615d225760046000803e5060005160e01c5b90565b600060443d1015615d335790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715615d6357505050505090565b8285019150815181811115615d7b5750505050505090565b843d8701016020828501011115615d955750505050505090565b615da460208286010187614f69565b509095945050505050565b608081526000615dc26080830187614dc2565b6001600160a01b039590951660208301525063ffffffff92909216604083015267ffffffffffffffff16606090910152919050565b818103818111156108c9576108c9615902565b808201808211156108c9576108c9615902565b7fff000000000000000000000000000000000000000000000000000000000000008460f81b16815260008351615e5a816001850160208801614d9e565b835190830190615e71816001840160208801614d9e565b0160010195945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152615eb660a0830184614dc2565b97965050505050505056fea26469706673582212204f37b28dc45c53fb37759a47de9637b4ff115b46e39238a82dadf100cccbc4dc64736f6c63430008110033","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061031f5760003560e01c80636352211e116101a7578063c93ab3fd116100ee578063e985e9c511610097578063f242432a11610071578063f242432a146107d7578063f2fde38b146107ea578063fd0cd0d9146107fd57600080fd5b8063e985e9c514610768578063eb8ae530146107a4578063ed70554d146107b757600080fd5b8063d9a50c12116100c8578063d9a50c121461071f578063da8c229e14610732578063e0dba60f1461075557600080fd5b8063c93ab3fd146106e6578063cf408823146106f9578063d8c9921a1461070c57600080fd5b8063a22cb46511610150578063b6bcad261161012a578063b6bcad26146106ad578063c475abff146106c0578063c658e086146106d357600080fd5b8063a22cb46514610674578063a401498214610687578063adf4960a1461069a57600080fd5b80638b4dfa75116101815780638b4dfa751461063d5780638cf8b41e146106505780638da5cb5b1461066357600080fd5b80636352211e146105f65780636e5d6ad214610609578063715018a61461063557600080fd5b80631f4e15041161026b5780633f15457f116102145780634e1273f4116101ee5780634e1273f4146105b057806353095467146105d05780635d3590d5146105e357600080fd5b80633f15457f1461054e578063402906fc1461057557806341415eab1461059d57600080fd5b80632b20e397116102455780632b20e397146105015780632eb2c2d61461052857806333c69ea91461053b57600080fd5b80631f4e1504146104c857806320c38e2b146104db57806324c1af44146104ee57600080fd5b80630e4cd725116102cd578063150b7a02116102a7578063150b7a02146104765780631534e177146104a25780631896f70a146104b557600080fd5b80630e4cd7251461043d5780630e89341c1461045057806314ab90381461046357600080fd5b806306fdde03116102fe57806306fdde03146103b4578063081812fc146103fd578063095ea7b31461042857600080fd5b8062fdd58e146103245780630178fe3f1461034a57806301ffc9a714610391575b600080fd5b610337610332366004614d26565b610810565b6040519081526020015b60405180910390f35b61035d610358366004614d52565b6108cf565b604080516001600160a01b03909416845263ffffffff909216602084015267ffffffffffffffff1690820152606001610341565b6103a461039f366004614d81565b6108ff565b6040519015158152602001610341565b6103f06040518060400160405280600b81526020017f4e616d655772617070657200000000000000000000000000000000000000000081525081565b6040516103419190614dee565b61041061040b366004614d52565b610958565b6040516001600160a01b039091168152602001610341565b61043b610436366004614d26565b61099d565b005b6103a461044b366004614e01565b6109e3565b6103f061045e366004614d52565b610a7d565b61043b610471366004614e4e565b610aef565b610489610484366004614ec3565b610c08565b6040516001600160e01b03199091168152602001610341565b61043b6104b0366004614f36565b610e1a565b61043b6104c3366004614e01565b610e44565b600754610410906001600160a01b031681565b6103f06104e9366004614d52565b610f06565b6103376104fc36600461502e565b610fa0565b6104107f000000000000000000000000000000000000000000000000000000000000000081565b61043b610536366004615156565b6111b4565b61043b610549366004615204565b6114de565b6104107f000000000000000000000000000000000000000000000000000000000000000081565b61058861058336600461525c565b6116d3565b60405163ffffffff9091168152602001610341565b6103a46105ab366004614e01565b611775565b6105c36105be36600461527f565b6117d2565b604051610341919061537d565b600554610410906001600160a01b031681565b61043b6105f1366004615390565b611910565b610410610604366004614d52565b6119aa565b61061c6106173660046153d1565b6119b5565b60405167ffffffffffffffff9091168152602001610341565b61043b611b0a565b61043b61064b366004615406565b611b1e565b61061c61065e366004615448565b611cc8565b6000546001600160a01b0316610410565b61043b6106823660046154d1565b612094565b6103376106953660046154ff565b61217e565b6103a46106a8366004615580565b612319565b61043b6106bb366004614f36565b61233e565b6103376106ce3660046155a3565b612596565b6103376106e13660046155c5565b61288d565b61043b6106f4366004615638565b612a9a565b61043b6107073660046156a4565b612c0b565b61043b61071a3660046156dc565b612dc4565b6103a461072d3660046155a3565b612ed4565b6103a4610740366004614f36565b60046020526000908152604090205460ff1681565b61043b6107633660046154d1565b612fe1565b6103a461077636600461570a565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205460ff1690565b61043b6107b2366004615738565b613049565b6103376107c5366004614d52565b60016020526000908152604090205481565b61043b6107e53660046157a0565b613414565b61043b6107f8366004614f36565b613531565b6103a461080b366004614d52565b6135be565b60006001600160a01b0383166108935760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600061089e836119aa565b9050836001600160a01b0316816001600160a01b0316036108c35760019150506108c9565b60009150505b92915050565b60008181526001602052604090205460a081901c60c082901c6108f3838383613696565b90959094509092509050565b60006001600160e01b031982167fd82c42d800000000000000000000000000000000000000000000000000000000148061094957506001600160e01b03198216630a85bd0160e11b145b806108c957506108c9826136cd565b600080610964836119aa565b90506001600160a01b03811661097d5750600092915050565b6000838152600360205260409020546001600160a01b03165b9392505050565b60006109a8826108cf565b50915050603f1960408216016109d45760405163a2a7201360e01b81526004810183905260240161088a565b6109de838361374f565b505050565b60008080806109f1866108cf565b925092509250846001600160a01b0316836001600160a01b03161480610a3c57506001600160a01b0380841660009081526002602090815260408083209389168352929052205460ff165b80610a6057506001600160a01b038516610a5587610958565b6001600160a01b0316145b8015610a735750610a718282613899565b155b9695505050505050565b6005546040516303a24d0760e21b8152600481018390526060916001600160a01b031690630e89341c90602401600060405180830381865afa158015610ac7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108c99190810190615809565b81610afa8133611775565b610b205760405163168ab55d60e31b81526004810182905233602482015260440161088a565b8260106000610b2e836108cf565b5091505063ffffffff8282161615610b5c5760405163a2a7201360e01b81526004810184905260240161088a565b6040517f14ab90380000000000000000000000000000000000000000000000000000000081526004810187905267ffffffffffffffff861660248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906314ab9038906044015b600060405180830381600087803b158015610be857600080fd5b505af1158015610bfc573d6000803e3d6000fd5b50505050505050505050565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610c6c576040517f1931a53800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808080610c7d86880188615881565b83516020850120939750919550935091508890808214610cd3576040517fc65c3ccc000000000000000000000000000000000000000000000000000000008152600481018290526024810183905260440161088a565b604051630a3b53db60e21b8152600481018390523060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906328ed4f6c90604401600060405180830381600087803b158015610d3b57600080fd5b505af1158015610d4f573d6000803e3d6000fd5b5050604051636b727d4360e11b8152600481018d9052600092506276a70091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d6e4fa8690602401602060405180830381865afa158015610dc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de491906158e9565b610dee9190615918565b9050610e0187878761ffff1684886138ca565b50630a85bd0160e11b9c9b505050505050505050505050565b610e22613a30565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b81610e4f8133611775565b610e755760405163168ab55d60e31b81526004810182905233602482015260440161088a565b8260086000610e83836108cf565b5091505063ffffffff8282161615610eb15760405163a2a7201360e01b81526004810184905260240161088a565b604051630c4b7b8560e11b8152600481018790526001600160a01b0386811660248301527f00000000000000000000000000000000000000000000000000000000000000001690631896f70a90604401610bce565b60066020526000908152604090208054610f1f90615940565b80601f0160208091040260200160405190810160405280929190818152602001828054610f4b90615940565b8015610f985780601f10610f6d57610100808354040283529160200191610f98565b820191906000526020600020905b815481529060010190602001808311610f7b57829003601f168201915b505050505081565b600087610fad8133611775565b610fd35760405163168ab55d60e31b81526004810182905233602482015260440161088a565b8751602089012061100b8a82604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b92506110178a84613a8a565b6110218386613bc9565b61102c8a848b613bfc565b506110398a848787613cc9565b935061104483613d0f565b6110fa576040516305ef2c7f60e41b8152600481018b9052602481018290523060448201526001600160a01b03888116606483015267ffffffffffffffff881660848301527f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f09060a401600060405180830381600087803b1580156110cf57600080fd5b505af11580156110e3573d6000803e3d6000fd5b505050506110f58a848b8b8989613dc8565b6111a7565b6040516305ef2c7f60e41b8152600481018b9052602481018290523060448201526001600160a01b03888116606483015267ffffffffffffffff881660848301527f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f09060a401600060405180830381600087803b15801561118157600080fd5b505af1158015611195573d6000803e3d6000fd5b505050506111a78a848b8b8989613dff565b5050979650505050505050565b815183511461122b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d61746368000000000000000000000000000000000000000000000000606482015260840161088a565b6001600160a01b03841661128f5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161088a565b6001600160a01b0385163314806112c957506001600160a01b038516600090815260026020908152604080832033845290915290205460ff165b61133b5760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f7665640000000000000000000000000000606482015260840161088a565b60005b835181101561147157600084828151811061135b5761135b61597a565b6020026020010151905060008483815181106113795761137961597a565b602002602001015190506000806000611391856108cf565b9250925092506113a2858383613ec3565b8360011480156113c357508a6001600160a01b0316836001600160a01b0316145b6114225760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161088a565b60008581526001602052604090206001600160a01b038b1663ffffffff60a01b60a085901b16176001600160c01b031960c084901b1617905550505050508061146a90615990565b905061133e565b50836001600160a01b0316856001600160a01b0316336001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516114c19291906159a9565b60405180910390a46114d7338686868686613fb0565b5050505050565b604080516020808201879052818301869052825180830384018152606090920190925280519101206115108184613bc9565b6000808061151d846108cf565b919450925090506001600160a01b03831615806115cc57506040516302571be360e01b81526004810185905230906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa15801561159c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c091906159d7565b6001600160a01b031614155b156115ea57604051635374b59960e01b815260040160405180910390fd5b6000806115f68a6108cf565b90935091508a90506116375761160c8633611775565b6116325760405163168ab55d60e31b81526004810187905233602482015260440161088a565b611667565b6116418a33611775565b6116675760405163168ab55d60e31b8152600481018b905233602482015260440161088a565b611672868984614155565b61167d878483614190565b9650620100008416158015906116a157508363ffffffff1688851763ffffffff1614155b156116c25760405163a2a7201360e01b81526004810187905260240161088a565b96831796610bfc86868a868b6141da565b6000826116e08133611775565b6117065760405163168ab55d60e31b81526004810182905233602482015260440161088a565b8360026000611714836108cf565b5091505063ffffffff82821616156117425760405163a2a7201360e01b81526004810184905260240161088a565b6000808061174f8a6108cf565b9250925092506117688a84848c61ffff161784856141da565b5098975050505050505050565b6000808080611783866108cf565b925092509250846001600160a01b0316836001600160a01b03161480610a6057506001600160a01b0380841660009081526002602090815260408083209389168352929052205460ff16610a60565b6060815183511461184b5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d617463680000000000000000000000000000000000000000000000606482015260840161088a565b6000835167ffffffffffffffff81111561186757611867614f53565b604051908082528060200260200182016040528015611890578160200160208202803683370190505b50905060005b8451811015611908576118db8582815181106118b4576118b461597a565b60200260200101518583815181106118ce576118ce61597a565b6020026020010151610810565b8282815181106118ed576118ed61597a565b602090810291909101015261190181615990565b9050611896565b509392505050565b611918613a30565b6040517fa9059cbb0000000000000000000000000000000000000000000000000000000081526001600160a01b0383811660048301526024820183905284169063a9059cbb906044016020604051808303816000875af1158015611980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a491906159f4565b50505050565b60006108c982614284565b604080516020808201869052818301859052825180830384018152606090920190925280519101206000906119e981613d0f565b611a0657604051635374b59960e01b815260040160405180910390fd5b6000611a1286336109e3565b905080158015611a295750611a278233611775565b155b15611a505760405163168ab55d60e31b81526004810183905233602482015260440161088a565b60008080611a5d856108cf565b92509250925083158015611a745750620400008216155b15611a955760405163a2a7201360e01b81526004810186905260240161088a565b6000611aa08a6108cf565b92505050611aaf888383614190565b9750611abd8685858b61429a565b60405167ffffffffffffffff8916815286907ff675815a0817338f93a7da433f6bd5f5542f1029b11b455191ac96c7f6a9b1329060200160405180910390a2509598975050505050505050565b611b12613a30565b611b1c60006142e2565b565b604080517f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae60208083019190915281830186905282518083038401815260609092019092528051910120611b728133611775565b611b985760405163168ab55d60e31b81526004810182905233602482015260440161088a565b306001600160a01b03841603611bcc57604051632ca49b0d60e11b81526001600160a01b038416600482015260240161088a565b604080517f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae60208083019190915281830187905282518083038401815260609092019092528051910120611c21905b83614332565b6040517f42842e0e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038481166024830152604482018690527f000000000000000000000000000000000000000000000000000000000000000016906342842e0e90606401600060405180830381600087803b158015611caa57600080fd5b505af1158015611cbe573d6000803e3d6000fd5b5050505050505050565b6000808686604051611cdb929190615a11565b6040519081900381206331a9108f60e11b82526004820181905291506000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa158015611d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6f91906159d7565b90506001600160a01b0381163314801590611e17575060405163e985e9c560e01b81526001600160a01b0382811660048301523360248301527f0000000000000000000000000000000000000000000000000000000000000000169063e985e9c590604401602060405180830381865afa158015611df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1591906159f4565b155b15611e8757604080517f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae6020808301919091528183018590528251808303840181526060830193849052805191012063168ab55d60e31b909252606481019190915233608482015260a40161088a565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081526001600160a01b038281166004830152306024830152604482018490527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90606401600060405180830381600087803b158015611f1057600080fd5b505af1158015611f24573d6000803e3d6000fd5b5050604051630a3b53db60e21b8152600481018590523060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031692506328ed4f6c9150604401600060405180830381600087803b158015611f9057600080fd5b505af1158015611fa4573d6000803e3d6000fd5b5050604051636b727d4360e11b8152600481018590526276a70092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316915063d6e4fa8690602401602060405180830381865afa158015612012573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203691906158e9565b6120409190615918565b925061208988888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250505061ffff881686886138ca565b505095945050505050565b6001600160a01b03821633036121125760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c660000000000000000000000000000000000000000000000606482015260840161088a565b3360008181526002602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b3360009081526004602052604081205460ff166121ee5760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f604482015267373a3937b63632b960c11b606482015260840161088a565b60008787604051612200929190615a11565b6040519081900381207ffca247ac000000000000000000000000000000000000000000000000000000008252600482018190523060248301526044820187905291507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fca247ac906064016020604051808303816000875af1158015612295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122b991906158e9565b915061230e88888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508a9250505061ffff86166123086276a70087615918565b886138ca565b509695505050505050565b600080612325846108cf565b50841663ffffffff908116908516149250505092915050565b612346613a30565b6007546001600160a01b0316156124665760075460405163a22cb46560e01b81526001600160a01b039182166004820152600060248201527f00000000000000000000000000000000000000000000000000000000000000009091169063a22cb46590604401600060405180830381600087803b1580156123c657600080fd5b505af11580156123da573d6000803e3d6000fd5b505060075460405163a22cb46560e01b81526001600160a01b039182166004820152600060248201527f0000000000000000000000000000000000000000000000000000000000000000909116925063a22cb4659150604401600060405180830381600087803b15801561244d57600080fd5b505af1158015612461573d6000803e3d6000fd5b505050505b600780546001600160a01b0319166001600160a01b038316908117909155156125935760075460405163a22cb46560e01b81526001600160a01b039182166004820152600160248201527f00000000000000000000000000000000000000000000000000000000000000009091169063a22cb46590604401600060405180830381600087803b1580156124f857600080fd5b505af115801561250c573d6000803e3d6000fd5b505060075460405163a22cb46560e01b81526001600160a01b039182166004820152600160248201527f0000000000000000000000000000000000000000000000000000000000000000909116925063a22cb4659150604401600060405180830381600087803b15801561257f57600080fd5b505af11580156114d7573d6000803e3d6000fd5b50565b3360009081526004602052604081205460ff166126065760405162461bcd60e51b815260206004820152602860248201527f436f6e74726f6c6c61626c653a2043616c6c6572206973206e6f74206120636f604482015267373a3937b63632b960c11b606482015260840161088a565b604080517f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae602080830191909152818301869052825180830384018152606090920190925280519101206000906040517fc475abff00000000000000000000000000000000000000000000000000000000815260048101869052602481018590529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c475abff906044016020604051808303816000875af11580156126e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270491906158e9565b6040516331a9108f60e11b8152600481018790529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa925050508015612788575060408051601f3d908101601f19168201909252612785918101906159d7565b60015b6127955791506108c99050565b6001600160a01b0381163014158061283f57506040516302571be360e01b81526004810184905230906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa15801561280f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061283391906159d7565b6001600160a01b031614155b1561284e575091506108c99050565b50600061285e6276a70083615918565b60008481526001602052604090205490915060a081901c6128818583838661429a565b50919695505050505050565b60008661289a8133611775565b6128c05760405163168ab55d60e31b81526004810182905233602482015260440161088a565b600087876040516128d2929190615a11565b6040518091039020905061290d8982604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b92506129198984613a8a565b6129238386613bc9565b60006129668a858b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250613bfc92505050565b90506129748a858888613cc9565b945061297f84613d0f565b612a47576040517f06ab5923000000000000000000000000000000000000000000000000000000008152600481018b9052602481018390523060448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906306ab5923906064016020604051808303816000875af1158015612a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a3491906158e9565b50612a428482898989614424565b612a8d565b612a8d8a858b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d92508c91508b9050613dff565b5050509695505050505050565b6000612ae0600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506144669050565b6007549091506001600160a01b0316612b25576040517f24c1d6d400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612b2f8133611775565b612b555760405163168ab55d60e31b81526004810182905233602482015260440161088a565b60008080612b62846108cf565b919450925090506000612b7485610958565b9050612b7f85614525565b600760009054906101000a90046001600160a01b03166001600160a01b0316639198c2768a8a878787878e8e6040518963ffffffff1660e01b8152600401612bce989796959493929190615a4a565b600060405180830381600087803b158015612be857600080fd5b505af1158015612bfc573d6000803e3d6000fd5b50505050505050505050505050565b83612c168133611775565b612c3c5760405163168ab55d60e31b81526004810182905233602482015260440161088a565b84601c6000612c4a836108cf565b5091505063ffffffff8282161615612c785760405163a2a7201360e01b81526004810184905260240161088a565b6040517fcf408823000000000000000000000000000000000000000000000000000000008152600481018990523060248201526001600160a01b03878116604483015267ffffffffffffffff871660648301527f0000000000000000000000000000000000000000000000000000000000000000169063cf40882390608401600060405180830381600087803b158015612d1157600080fd5b505af1158015612d25573d6000803e3d6000fd5b5050506001600160a01b0388169050612d8c576000612d43896108cf565b509150506201ffff1962020000821601612d7b57604051632ca49b0d60e11b81526001600160a01b038916600482015260240161088a565b612d86896000614332565b50611cbe565b6000612d97896119aa565b9050612db981898b60001c6001604051806020016040528060008152506145e7565b505050505050505050565b60408051602080820186905281830185905282518083038401815260609092019092528051910120612df68133611775565b612e1c5760405163168ab55d60e31b81526004810182905233602482015260440161088a565b7f6c32148f748aba23997146d7fe89e962e3cc30271290fb96f5f4337756c03b528401612e5c5760405163615a470360e01b815260040160405180910390fd5b6001600160a01b0382161580612e7a57506001600160a01b03821630145b15612ea357604051632ca49b0d60e11b81526001600160a01b038316600482015260240161088a565b604080516020808201879052818301869052825180830384018152606090920190925280519101206119a490611c1b565b604080516020808201859052818301849052825180830384018152606090920190925280519101206000906000612f0a82613d0f565b90507f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae8514612f3c5791506108c99050565b6040516331a9108f60e11b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636352211e90602401602060405180830381865afa925050508015612fbd575060408051601f3d908101601f19168201909252612fba918101906159d7565b60015b612fcc576000925050506108c9565b6001600160a01b0316301492506108c9915050565b612fe9613a30565b6001600160a01b038216600081815260046020908152604091829020805460ff191685151590811790915591519182527f4c97694570a07277810af7e5669ffd5f6a2d6b74b6e9a274b8b870fd5114cf8791015b60405180910390a25050565b600080613090600087878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506147399050565b9150915060006130d98288888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506144669050565b604080516020808201849052818301879052825180830384018152606090920190925280519101209091506000906000818152600660205260409020909150613123888a83615af9565b507f6c32148f748aba23997146d7fe89e962e3cc30271290fb96f5f4337756c03b5282016131645760405163615a470360e01b815260040160405180910390fd5b6040516302571be360e01b8152600481018290526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906302571be390602401602060405180830381865afa1580156131cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f091906159d7565b90506001600160a01b0381163314801590613298575060405163e985e9c560e01b81526001600160a01b0382811660048301523360248301527f0000000000000000000000000000000000000000000000000000000000000000169063e985e9c590604401602060405180830381865afa158015613272573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061329691906159f4565b155b156132bf5760405163168ab55d60e31b81526004810183905233602482015260440161088a565b6001600160a01b0386161561335157604051630c4b7b8560e11b8152600481018390526001600160a01b0387811660248301527f00000000000000000000000000000000000000000000000000000000000000001690631896f70a90604401600060405180830381600087803b15801561333857600080fd5b505af115801561334c573d6000803e3d6000fd5b505050505b604051635b0fc9c360e01b8152600481018390523060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635b0fc9c390604401600060405180830381600087803b1580156133b957600080fd5b505af11580156133cd573d6000803e3d6000fd5b50505050612db9828a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052508d93509150819050614424565b6001600160a01b0384166134785760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161088a565b6001600160a01b0385163314806134b257506001600160a01b038516600090815260026020908152604080832033845290915290205460ff165b6135245760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201527f20617070726f7665640000000000000000000000000000000000000000000000606482015260840161088a565b6114d785858585856145e7565b613539613a30565b6001600160a01b0381166135b55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161088a565b612593816142e2565b600081815260066020526040812080548291906135da90615940565b80601f016020809104026020016040519081016040528092919081815260200182805461360690615940565b80156136535780601f1061362857610100808354040283529160200191613653565b820191906000526020600020905b81548152906001019060200180831161363657829003601f168201915b50505050509050805160000361366c5750600092915050565b6000806136798382614739565b9092509050600061368a8483614466565b9050610a738184612ed4565b600080428367ffffffffffffffff1610156136c45761ffff19620100008516016136bf57600094505b600093505b50929391925050565b60006001600160e01b031982167fd9b67a2600000000000000000000000000000000000000000000000000000000148061371757506001600160e01b031982166303a24d0760e21b145b806108c957507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316146108c9565b600061375a826119aa565b9050806001600160a01b0316836001600160a01b0316036137e35760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015260840161088a565b336001600160a01b038216148061381d57506001600160a01b038116600090815260026020908152604080832033845290915290205460ff165b61388f5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161088a565b6109de83836147f0565b6000620200008381161480156109965750426138b86276a70084615bb9565b67ffffffffffffffff16109392505050565b8451602086012060006139247f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae83604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b90506000613967886040518060400160405280600581526020017f036574680000000000000000000000000000000000000000000000000000000081525061485e565b60008381526006602052604090209091506139828282615bda565b50613995828289620300008a1789614424565b6001600160a01b03841615611cbe57604051630c4b7b8560e11b8152600481018390526001600160a01b0385811660248301527f00000000000000000000000000000000000000000000000000000000000000001690631896f70a90604401600060405180830381600087803b158015613a0e57600080fd5b505af1158015613a22573d6000803e3d6000fd5b505050505050505050505050565b6000546001600160a01b03163314611b1c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161088a565b60008080613a97846108cf565b919450925090504267ffffffffffffffff821610808015613b5b57506001600160a01b0384161580613b5b57506040516302571be360e01b8152600481018690526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa158015613b2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b5091906159d7565b6001600160a01b0316145b15613b9a576000613b6b876108cf565b509150506020811615613b945760405163a2a7201360e01b81526004810187905260240161088a565b50613bc1565b62010000831615613bc15760405163a2a7201360e01b81526004810186905260240161088a565b505050505050565b63fffdffff81811763ffffffff1614613bf85760405163a2a7201360e01b81526004810183905260240161088a565b5050565b60606000613ca583600660008881526020019081526020016000208054613c2290615940565b80601f0160208091040260200160405190810160405280929190818152602001828054613c4e90615940565b8015613c9b5780601f10613c7057610100808354040283529160200191613c9b565b820191906000526020600020905b815481529060010190602001808311613c7e57829003601f168201915b505050505061485e565b6000858152600660205260409020909150613cc08282615bda565b50949350505050565b600080613cd5856108cf565b92505050600080613ce88860001c6108cf565b9250925050613cf8878784614155565b613d03858483614190565b98975050505050505050565b600080613d1b836119aa565b6001600160a01b0316141580156108c957506040516302571be360e01b81526004810183905230906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906302571be390602401602060405180830381865afa158015613d94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613db891906159d7565b6001600160a01b03161492915050565b60008681526006602052604081208054613de7918791613c2290615940565b9050613df68682868686614424565b50505050505050565b60008080613e0c886108cf565b9250925092506000613e3688600660008d81526020019081526020016000208054613c2290615940565b60008a8152600660205260409020805491925090613e5390615940565b9050600003613e76576000898152600660205260409020613e748282615bda565b505b613e85898588861785896141da565b6001600160a01b038716613ea357613e9e896000614332565b610bfc565b610bfc84888b60001c6001604051806020016040528060008152506145e7565b6201ffff1962020000831601613ee357613ee06276a70082615bb9565b90505b428167ffffffffffffffff161015613f605762010000821615613f5b5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161088a565b613f85565b6004821615613f855760405163a2a7201360e01b81526004810184905260240161088a565b604082166000036109de575050600090815260036020526040902080546001600160a01b0319169055565b6001600160a01b0384163b15613bc15760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190613ff49089908990889088908890600401615c9a565b6020604051808303816000875af192505050801561402f575060408051601f3d908101601f1916820190925261402c91810190615cec565b60015b6140e45761403b615d09565b806308c379a003614074575061404f615d25565b8061405a5750614076565b8060405162461bcd60e51b815260040161088a9190614dee565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e746572000000000000000000000000606482015260840161088a565b6001600160e01b0319811663bc197c8160e01b14613df65760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161088a565b63ffff0000821615801590600183161590829061416f5750805b156114d75760405163a2a7201360e01b81526004810186905260240161088a565b60008167ffffffffffffffff168467ffffffffffffffff1611156141b2578193505b8267ffffffffffffffff168467ffffffffffffffff1610156141d2578293505b509192915050565b6141e68585858461429a565b60405163ffffffff8416815285907f39873f00c80f4f94b7bd1594aebcf650f003545b74824d57ddf4939e3ff3a34b9060200160405180910390a28167ffffffffffffffff168167ffffffffffffffff1611156114d75760405167ffffffffffffffff8216815285907ff675815a0817338f93a7da433f6bd5f5542f1029b11b455191ac96c7f6a9b132906020015b60405180910390a25050505050565b600080614290836108cf565b5090949350505050565b6142a48483614907565b60008481526001602052604090206001600160a01b03841663ffffffff60a01b60a085901b16176001600160c01b031960c084901b161790556119a4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61433d826001612319565b1561435e5760405163a2a7201360e01b81526004810183905260240161088a565b61436782614525565b604051635b0fc9c360e01b8152600481018390526001600160a01b0382811660248301527f00000000000000000000000000000000000000000000000000000000000000001690635b0fc9c390604401600060405180830381600087803b1580156143d157600080fd5b505af11580156143e5573d6000803e3d6000fd5b50506040516001600160a01b03841681528492507fee2ba1195c65bcf218a83d874335c6bf9d9067b4c672f3c3bf16cf40de7586c4915060200161303d565b61443085848484614940565b847f8ce7013e8abebc55c3890a68f5a27c67c3f7efa64e584de5fb22363c606fd340858585856040516142759493929190615daf565b60008060006144758585614739565b9092509050816144e7576001855161448d9190615df7565b84146144db5760405162461bcd60e51b815260206004820152601d60248201527f6e616d65686173683a204a756e6b20617420656e64206f66206e616d65000000604482015260640161088a565b50600091506108c99050565b6144f18582614466565b6040805160208101929092528101839052606001604051602081830303815290604052805190602001209250505092915050565b60008181526001602052604090205460a081901c60c082901c614549838383613696565b600086815260036020908152604080832080546001600160a01b03191690556001909152902063ffffffff60a01b60a083901b166001600160c01b031960c086901b1617905592506145989050565b60408051858152600160208201526000916001600160a01b0386169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a450505050565b60008060006145f5866108cf565b925092509250614606868383613ec3565b8460011480156146275750876001600160a01b0316836001600160a01b0316145b6146865760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161088a565b866001600160a01b0316836001600160a01b0316036146a7575050506114d7565b60008681526001602052604090206001600160a01b03881663ffffffff60a01b60a085901b16176001600160c01b031960c084901b1617905560408051878152602081018790526001600160a01b03808a1692908b169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611cbe3389898989896149b4565b6000808351831061478c5760405162461bcd60e51b815260206004820152601e60248201527f726561644c6162656c3a20496e646578206f7574206f6620626f756e64730000604482015260640161088a565b60008484815181106147a0576147a061597a565b016020015160f81c905080156147cc576147c5856147bf866001615e0a565b83614ab0565b92506147d1565b600092505b6147db8185615e0a565b6147e6906001615e0a565b9150509250929050565b600081815260036020526040902080546001600160a01b0319166001600160a01b0384169081179091558190614825826119aa565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b606060018351101561489c576040517f280dacb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60ff835111156148da57826040517fe3ba295f00000000000000000000000000000000000000000000000000000000815260040161088a9190614dee565b825183836040516020016148f093929190615e1d565b604051602081830303815290604052905092915050565b61ffff81161580159061491f57506201000181811614155b15613bf85760405163a2a7201360e01b81526004810183905260240161088a565b61494a8483614907565b6000848152600160205260409020546001600160a01b038116156149a85761497185614525565b6040516000815285907fee2ba1195c65bcf218a83d874335c6bf9d9067b4c672f3c3bf16cf40de7586c49060200160405180910390a25b6114d785858585614ad4565b6001600160a01b0384163b15613bc15760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906149f89089908990889088908890600401615e7e565b6020604051808303816000875af1925050508015614a33575060408051601f3d908101601f19168201909252614a3091810190615cec565b60015b614a3f5761403b615d09565b6001600160e01b0319811663f23a6e6160e01b14613df65760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b606482015260840161088a565b8251600090614abf8385615e0a565b1115614aca57600080fd5b5091016020012090565b8360008080614ae2846108cf565b9194509250905063ffff0000821667ffffffffffffffff8087169083161115614b09578195505b428267ffffffffffffffff1610614b1f57958617955b6001600160a01b03841615614b765760405162461bcd60e51b815260206004820152601f60248201527f455243313135353a206d696e74206f66206578697374696e6720746f6b656e00604482015260640161088a565b6001600160a01b038816614bf25760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f7300000000000000000000000000000000000000000000000000000000000000606482015260840161088a565b306001600160a01b03891603614c705760405162461bcd60e51b815260206004820152603460248201527f455243313135353a206e65774f776e65722063616e6e6f74206265207468652060448201527f4e616d655772617070657220636f6e7472616374000000000000000000000000606482015260840161088a565b60008581526001602052604090206001600160a01b03891663ffffffff60a01b60a08a901b16176001600160c01b031960c089901b1617905560408051868152600160208201526001600160a01b038a169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4612db93360008a886001604051806020016040528060008152506149b4565b6001600160a01b038116811461259357600080fd5b60008060408385031215614d3957600080fd5b8235614d4481614d11565b946020939093013593505050565b600060208284031215614d6457600080fd5b5035919050565b6001600160e01b03198116811461259357600080fd5b600060208284031215614d9357600080fd5b813561099681614d6b565b60005b83811015614db9578181015183820152602001614da1565b50506000910152565b60008151808452614dda816020860160208601614d9e565b601f01601f19169290920160200192915050565b6020815260006109966020830184614dc2565b60008060408385031215614e1457600080fd5b823591506020830135614e2681614d11565b809150509250929050565b803567ffffffffffffffff81168114614e4957600080fd5b919050565b60008060408385031215614e6157600080fd5b82359150614e7160208401614e31565b90509250929050565b60008083601f840112614e8c57600080fd5b50813567ffffffffffffffff811115614ea457600080fd5b602083019150836020828501011115614ebc57600080fd5b9250929050565b600080600080600060808688031215614edb57600080fd5b8535614ee681614d11565b94506020860135614ef681614d11565b935060408601359250606086013567ffffffffffffffff811115614f1957600080fd5b614f2588828901614e7a565b969995985093965092949392505050565b600060208284031215614f4857600080fd5b813561099681614d11565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff81118282101715614f8f57614f8f614f53565b6040525050565b600067ffffffffffffffff821115614fb057614fb0614f53565b50601f01601f191660200190565b600082601f830112614fcf57600080fd5b8135614fda81614f96565b604051614fe78282614f69565b828152856020848701011115614ffc57600080fd5b82602086016020830137600092810160200192909252509392505050565b803563ffffffff81168114614e4957600080fd5b600080600080600080600060e0888a03121561504957600080fd5b87359650602088013567ffffffffffffffff81111561506757600080fd5b6150738a828b01614fbe565b965050604088013561508481614d11565b9450606088013561509481614d11565b93506150a260808901614e31565b92506150b060a0890161501a565b91506150be60c08901614e31565b905092959891949750929550565b600067ffffffffffffffff8211156150e6576150e6614f53565b5060051b60200190565b600082601f83011261510157600080fd5b8135602061510e826150cc565b60405161511b8282614f69565b83815260059390931b850182019282810191508684111561513b57600080fd5b8286015b8481101561230e578035835291830191830161513f565b600080600080600060a0868803121561516e57600080fd5b853561517981614d11565b9450602086013561518981614d11565b9350604086013567ffffffffffffffff808211156151a657600080fd5b6151b289838a016150f0565b945060608801359150808211156151c857600080fd5b6151d489838a016150f0565b935060808801359150808211156151ea57600080fd5b506151f788828901614fbe565b9150509295509295909350565b6000806000806080858703121561521a57600080fd5b84359350602085013592506152316040860161501a565b915061523f60608601614e31565b905092959194509250565b803561ffff81168114614e4957600080fd5b6000806040838503121561526f57600080fd5b82359150614e716020840161524a565b6000806040838503121561529257600080fd5b823567ffffffffffffffff808211156152aa57600080fd5b818501915085601f8301126152be57600080fd5b813560206152cb826150cc565b6040516152d88282614f69565b83815260059390931b85018201928281019150898411156152f857600080fd5b948201945b8386101561531f57853561531081614d11565b825294820194908201906152fd565b9650508601359250508082111561533557600080fd5b506147e6858286016150f0565b600081518084526020808501945080840160005b8381101561537257815187529582019590820190600101615356565b509495945050505050565b6020815260006109966020830184615342565b6000806000606084860312156153a557600080fd5b83356153b081614d11565b925060208401356153c081614d11565b929592945050506040919091013590565b6000806000606084860312156153e657600080fd5b83359250602084013591506153fd60408501614e31565b90509250925092565b60008060006060848603121561541b57600080fd5b83359250602084013561542d81614d11565b9150604084013561543d81614d11565b809150509250925092565b60008060008060006080868803121561546057600080fd5b853567ffffffffffffffff81111561547757600080fd5b61548388828901614e7a565b909650945050602086013561549781614d11565b92506154a56040870161524a565b915060608601356154b581614d11565b809150509295509295909350565b801515811461259357600080fd5b600080604083850312156154e457600080fd5b82356154ef81614d11565b91506020830135614e26816154c3565b60008060008060008060a0878903121561551857600080fd5b863567ffffffffffffffff81111561552f57600080fd5b61553b89828a01614e7a565b909750955050602087013561554f81614d11565b935060408701359250606087013561556681614d11565b91506155746080880161524a565b90509295509295509295565b6000806040838503121561559357600080fd5b82359150614e716020840161501a565b600080604083850312156155b657600080fd5b50508035926020909101359150565b60008060008060008060a087890312156155de57600080fd5b86359550602087013567ffffffffffffffff8111156155fc57600080fd5b61560889828a01614e7a565b909650945050604087013561561c81614d11565b925061562a6060880161501a565b915061557460808801614e31565b6000806000806040858703121561564e57600080fd5b843567ffffffffffffffff8082111561566657600080fd5b61567288838901614e7a565b9096509450602087013591508082111561568b57600080fd5b5061569887828801614e7a565b95989497509550505050565b600080600080608085870312156156ba57600080fd5b8435935060208501356156cc81614d11565b9250604085013561523181614d11565b6000806000606084860312156156f157600080fd5b8335925060208401359150604084013561543d81614d11565b6000806040838503121561571d57600080fd5b823561572881614d11565b91506020830135614e2681614d11565b6000806000806060858703121561574e57600080fd5b843567ffffffffffffffff81111561576557600080fd5b61577187828801614e7a565b909550935050602085013561578581614d11565b9150604085013561579581614d11565b939692955090935050565b600080600080600060a086880312156157b857600080fd5b85356157c381614d11565b945060208601356157d381614d11565b93506040860135925060608601359150608086013567ffffffffffffffff8111156157fd57600080fd5b6151f788828901614fbe565b60006020828403121561581b57600080fd5b815167ffffffffffffffff81111561583257600080fd5b8201601f8101841361584357600080fd5b805161584e81614f96565b60405161585b8282614f69565b82815286602084860101111561587057600080fd5b610a73836020830160208701614d9e565b6000806000806080858703121561589757600080fd5b843567ffffffffffffffff8111156158ae57600080fd5b6158ba87828801614fbe565b94505060208501356158cb81614d11565b92506158d96040860161524a565b9150606085013561579581614d11565b6000602082840312156158fb57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b67ffffffffffffffff81811683821601908082111561593957615939615902565b5092915050565b600181811c9082168061595457607f821691505b60208210810361597457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6000600182016159a2576159a2615902565b5060010190565b6040815260006159bc6040830185615342565b82810360208401526159ce8185615342565b95945050505050565b6000602082840312156159e957600080fd5b815161099681614d11565b600060208284031215615a0657600080fd5b8151610996816154c3565b8183823760009101908152919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60c081526000615a5e60c083018a8c615a21565b6001600160a01b03898116602085015263ffffffff8916604085015267ffffffffffffffff881660608501528616608084015282810360a0840152615aa4818587615a21565b9b9a5050505050505050505050565b601f8211156109de57600081815260208120601f850160051c81016020861015615ada5750805b601f850160051c820191505b81811015613bc157828155600101615ae6565b67ffffffffffffffff831115615b1157615b11614f53565b615b2583615b1f8354615940565b83615ab3565b6000601f841160018114615b595760008515615b415750838201355b600019600387901b1c1916600186901b1783556114d7565b600083815260209020601f19861690835b82811015615b8a5786850135825560209485019460019092019101615b6a565b5086821015615ba75760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b67ffffffffffffffff82811682821603908082111561593957615939615902565b815167ffffffffffffffff811115615bf457615bf4614f53565b615c0881615c028454615940565b84615ab3565b602080601f831160018114615c3d5760008415615c255750858301515b600019600386901b1c1916600185901b178555613bc1565b600085815260208120601f198616915b82811015615c6c57888601518255948401946001909101908401615c4d565b5085821015615c8a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001600160a01b03808816835280871660208401525060a06040830152615cc660a0830186615342565b8281036060840152615cd88186615342565b90508281036080840152613d038185614dc2565b600060208284031215615cfe57600080fd5b815161099681614d6b565b600060033d1115615d225760046000803e5060005160e01c5b90565b600060443d1015615d335790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715615d6357505050505090565b8285019150815181811115615d7b5750505050505090565b843d8701016020828501011115615d955750505050505090565b615da460208286010187614f69565b509095945050505050565b608081526000615dc26080830187614dc2565b6001600160a01b039590951660208301525063ffffffff92909216604083015267ffffffffffffffff16606090910152919050565b818103818111156108c9576108c9615902565b808201808211156108c9576108c9615902565b7fff000000000000000000000000000000000000000000000000000000000000008460f81b16815260008351615e5a816001850160208801614d9e565b835190830190615e71816001840160208801614d9e565b0160010195945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152615eb660a0830184614dc2565b97965050505050505056fea26469706673582212204f37b28dc45c53fb37759a47de9637b4ff115b46e39238a82dadf100cccbc4dc64736f6c63430008110033","devdoc":{"kind":"dev","methods":{"allFusesBurned(bytes32,uint32)":{"params":{"fuseMask":"The fuses you want to check","node":"Namehash of the name"},"returns":{"_0":"Boolean of whether or not all the selected fuses are burned"}},"approve(address,uint256)":{"params":{"to":"address to approve","tokenId":"name to approve"}},"balanceOf(address,uint256)":{"details":"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."},"balanceOfBatch(address[],uint256[])":{"details":"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."},"canExtendSubnames(bytes32,address)":{"params":{"addr":"which address to check permissions for","node":"namehash of the name to check"},"returns":{"_0":"whether or not is owner/operator or approved"}},"canModifyName(bytes32,address)":{"params":{"addr":"which address to check permissions for","node":"namehash of the name to check"},"returns":{"_0":"whether or not is owner or operator"}},"extendExpiry(bytes32,bytes32,uint64)":{"params":{"expiry":"When the name will expire in seconds since the Unix epoch","labelhash":"Labelhash of the name, e.g. vitalik.xyz would be keccak256(\'vitalik\')","parentNode":"Parent namehash of the name e.g. vitalik.xyz would be namehash(\'xyz\')"},"returns":{"_0":"New expiry"}},"getApproved(uint256)":{"params":{"id":"Namehash of the name"},"returns":{"operator":"Approved operator of a name"}},"getData(uint256)":{"params":{"id":"Namehash of the name"},"returns":{"expiry":"Expiry of the name","fuses":"Fuses of the name","owner":"Owner of the name"}},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"isWrapped(bytes32)":{"params":{"node":"Namehash of the name"},"returns":{"_0":"Boolean of whether or not the name is wrapped"}},"isWrapped(bytes32,bytes32)":{"params":{"labelhash":"Namehash of the name","parentNode":"Namehash of the name"},"returns":{"_0":"Boolean of whether or not the name is wrapped"}},"owner()":{"details":"Returns the address of the current owner."},"ownerOf(uint256)":{"params":{"id":"Label as a string of the .eth domain to wrap"},"returns":{"owner":"The owner of the name"}},"recoverFunds(address,address,uint256)":{"details":"The contract is Ownable and only the owner can call the recover function.","params":{"_amount":"The amount of tokens to recover.","_to":"The address to send the tokens to.","_token":"The address of the ERC20 token to recover"}},"registerAndWrapETH2LD(string,address,uint256,address,uint16)":{"details":"Registers a new .eth second-level domain and wraps it.      Only callable by authorised controllers.","params":{"duration":"The duration, in seconds, to register the name for.","label":"The label to register (Eg, \'foo\' for \'foo.eth\').","ownerControlledFuses":"Initial owner-controlled fuses to set","resolver":"The resolver address to set on the ENS registry (optional).","wrappedOwner":"The owner of the wrapped name."},"returns":{"registrarExpiry":"The expiry date of the new name on the .eth registrar, in seconds since the Unix epoch."}},"renew(uint256,uint256)":{"details":"Only callable by authorised controllers.","params":{"duration":"The number of seconds to renew the name for.","tokenId":"The hash of the label to register (eg, `keccak256(\'foo\')`, for \'foo.eth\')."},"returns":{"expires":"The expiry date of the name on the .eth registrar, in seconds since the Unix epoch."}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"See {IERC1155-safeBatchTransferFrom}."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"See {IERC1155-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"setChildFuses(bytes32,bytes32,uint32,uint64)":{"params":{"expiry":"When the name will expire in seconds since the Unix epoch","fuses":"Fuses to burn","labelhash":"Labelhash of the name, e.g. vitalik.xyz would be keccak256(\'vitalik\')","parentNode":"Parent namehash of the name e.g. vitalik.xyz would be namehash(\'xyz\')"}},"setFuses(bytes32,uint16)":{"params":{"node":"Namehash of the name","ownerControlledFuses":"Owner-controlled fuses to burn"},"returns":{"_0":"Old fuses"}},"setMetadataService(address)":{"params":{"_metadataService":"The new metadata service"}},"setRecord(bytes32,address,address,uint64)":{"params":{"node":"Namehash of the name to set a record for","owner":"New owner in the registry","resolver":"Resolver contract","ttl":"Time to live in the registry"}},"setResolver(bytes32,address)":{"params":{"node":"namehash of the name","resolver":"the resolver contract"}},"setSubnodeOwner(bytes32,string,address,uint32,uint64)":{"params":{"expiry":"When the name will expire in seconds since the Unix epoch","fuses":"Initial fuses for the wrapped subdomain","label":"Label of the subdomain as a string","owner":"New owner in the wrapper","parentNode":"Parent namehash of the subdomain"},"returns":{"node":"Namehash of the subdomain"}},"setSubnodeRecord(bytes32,string,address,address,uint64,uint32,uint64)":{"params":{"expiry":"When the name will expire in seconds since the Unix epoch","fuses":"initial fuses for the wrapped subdomain","label":"label of the subdomain as a string","owner":"new owner in the wrapper","parentNode":"parent namehash of the subdomain","resolver":"resolver contract in the registry","ttl":"ttl in the registry"},"returns":{"node":"Namehash of the subdomain"}},"setTTL(bytes32,uint64)":{"params":{"node":"Namehash of the name","ttl":"TTL in the registry"}},"setUpgradeContract(address)":{"details":"The default value of upgradeContract is the 0 address. Use the 0 address at any time to make the contract not upgradable.","params":{"_upgradeAddress":"address of an upgraded contract"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"unwrap(bytes32,bytes32,address)":{"details":"Can be called by the owner in the wrapper or an authorised caller in the wrapper","params":{"controller":"Sets the owner in the registry to this address","labelhash":"Labelhash of the name, e.g. vitalik.xyz would be keccak256(\'vitalik\')","parentNode":"Parent namehash of the name e.g. vitalik.xyz would be namehash(\'xyz\')"}},"unwrapETH2LD(bytes32,address,address)":{"details":"Can be called by the owner in the wrapper or an authorised caller in the wrapper","params":{"controller":"Sets the owner in the registry to this address","labelhash":"Labelhash of the .eth domain","registrant":"Sets the owner in the .eth registrar to this address"}},"upgrade(bytes,bytes)":{"details":"Can be called by the owner or an authorised caller","params":{"extraData":"Extra data to pass to the upgrade contract","name":"The name to upgrade, in DNS format"}},"uri(uint256)":{"params":{"tokenId":"The id of the token"},"returns":{"_0":"string uri of the metadata service"}},"wrap(bytes,address,address)":{"details":"Can be called by the owner in the registry or an authorised caller in the registry","params":{"name":"The name to wrap, in DNS format","resolver":"Resolver contract","wrappedOwner":"Owner of the name in this contract"}},"wrapETH2LD(string,address,uint16,address)":{"details":"Can be called by the owner of the name on the .eth registrar or an authorised caller on the registrar","params":{"label":"Label as a string of the .eth domain to wrap","ownerControlledFuses":"Initial owner-controlled fuses to set","resolver":"Resolver contract address","wrappedOwner":"Owner of the name in this contract"}}},"version":1},"userdoc":{"kind":"user","methods":{"allFusesBurned(bytes32,uint32)":{"notice":"Checks all Fuses in the mask are burned for the node"},"approve(address,uint256)":{"notice":"Approves an address for a name"},"canExtendSubnames(bytes32,address)":{"notice":"Checks if owner/operator or approved by owner"},"canModifyName(bytes32,address)":{"notice":"Checks if owner or operator of the owner"},"extendExpiry(bytes32,bytes32,uint64)":{"notice":"Extends expiry for a name"},"getApproved(uint256)":{"notice":"Gets the owner of a name"},"getData(uint256)":{"notice":"Gets the data for a name"},"isWrapped(bytes32)":{"notice":"Checks if a name is wrapped"},"isWrapped(bytes32,bytes32)":{"notice":"Checks if a name is wrapped in a more gas efficient way"},"ownerOf(uint256)":{"notice":"Gets the owner of a name"},"recoverFunds(address,address,uint256)":{"notice":"Recover ERC20 tokens sent to the contract by mistake."},"renew(uint256,uint256)":{"notice":"Renews a .eth second-level domain."},"setChildFuses(bytes32,bytes32,uint32,uint64)":{"notice":"Sets fuses of a name that you own the parent of"},"setFuses(bytes32,uint16)":{"notice":"Sets fuses of a name"},"setMetadataService(address)":{"notice":"Set the metadata service. Only the owner can do this"},"setRecord(bytes32,address,address,uint64)":{"notice":"Sets records for the name in the ENS Registry"},"setResolver(bytes32,address)":{"notice":"Sets resolver contract in the registry"},"setSubnodeOwner(bytes32,string,address,uint32,uint64)":{"notice":"Sets the subdomain owner in the registry and then wraps the subdomain"},"setSubnodeRecord(bytes32,string,address,address,uint64,uint32,uint64)":{"notice":"Sets the subdomain owner in the registry with records and then wraps the subdomain"},"setTTL(bytes32,uint64)":{"notice":"Sets TTL in the registry"},"setUpgradeContract(address)":{"notice":"Set the address of the upgradeContract of the contract. only admin can do this"},"unwrap(bytes32,bytes32,address)":{"notice":"Unwraps a non .eth domain, of any kind. Could be a DNSSEC name vitalik.xyz or a subdomain"},"unwrapETH2LD(bytes32,address,address)":{"notice":"Unwraps a .eth domain. e.g. vitalik.eth"},"upgrade(bytes,bytes)":{"notice":"Upgrades a domain of any kind. Could be a .eth name vitalik.eth, a DNSSEC name vitalik.xyz, or a subdomain"},"uri(uint256)":{"notice":"Get the metadata uri"},"wrap(bytes,address,address)":{"notice":"Wraps a non .eth domain, of any kind. Could be a DNSSEC name vitalik.xyz or a subdomain"},"wrapETH2LD(string,address,uint16,address)":{"notice":"Wraps a .eth domain, creating a new token and sending the original ERC721 token to this contract"}},"version":1},"storageLayout":{"storage":[{"astId":444,"contract":"contracts/wrapper/NameWrapper.sol:NameWrapper","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":20114,"contract":"contracts/wrapper/NameWrapper.sol:NameWrapper","label":"_tokens","offset":0,"slot":"1","type":"t_mapping(t_uint256,t_uint256)"},{"astId":20120,"contract":"contracts/wrapper/NameWrapper.sol:NameWrapper","label":"_operatorApprovals","offset":0,"slot":"2","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":20124,"contract":"contracts/wrapper/NameWrapper.sol:NameWrapper","label":"_tokenApprovals","offset":0,"slot":"3","type":"t_mapping(t_uint256,t_address)"},{"astId":20045,"contract":"contracts/wrapper/NameWrapper.sol:NameWrapper","label":"controllers","offset":0,"slot":"4","type":"t_mapping(t_address,t_bool)"},{"astId":21586,"contract":"contracts/wrapper/NameWrapper.sol:NameWrapper","label":"metadataService","offset":0,"slot":"5","type":"t_contract(IMetadataService)21088"},{"astId":21590,"contract":"contracts/wrapper/NameWrapper.sol:NameWrapper","label":"names","offset":0,"slot":"6","type":"t_mapping(t_bytes32,t_bytes_storage)"},{"astId":21608,"contract":"contracts/wrapper/NameWrapper.sol:NameWrapper","label":"upgradeContract","offset":0,"slot":"7","type":"t_contract(INameWrapperUpgrade)21480"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_contract(IMetadataService)21088":{"encoding":"inplace","label":"contract IMetadataService","numberOfBytes":"20"},"t_contract(INameWrapperUpgrade)21480":{"encoding":"inplace","label":"contract INameWrapperUpgrade","numberOfBytes":"20"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_bytes32,t_bytes_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}}}')},47026:e=>{"use strict";e.exports=JSON.parse('{"address":"0xE99638b40E4Fff0129D56f03b55b6bbC4BBE49b5","abi":[{"inputs":[{"internalType":"contract ENS","name":"_ens","type":"address"},{"internalType":"contract INameWrapper","name":"wrapperAddress","type":"address"},{"internalType":"address","name":"_trustedETHController","type":"address"},{"internalType":"address","name":"_trustedReverseRegistrar","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes","name":"addressBytes","type":"bytes"}],"name":"InvalidEVMAddress","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"uint256","name":"contentType","type":"uint256"}],"name":"ABIChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"address","name":"a","type":"address"}],"name":"AddrChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"coinType","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"newAddress","type":"bytes"}],"name":"AddressChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"address","name":"delegate","type":"address"},{"indexed":true,"internalType":"bool","name":"approved","type":"bool"}],"name":"Approved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"hash","type":"bytes"}],"name":"ContenthashChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"name","type":"bytes"},{"indexed":false,"internalType":"uint16","name":"resource","type":"uint16"},{"indexed":false,"internalType":"bytes","name":"record","type":"bytes"}],"name":"DNSRecordChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"name","type":"bytes"},{"indexed":false,"internalType":"uint16","name":"resource","type":"uint16"}],"name":"DNSRecordDeleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes","name":"lastzonehash","type":"bytes"},{"indexed":false,"internalType":"bytes","name":"zonehash","type":"bytes"}],"name":"DNSZonehashChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"bytes4","name":"interfaceID","type":"bytes4"},{"indexed":false,"internalType":"address","name":"implementer","type":"address"}],"name":"InterfaceChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"string","name":"name","type":"string"}],"name":"NameChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"x","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"y","type":"bytes32"}],"name":"PubkeyChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":true,"internalType":"string","name":"indexedKey","type":"string"},{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"string","name":"value","type":"string"}],"name":"TextChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"node","type":"bytes32"},{"indexed":false,"internalType":"uint64","name":"newVersion","type":"uint64"}],"name":"VersionChanged","type":"event"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"contentTypes","type":"uint256"}],"name":"ABI","outputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"addr","outputs":[{"internalType":"address payable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"coinType","type":"uint256"}],"name":"addr","outputs":[{"internalType":"bytes","name":"addressBytes","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"delegate","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"clearRecords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"contenthash","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"},{"internalType":"uint16","name":"resource","type":"uint16"}],"name":"dnsRecord","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"coinType","type":"uint256"}],"name":"hasAddr","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"name","type":"bytes32"}],"name":"hasDNSRecords","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"interfaceImplementer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"delegate","type":"address"}],"name":"isApprovedFor","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicall","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"nodehash","type":"bytes32"},{"internalType":"bytes[]","name":"data","type":"bytes[]"}],"name":"multicallWithNodeCheck","outputs":[{"internalType":"bytes[]","name":"results","type":"bytes[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"pubkey","outputs":[{"internalType":"bytes32","name":"x","type":"bytes32"},{"internalType":"bytes32","name":"y","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"recordVersions","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"contentType","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"setABI","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"uint256","name":"coinType","type":"uint256"},{"internalType":"bytes","name":"addressBytes","type":"bytes"}],"name":"setAddr","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"address","name":"_addr","type":"address"}],"name":"setAddr","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes","name":"hash","type":"bytes"}],"name":"setContenthash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"setDNSRecords","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes4","name":"interfaceID","type":"bytes4"},{"internalType":"address","name":"implementer","type":"address"}],"name":"setInterface","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"newName","type":"string"}],"name":"setName","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes32","name":"x","type":"bytes32"},{"internalType":"bytes32","name":"y","type":"bytes32"}],"name":"setPubkey","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"key","type":"string"},{"internalType":"string","name":"value","type":"string"}],"name":"setText","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"bytes","name":"hash","type":"bytes"}],"name":"setZonehash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceID","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"},{"internalType":"string","name":"key","type":"string"}],"name":"text","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"node","type":"bytes32"}],"name":"zonehash","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"}],"transactionHash":"0xc32e1b668f2b54072ad52a8f1c240c2d6d045a4a4e5bccf0783d4cf5159601fe","receipt":{"to":null,"from":"0x0F32b753aFc8ABad9Ca6fE589F707755f4df2353","contractAddress":"0xE99638b40E4Fff0129D56f03b55b6bbC4BBE49b5","transactionIndex":91,"gasUsed":"3245285","logsBloom":"0xblockHash":"0xe7a054cdd5aa5d82d7c74e111dbb1441961b638973aa4f1b7ce8dcf7eb14e720","transactionHash":"0xc32e1b668f2b54072ad52a8f1c240c2d6d045a4a4e5bccf0783d4cf5159601fe","logs":[{"transactionIndex":91,"blockNumber":8580001,"transactionHash":"0xc32e1b668f2b54072ad52a8f1c240c2d6d045a4a4e5bccf0783d4cf5159601fe","address":"0xA0a1AbcDAe1a2a4A2EF8e9113Ff0e02DD81DC0C6","topics":["0x6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e92","0x000000000000000000000000e99638b40e4fff0129d56f03b55b6bbc4bbe49b5","0xc80503aa696a6808506ee7ad5a6ac5592bdd9b82df4be83b7878d4f021211078"],"data":"0x","logIndex":134,"blockHash":"0xe7a054cdd5aa5d82d7c74e111dbb1441961b638973aa4f1b7ce8dcf7eb14e720"},{"transactionIndex":91,"blockNumber":8580001,"transactionHash":"0xc32e1b668f2b54072ad52a8f1c240c2d6d045a4a4e5bccf0783d4cf5159601fe","address":"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e","topics":["0xce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e82","0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2","0x90c0ba0bf94c247a45dd232535f5c24affdcc31676849cd7ff4993579ed74ce8"],"data":"0x0000000000000000000000000f32b753afc8abad9ca6fe589f707755f4df2353","logIndex":135,"blockHash":"0xe7a054cdd5aa5d82d7c74e111dbb1441961b638973aa4f1b7ce8dcf7eb14e720"},{"transactionIndex":91,"blockNumber":8580001,"transactionHash":"0xc32e1b668f2b54072ad52a8f1c240c2d6d045a4a4e5bccf0783d4cf5159601fe","address":"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e","topics":["0x335721b01866dc23fbee8b6b2c7b1e14d6f05c28cd35a2c934239f94095602a0","0xc80503aa696a6808506ee7ad5a6ac5592bdd9b82df4be83b7878d4f021211078"],"data":"0x000000000000000000000000519f981afc637fdad26c8669b0991b9977b0a216","logIndex":136,"blockHash":"0xe7a054cdd5aa5d82d7c74e111dbb1441961b638973aa4f1b7ce8dcf7eb14e720"}],"blockNumber":8580001,"cumulativeGasUsed":"11373920","status":1,"byzantium":true},"args":["0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e","0x0635513f179D50A207757E05759CbD106d7dFcE8","0xfb3cE5D01e0f33f41DbB39035dB9745962F1f968","0xA0a1AbcDAe1a2a4A2EF8e9113Ff0e02DD81DC0C6"],"numDeployments":3,"solcInputHash":"53607203823ca934dc777094bb2d514e","metadata":"{\\"compiler\\":{\\"version\\":\\"0.8.26+commit.8a97fa7a\\"},\\"language\\":\\"Solidity\\",\\"output\\":{\\"abi\\":[{\\"inputs\\":[{\\"internalType\\":\\"contract ENS\\",\\"name\\":\\"_ens\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"contract INameWrapper\\",\\"name\\":\\"wrapperAddress\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_trustedETHController\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_trustedReverseRegistrar\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"constructor\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"addressBytes\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"InvalidEVMAddress\\",\\"type\\":\\"error\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":true,\\"internalType\\":\\"uint256\\",\\"name\\":\\"contentType\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"ABIChanged\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"a\\",\\"type\\":\\"address\\"}],\\"name\\":\\"AddrChanged\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint256\\",\\"name\\":\\"coinType\\",\\"type\\":\\"uint256\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"newAddress\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"AddressChanged\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"indexed\\":false,\\"internalType\\":\\"bool\\",\\"name\\":\\"approved\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"ApprovalForAll\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":true,\\"internalType\\":\\"address\\",\\"name\\":\\"delegate\\",\\"type\\":\\"address\\"},{\\"indexed\\":true,\\"internalType\\":\\"bool\\",\\"name\\":\\"approved\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"Approved\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"hash\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"ContenthashChanged\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"name\\",\\"type\\":\\"bytes\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint16\\",\\"name\\":\\"resource\\",\\"type\\":\\"uint16\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"record\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"DNSRecordChanged\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"name\\",\\"type\\":\\"bytes\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint16\\",\\"name\\":\\"resource\\",\\"type\\":\\"uint16\\"}],\\"name\\":\\"DNSRecordDeleted\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"lastzonehash\\",\\"type\\":\\"bytes\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes\\",\\"name\\":\\"zonehash\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"DNSZonehashChanged\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":true,\\"internalType\\":\\"bytes4\\",\\"name\\":\\"interfaceID\\",\\"type\\":\\"bytes4\\"},{\\"indexed\\":false,\\"internalType\\":\\"address\\",\\"name\\":\\"implementer\\",\\"type\\":\\"address\\"}],\\"name\\":\\"InterfaceChanged\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"name\\",\\"type\\":\\"string\\"}],\\"name\\":\\"NameChanged\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"x\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":false,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"y\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"PubkeyChanged\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":true,\\"internalType\\":\\"string\\",\\"name\\":\\"indexedKey\\",\\"type\\":\\"string\\"},{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"key\\",\\"type\\":\\"string\\"},{\\"indexed\\":false,\\"internalType\\":\\"string\\",\\"name\\":\\"value\\",\\"type\\":\\"string\\"}],\\"name\\":\\"TextChanged\\",\\"type\\":\\"event\\"},{\\"anonymous\\":false,\\"inputs\\":[{\\"indexed\\":true,\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"indexed\\":false,\\"internalType\\":\\"uint64\\",\\"name\\":\\"newVersion\\",\\"type\\":\\"uint64\\"}],\\"name\\":\\"VersionChanged\\",\\"type\\":\\"event\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"contentTypes\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"ABI\\",\\"outputs\\":[{\\"internalType\\":\\"uint256\\",\\"name\\":\\"\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"addr\\",\\"outputs\\":[{\\"internalType\\":\\"address payable\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"coinType\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"addr\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"addressBytes\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"delegate\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"approved\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"approve\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"clearRecords\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"contenthash\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"name\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint16\\",\\"name\\":\\"resource\\",\\"type\\":\\"uint16\\"}],\\"name\\":\\"dnsRecord\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"coinType\\",\\"type\\":\\"uint256\\"}],\\"name\\":\\"hasAddr\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"name\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"hasDNSRecords\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"bytes4\\",\\"name\\":\\"interfaceID\\",\\"type\\":\\"bytes4\\"}],\\"name\\":\\"interfaceImplementer\\",\\"outputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"\\",\\"type\\":\\"address\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"owner\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"delegate\\",\\"type\\":\\"address\\"}],\\"name\\":\\"isApprovedFor\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"account\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"}],\\"name\\":\\"isApprovedForAll\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes[]\\",\\"name\\":\\"data\\",\\"type\\":\\"bytes[]\\"}],\\"name\\":\\"multicall\\",\\"outputs\\":[{\\"internalType\\":\\"bytes[]\\",\\"name\\":\\"results\\",\\"type\\":\\"bytes[]\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"nodehash\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"bytes[]\\",\\"name\\":\\"data\\",\\"type\\":\\"bytes[]\\"}],\\"name\\":\\"multicallWithNodeCheck\\",\\"outputs\\":[{\\"internalType\\":\\"bytes[]\\",\\"name\\":\\"results\\",\\"type\\":\\"bytes[]\\"}],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"name\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"pubkey\\",\\"outputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"x\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"y\\",\\"type\\":\\"bytes32\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"recordVersions\\",\\"outputs\\":[{\\"internalType\\":\\"uint64\\",\\"name\\":\\"\\",\\"type\\":\\"uint64\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"contentType\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"data\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"setABI\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"uint256\\",\\"name\\":\\"coinType\\",\\"type\\":\\"uint256\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"addressBytes\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"setAddr\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"_addr\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setAddr\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"address\\",\\"name\\":\\"operator\\",\\"type\\":\\"address\\"},{\\"internalType\\":\\"bool\\",\\"name\\":\\"approved\\",\\"type\\":\\"bool\\"}],\\"name\\":\\"setApprovalForAll\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"hash\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"setContenthash\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"data\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"setDNSRecords\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"bytes4\\",\\"name\\":\\"interfaceID\\",\\"type\\":\\"bytes4\\"},{\\"internalType\\":\\"address\\",\\"name\\":\\"implementer\\",\\"type\\":\\"address\\"}],\\"name\\":\\"setInterface\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"newName\\",\\"type\\":\\"string\\"}],\\"name\\":\\"setName\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"x\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"y\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"setPubkey\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"key\\",\\"type\\":\\"string\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"value\\",\\"type\\":\\"string\\"}],\\"name\\":\\"setText\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"bytes\\",\\"name\\":\\"hash\\",\\"type\\":\\"bytes\\"}],\\"name\\":\\"setZonehash\\",\\"outputs\\":[],\\"stateMutability\\":\\"nonpayable\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes4\\",\\"name\\":\\"interfaceID\\",\\"type\\":\\"bytes4\\"}],\\"name\\":\\"supportsInterface\\",\\"outputs\\":[{\\"internalType\\":\\"bool\\",\\"name\\":\\"\\",\\"type\\":\\"bool\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"},{\\"internalType\\":\\"string\\",\\"name\\":\\"key\\",\\"type\\":\\"string\\"}],\\"name\\":\\"text\\",\\"outputs\\":[{\\"internalType\\":\\"string\\",\\"name\\":\\"\\",\\"type\\":\\"string\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"},{\\"inputs\\":[{\\"internalType\\":\\"bytes32\\",\\"name\\":\\"node\\",\\"type\\":\\"bytes32\\"}],\\"name\\":\\"zonehash\\",\\"outputs\\":[{\\"internalType\\":\\"bytes\\",\\"name\\":\\"\\",\\"type\\":\\"bytes\\"}],\\"stateMutability\\":\\"view\\",\\"type\\":\\"function\\"}],\\"devdoc\\":{\\"errors\\":{\\"InvalidEVMAddress(bytes)\\":[{\\"details\\":\\"Error selector: `0x8d666f60`\\"}]},\\"kind\\":\\"dev\\",\\"methods\\":{\\"ABI(bytes32,uint256)\\":{\\"params\\":{\\"contentTypes\\":\\"A bitwise OR of the ABI formats accepted by the caller.\\",\\"node\\":\\"The ENS node to query\\"},\\"returns\\":{\\"_0\\":\\"contentType The content type of the return value\\",\\"_1\\":\\"data The ABI data\\"}},\\"addr(bytes32)\\":{\\"params\\":{\\"node\\":\\"The node to query.\\"},\\"returns\\":{\\"_0\\":\\"The associated address.\\"}},\\"addr(bytes32,uint256)\\":{\\"params\\":{\\"coinType\\":\\"The coin type.\\",\\"node\\":\\"The node to query.\\"},\\"returns\\":{\\"addressBytes\\":\\"The assocated address.\\"}},\\"approve(bytes32,address,bool)\\":{\\"details\\":\\"Approve a delegate to be able to updated records on a node.\\"},\\"clearRecords(bytes32)\\":{\\"params\\":{\\"node\\":\\"The node to update.\\"}},\\"contenthash(bytes32)\\":{\\"params\\":{\\"node\\":\\"The ENS node to query.\\"},\\"returns\\":{\\"_0\\":\\"The associated contenthash.\\"}},\\"dnsRecord(bytes32,bytes32,uint16)\\":{\\"params\\":{\\"name\\":\\"the keccak-256 hash of the fully-qualified name for which to fetch the record\\",\\"node\\":\\"the namehash of the node for which to fetch the record\\",\\"resource\\":\\"the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\"},\\"returns\\":{\\"_0\\":\\"the DNS record in wire format if present, otherwise empty\\"}},\\"hasAddr(bytes32,uint256)\\":{\\"params\\":{\\"coinType\\":\\"The coin type.\\",\\"node\\":\\"The node to query.\\"},\\"returns\\":{\\"_0\\":\\"True if the associated address is not empty.\\"}},\\"hasDNSRecords(bytes32,bytes32)\\":{\\"params\\":{\\"name\\":\\"the namehash of the node for which to check the records\\",\\"node\\":\\"the namehash of the node for which to check the records\\"}},\\"interfaceImplementer(bytes32,bytes4)\\":{\\"params\\":{\\"interfaceID\\":\\"The EIP 165 interface ID to check for.\\",\\"node\\":\\"The ENS node to query.\\"},\\"returns\\":{\\"_0\\":\\"The address that implements this interface, or 0 if the interface is unsupported.\\"}},\\"isApprovedFor(address,bytes32,address)\\":{\\"details\\":\\"Check to see if the delegate has been approved by the owner for the node.\\"},\\"isApprovedForAll(address,address)\\":{\\"details\\":\\"See {IERC1155-isApprovedForAll}.\\"},\\"name(bytes32)\\":{\\"params\\":{\\"node\\":\\"The ENS node to query.\\"},\\"returns\\":{\\"_0\\":\\"The associated name.\\"}},\\"pubkey(bytes32)\\":{\\"params\\":{\\"node\\":\\"The ENS node to query\\"},\\"returns\\":{\\"x\\":\\"The X coordinate of the curve point for the public key.\\",\\"y\\":\\"The Y coordinate of the curve point for the public key.\\"}},\\"setABI(bytes32,uint256,bytes)\\":{\\"params\\":{\\"contentType\\":\\"The content type of the ABI\\",\\"data\\":\\"The ABI data.\\",\\"node\\":\\"The node to update.\\"}},\\"setAddr(bytes32,address)\\":{\\"params\\":{\\"_addr\\":\\"The address to set.\\",\\"node\\":\\"The node to update.\\"}},\\"setAddr(bytes32,uint256,bytes)\\":{\\"params\\":{\\"addressBytes\\":\\"The address to set.\\",\\"coinType\\":\\"The coin type.\\",\\"node\\":\\"The node to update.\\"}},\\"setApprovalForAll(address,bool)\\":{\\"details\\":\\"See {IERC1155-setApprovalForAll}.\\"},\\"setContenthash(bytes32,bytes)\\":{\\"params\\":{\\"hash\\":\\"The contenthash to set\\",\\"node\\":\\"The node to update.\\"}},\\"setDNSRecords(bytes32,bytes)\\":{\\"params\\":{\\"data\\":\\"the DNS wire format records to set\\",\\"node\\":\\"the namehash of the node for which to set the records\\"}},\\"setInterface(bytes32,bytes4,address)\\":{\\"params\\":{\\"implementer\\":\\"The address of a contract that implements this interface for this node.\\",\\"interfaceID\\":\\"The EIP 165 interface ID.\\",\\"node\\":\\"The node to update.\\"}},\\"setName(bytes32,string)\\":{\\"params\\":{\\"node\\":\\"The node to update.\\"}},\\"setPubkey(bytes32,bytes32,bytes32)\\":{\\"params\\":{\\"node\\":\\"The ENS node to query\\",\\"x\\":\\"the X coordinate of the curve point for the public key.\\",\\"y\\":\\"the Y coordinate of the curve point for the public key.\\"}},\\"setText(bytes32,string,string)\\":{\\"params\\":{\\"key\\":\\"The key to set.\\",\\"node\\":\\"The node to update.\\",\\"value\\":\\"The text data value to set.\\"}},\\"setZonehash(bytes32,bytes)\\":{\\"params\\":{\\"hash\\":\\"The zonehash to set\\",\\"node\\":\\"The node to update.\\"}},\\"text(bytes32,string)\\":{\\"params\\":{\\"key\\":\\"The text data key to query.\\",\\"node\\":\\"The ENS node to query.\\"},\\"returns\\":{\\"_0\\":\\"The associated text data.\\"}},\\"zonehash(bytes32)\\":{\\"params\\":{\\"node\\":\\"The ENS node to query.\\"},\\"returns\\":{\\"_0\\":\\"The associated contenthash.\\"}}},\\"version\\":1},\\"userdoc\\":{\\"errors\\":{\\"InvalidEVMAddress(bytes)\\":[{\\"notice\\":\\"The supplied address could not be converted to `address`.\\"}]},\\"kind\\":\\"user\\",\\"methods\\":{\\"ABI(bytes32,uint256)\\":{\\"notice\\":\\"Returns the ABI associated with an ENS node. Defined in EIP205.\\"},\\"addr(bytes32)\\":{\\"notice\\":\\"Get `addr(60)` as `address` of the associated ENS node.\\"},\\"addr(bytes32,uint256)\\":{\\"notice\\":\\"Get the address for coin type of the associated ENS node.         If coin type is EVM and empty, defaults to `addr(COIN_TYPE_DEFAULT)`.\\"},\\"clearRecords(bytes32)\\":{\\"notice\\":\\"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry.\\"},\\"contenthash(bytes32)\\":{\\"notice\\":\\"Returns the contenthash associated with an ENS node.\\"},\\"dnsRecord(bytes32,bytes32,uint16)\\":{\\"notice\\":\\"Obtain a DNS record.\\"},\\"hasAddr(bytes32,uint256)\\":{\\"notice\\":\\"Determine if an addresss is stored for the coin type of the associated ENS node.\\"},\\"hasDNSRecords(bytes32,bytes32)\\":{\\"notice\\":\\"Check if a given node has records.\\"},\\"interfaceImplementer(bytes32,bytes4)\\":{\\"notice\\":\\"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned.\\"},\\"name(bytes32)\\":{\\"notice\\":\\"Returns the name associated with an ENS node, for reverse records. Defined in EIP181.\\"},\\"pubkey(bytes32)\\":{\\"notice\\":\\"Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619.\\"},\\"setABI(bytes32,uint256,bytes)\\":{\\"notice\\":\\"Sets the ABI associated with an ENS node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string.\\"},\\"setAddr(bytes32,address)\\":{\\"notice\\":\\"Set `addr(60)` of the associated ENS node.         `address(0)` is stored as `new bytes(20)`.\\"},\\"setAddr(bytes32,uint256,bytes)\\":{\\"notice\\":\\"Set the address for coin type of the associated ENS node.         Reverts `InvalidEVMAddress` if coin type is EVM and not 0 or 20 bytes.\\"},\\"setContenthash(bytes32,bytes)\\":{\\"notice\\":\\"Sets the contenthash associated with an ENS node. May only be called by the owner of that node in the ENS registry.\\"},\\"setDNSRecords(bytes32,bytes)\\":{\\"notice\\":\\"Set one or more DNS records.  Records are supplied in wire-format. Records with the same node/name/resource must be supplied one after the other to ensure the data is updated correctly. For example, if the data was supplied:     a.example.com IN A 1.2.3.4     a.example.com IN A 5.6.7.8     www.example.com IN CNAME a.example.com. then this would store the two A records for a.example.com correctly as a single RRSET, however if the data was supplied:     a.example.com IN A 1.2.3.4     www.example.com IN CNAME a.example.com.     a.example.com IN A 5.6.7.8 then this would store the first A record, the CNAME, then the second A record which would overwrite the first.\\"},\\"setInterface(bytes32,bytes4,address)\\":{\\"notice\\":\\"Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\"},\\"setName(bytes32,string)\\":{\\"notice\\":\\"Sets the name associated with an ENS node, for reverse records. May only be called by the owner of that node in the ENS registry.\\"},\\"setPubkey(bytes32,bytes32,bytes32)\\":{\\"notice\\":\\"Sets the SECP256k1 public key associated with an ENS node.\\"},\\"setText(bytes32,string,string)\\":{\\"notice\\":\\"Sets the text data associated with an ENS node and key. May only be called by the owner of that node in the ENS registry.\\"},\\"setZonehash(bytes32,bytes)\\":{\\"notice\\":\\"setZonehash sets the hash for the zone. May only be called by the owner of that node in the ENS registry.\\"},\\"text(bytes32,string)\\":{\\"notice\\":\\"Returns the text data associated with an ENS node and key.\\"},\\"zonehash(bytes32)\\":{\\"notice\\":\\"zonehash obtains the hash for the zone.\\"}},\\"notice\\":\\"A simple resolver anyone can use; only allows the owner of a node to set its address.\\",\\"version\\":1}},\\"settings\\":{\\"compilationTarget\\":{\\"contracts/resolvers/PublicResolver.sol\\":\\"PublicResolver\\"},\\"evmVersion\\":\\"paris\\",\\"libraries\\":{},\\"metadata\\":{\\"bytecodeHash\\":\\"ipfs\\",\\"useLiteralContent\\":true},\\"optimizer\\":{\\"enabled\\":true,\\"runs\\":1000000},\\"remappings\\":[]},\\"sources\\":{\\"@ensdomains/buffer/contracts/Buffer.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: BSD-2-Clause\\\\npragma solidity ^0.8.4;\\\\n\\\\n/**\\\\n* @dev A library for working with mutable byte buffers in Solidity.\\\\n*\\\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\\\n* for appending to them. At any time you can fetch a bytes object containing the\\\\n* current contents of the buffer. The bytes object should not be stored between\\\\n* operations, as it may change due to resizing of the buffer.\\\\n*/\\\\nlibrary Buffer {\\\\n    /**\\\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\\\n    *      a capacity. The capacity may be longer than the current value, in\\\\n    *      which case it can be extended without the need to allocate more memory.\\\\n    */\\\\n    struct buffer {\\\\n        bytes buf;\\\\n        uint capacity;\\\\n    }\\\\n\\\\n    /**\\\\n    * @dev Initializes a buffer with an initial capacity.\\\\n    * @param buf The buffer to initialize.\\\\n    * @param capacity The number of bytes of space to allocate the buffer.\\\\n    * @return The buffer, for chaining.\\\\n    */\\\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\\\n        if (capacity % 32 != 0) {\\\\n            capacity += 32 - (capacity % 32);\\\\n        }\\\\n        // Allocate space for the buffer data\\\\n        buf.capacity = capacity;\\\\n        assembly {\\\\n            let ptr := mload(0x40)\\\\n            mstore(buf, ptr)\\\\n            mstore(ptr, 0)\\\\n            let fpm := add(32, add(ptr, capacity))\\\\n            if lt(fpm, ptr) {\\\\n                revert(0, 0)\\\\n            }\\\\n            mstore(0x40, fpm)\\\\n        }\\\\n        return buf;\\\\n    }\\\\n\\\\n    /**\\\\n    * @dev Initializes a new buffer from an existing bytes object.\\\\n    *      Changes to the buffer may mutate the original value.\\\\n    * @param b The bytes object to initialize the buffer with.\\\\n    * @return A new buffer.\\\\n    */\\\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\\\n        buffer memory buf;\\\\n        buf.buf = b;\\\\n        buf.capacity = b.length;\\\\n        return buf;\\\\n    }\\\\n\\\\n    function resize(buffer memory buf, uint capacity) private pure {\\\\n        bytes memory oldbuf = buf.buf;\\\\n        init(buf, capacity);\\\\n        append(buf, oldbuf);\\\\n    }\\\\n\\\\n    /**\\\\n    * @dev Sets buffer length to 0.\\\\n    * @param buf The buffer to truncate.\\\\n    * @return The original buffer, for chaining..\\\\n    */\\\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\\\n        assembly {\\\\n            let bufptr := mload(buf)\\\\n            mstore(bufptr, 0)\\\\n        }\\\\n        return buf;\\\\n    }\\\\n\\\\n    /**\\\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\\\n    *      the capacity of the buffer.\\\\n    * @param buf The buffer to append to.\\\\n    * @param data The data to append.\\\\n    * @param len The number of bytes to copy.\\\\n    * @return The original buffer, for chaining.\\\\n    */\\\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\\\n        require(len <= data.length);\\\\n\\\\n        uint off = buf.buf.length;\\\\n        uint newCapacity = off + len;\\\\n        if (newCapacity > buf.capacity) {\\\\n            resize(buf, newCapacity * 2);\\\\n        }\\\\n\\\\n        uint dest;\\\\n        uint src;\\\\n        assembly {\\\\n            // Memory address of the buffer data\\\\n            let bufptr := mload(buf)\\\\n            // Length of existing buffer data\\\\n            let buflen := mload(bufptr)\\\\n            // Start address = buffer address + offset + sizeof(buffer length)\\\\n            dest := add(add(bufptr, 32), off)\\\\n            // Update buffer length if we\'re extending it\\\\n            if gt(newCapacity, buflen) {\\\\n                mstore(bufptr, newCapacity)\\\\n            }\\\\n            src := add(data, 32)\\\\n        }\\\\n\\\\n        // Copy word-length chunks while possible\\\\n        for (; len >= 32; len -= 32) {\\\\n            assembly {\\\\n                mstore(dest, mload(src))\\\\n            }\\\\n            dest += 32;\\\\n            src += 32;\\\\n        }\\\\n\\\\n        // Copy remaining bytes\\\\n        unchecked {\\\\n            uint mask = (256 ** (32 - len)) - 1;\\\\n            assembly {\\\\n                let srcpart := and(mload(src), not(mask))\\\\n                let destpart := and(mload(dest), mask)\\\\n                mstore(dest, or(destpart, srcpart))\\\\n            }\\\\n        }\\\\n\\\\n        return buf;\\\\n    }\\\\n\\\\n    /**\\\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\\\n    *      the capacity of the buffer.\\\\n    * @param buf The buffer to append to.\\\\n    * @param data The data to append.\\\\n    * @return The original buffer, for chaining.\\\\n    */\\\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\\\n        return append(buf, data, data.length);\\\\n    }\\\\n\\\\n    /**\\\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\\\n    *      capacity of the buffer.\\\\n    * @param buf The buffer to append to.\\\\n    * @param data The data to append.\\\\n    * @return The original buffer, for chaining.\\\\n    */\\\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\\\n        uint off = buf.buf.length;\\\\n        uint offPlusOne = off + 1;\\\\n        if (off >= buf.capacity) {\\\\n            resize(buf, offPlusOne * 2);\\\\n        }\\\\n\\\\n        assembly {\\\\n            // Memory address of the buffer data\\\\n            let bufptr := mload(buf)\\\\n            // Address = buffer address + sizeof(buffer length) + off\\\\n            let dest := add(add(bufptr, off), 32)\\\\n            mstore8(dest, data)\\\\n            // Update buffer length if we extended it\\\\n            if gt(offPlusOne, mload(bufptr)) {\\\\n                mstore(bufptr, offPlusOne)\\\\n            }\\\\n        }\\\\n\\\\n        return buf;\\\\n    }\\\\n\\\\n    /**\\\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\\\n    *      exceed the capacity of the buffer.\\\\n    * @param buf The buffer to append to.\\\\n    * @param data The data to append.\\\\n    * @param len The number of bytes to write (left-aligned).\\\\n    * @return The original buffer, for chaining.\\\\n    */\\\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\\\n        uint off = buf.buf.length;\\\\n        uint newCapacity = len + off;\\\\n        if (newCapacity > buf.capacity) {\\\\n            resize(buf, newCapacity * 2);\\\\n        }\\\\n\\\\n        unchecked {\\\\n            uint mask = (256 ** len) - 1;\\\\n            // Right-align data\\\\n            data = data >> (8 * (32 - len));\\\\n            assembly {\\\\n                // Memory address of the buffer data\\\\n                let bufptr := mload(buf)\\\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\\\n                let dest := add(bufptr, newCapacity)\\\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\\\n                // Update buffer length if we extended it\\\\n                if gt(newCapacity, mload(bufptr)) {\\\\n                    mstore(bufptr, newCapacity)\\\\n                }\\\\n            }\\\\n        }\\\\n        return buf;\\\\n    }\\\\n\\\\n    /**\\\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\\\n    *      the capacity of the buffer.\\\\n    * @param buf The buffer to append to.\\\\n    * @param data The data to append.\\\\n    * @return The original buffer, for chhaining.\\\\n    */\\\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\\\n        return append(buf, bytes32(data), 20);\\\\n    }\\\\n\\\\n    /**\\\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\\\n    *      the capacity of the buffer.\\\\n    * @param buf The buffer to append to.\\\\n    * @param data The data to append.\\\\n    * @return The original buffer, for chaining.\\\\n    */\\\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\\\n        return append(buf, data, 32);\\\\n    }\\\\n\\\\n    /**\\\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\\\n     *      exceed the capacity of the buffer.\\\\n     * @param buf The buffer to append to.\\\\n     * @param data The data to append.\\\\n     * @param len The number of bytes to write (right-aligned).\\\\n     * @return The original buffer.\\\\n     */\\\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\\\n        uint off = buf.buf.length;\\\\n        uint newCapacity = len + off;\\\\n        if (newCapacity > buf.capacity) {\\\\n            resize(buf, newCapacity * 2);\\\\n        }\\\\n\\\\n        uint mask = (256 ** len) - 1;\\\\n        assembly {\\\\n            // Memory address of the buffer data\\\\n            let bufptr := mload(buf)\\\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\\\n            let dest := add(bufptr, newCapacity)\\\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\\\n            // Update buffer length if we extended it\\\\n            if gt(newCapacity, mload(bufptr)) {\\\\n                mstore(bufptr, newCapacity)\\\\n            }\\\\n        }\\\\n        return buf;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd6dd3b0b327288f8e1b711a609f4040fea602e2ad4bba9febdf2f33b4e56eb0c\\",\\"license\\":\\"BSD-2-Clause\\"},\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../../utils/introspection/IERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\\\n *\\\\n * _Available since v3.1._\\\\n */\\\\ninterface IERC1155 is IERC165 {\\\\n    /**\\\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\\\n     */\\\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\\\n\\\\n    /**\\\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\\\n     * transfers.\\\\n     */\\\\n    event TransferBatch(\\\\n        address indexed operator,\\\\n        address indexed from,\\\\n        address indexed to,\\\\n        uint256[] ids,\\\\n        uint256[] values\\\\n    );\\\\n\\\\n    /**\\\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\\\n     * `approved`.\\\\n     */\\\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\\\n\\\\n    /**\\\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\\\n     *\\\\n     * If an {URI} event was emitted for `id`, the standard\\\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\\\n     * returned by {IERC1155MetadataURI-uri}.\\\\n     */\\\\n    event URI(string value, uint256 indexed id);\\\\n\\\\n    /**\\\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `account` cannot be the zero address.\\\\n     */\\\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\\\n\\\\n    /**\\\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `accounts` and `ids` must have the same length.\\\\n     */\\\\n    function balanceOfBatch(\\\\n        address[] calldata accounts,\\\\n        uint256[] calldata ids\\\\n    ) external view returns (uint256[] memory);\\\\n\\\\n    /**\\\\n     * @dev Grants or revokes permission to `operator` to transfer the caller\'s tokens, according to `approved`,\\\\n     *\\\\n     * Emits an {ApprovalForAll} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `operator` cannot be the caller.\\\\n     */\\\\n    function setApprovalForAll(address operator, bool approved) external;\\\\n\\\\n    /**\\\\n     * @dev Returns true if `operator` is approved to transfer ``account``\'s tokens.\\\\n     *\\\\n     * See {setApprovalForAll}.\\\\n     */\\\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\\\n\\\\n    /**\\\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\\\n     *\\\\n     * Emits a {TransferSingle} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `to` cannot be the zero address.\\\\n     * - If the caller is not `from`, it must have been approved to spend ``from``\'s tokens via {setApprovalForAll}.\\\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\\\n     * acceptance magic value.\\\\n     */\\\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\\\n\\\\n    /**\\\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\\\n     *\\\\n     * Emits a {TransferBatch} event.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `ids` and `amounts` must have the same length.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\\\n     * acceptance magic value.\\\\n     */\\\\n    function safeBatchTransferFrom(\\\\n        address from,\\\\n        address to,\\\\n        uint256[] calldata ids,\\\\n        uint256[] calldata amounts,\\\\n        bytes calldata data\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0xcab667ddad478ff0d39c2053ca77fac778af8483c18ab07d810277b4216fd582\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"../../utils/introspection/IERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Required interface of an ERC721 compliant contract.\\\\n */\\\\ninterface IERC721 is IERC165 {\\\\n    /**\\\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\\\n     */\\\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\\\n     */\\\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\\\n\\\\n    /**\\\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\\\n     */\\\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\\\n\\\\n    /**\\\\n     * @dev Returns the number of tokens in ``owner``\'s account.\\\\n     */\\\\n    function balanceOf(address owner) external view returns (uint256 balance);\\\\n\\\\n    /**\\\\n     * @dev Returns the owner of the `tokenId` token.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must exist.\\\\n     */\\\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\\\n\\\\n    /**\\\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `from` cannot be the zero address.\\\\n     * - `to` cannot be the zero address.\\\\n     * - `tokenId` token must exist and be owned by `from`.\\\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\\\n\\\\n    /**\\\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `from` cannot be the zero address.\\\\n     * - `to` cannot be the zero address.\\\\n     * - `tokenId` token must exist and be owned by `from`.\\\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\\\n\\\\n    /**\\\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\\\n     *\\\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `from` cannot be the zero address.\\\\n     * - `to` cannot be the zero address.\\\\n     * - `tokenId` token must be owned by `from`.\\\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\\\n     *\\\\n     * Emits a {Transfer} event.\\\\n     */\\\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\\\n\\\\n    /**\\\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\\\n     * The approval is cleared when the token is transferred.\\\\n     *\\\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The caller must own the token or be an approved operator.\\\\n     * - `tokenId` must exist.\\\\n     *\\\\n     * Emits an {Approval} event.\\\\n     */\\\\n    function approve(address to, uint256 tokenId) external;\\\\n\\\\n    /**\\\\n     * @dev Approve or remove `operator` as an operator for the caller.\\\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - The `operator` cannot be the caller.\\\\n     *\\\\n     * Emits an {ApprovalForAll} event.\\\\n     */\\\\n    function setApprovalForAll(address operator, bool approved) external;\\\\n\\\\n    /**\\\\n     * @dev Returns the account approved for `tokenId` token.\\\\n     *\\\\n     * Requirements:\\\\n     *\\\\n     * - `tokenId` must exist.\\\\n     */\\\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\\\n\\\\n    /**\\\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\\\n     *\\\\n     * See {setApprovalForAll}\\\\n     */\\\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport \\\\\\"./IERC165.sol\\\\\\";\\\\n\\\\n/**\\\\n * @dev Implementation of the {IERC165} interface.\\\\n *\\\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\\\n * for the additional interface id that will be supported. For example:\\\\n *\\\\n * ```solidity\\\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\\\n * }\\\\n * ```\\\\n *\\\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\\\n */\\\\nabstract contract ERC165 is IERC165 {\\\\n    /**\\\\n     * @dev See {IERC165-supportsInterface}.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\\\n        return interfaceId == type(IERC165).interfaceId;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\\",\\"license\\":\\"MIT\\"},\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\\\n\\\\npragma solidity ^0.8.0;\\\\n\\\\n/**\\\\n * @dev Interface of the ERC165 standard, as defined in the\\\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\\\n *\\\\n * Implementers can declare support of contract interfaces, which can then be\\\\n * queried by others ({ERC165Checker}).\\\\n *\\\\n * For an implementation, see {ERC165}.\\\\n */\\\\ninterface IERC165 {\\\\n    /**\\\\n     * @dev Returns true if this contract implements the interface defined by\\\\n     * `interfaceId`. See the corresponding\\\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\\\n     * to learn more about how these ids are created.\\\\n     *\\\\n     * This function call must use less than 30 000 gas.\\\\n     */\\\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\\",\\"license\\":\\"MIT\\"},\\"contracts/dnssec-oracle/RRUtils.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.4;\\\\n\\\\nimport \\\\\\"../utils/BytesUtils.sol\\\\\\";\\\\nimport \\\\\\"@ensdomains/buffer/contracts/Buffer.sol\\\\\\";\\\\n\\\\n/// @dev RRUtils is a library that provides utilities for parsing DNS resource records.\\\\nlibrary RRUtils {\\\\n    using BytesUtils for *;\\\\n    using Buffer for *;\\\\n\\\\n    /// @dev Returns the number of bytes in the DNS name at \'offset\' in \'self\'.\\\\n    /// @param self The byte array to read a name from.\\\\n    /// @param offset The offset to start reading at.\\\\n    /// @return The length of the DNS name at \'offset\', in bytes.\\\\n    function nameLength(\\\\n        bytes memory self,\\\\n        uint256 offset\\\\n    ) internal pure returns (uint256) {\\\\n        uint256 idx = offset;\\\\n        while (true) {\\\\n            assert(idx < self.length);\\\\n            uint256 labelLen = self.readUint8(idx);\\\\n            idx += labelLen + 1;\\\\n            if (labelLen == 0) {\\\\n                break;\\\\n            }\\\\n        }\\\\n        return idx - offset;\\\\n    }\\\\n\\\\n    /// @dev Returns a DNS format name at the specified offset of self.\\\\n    /// @param self The byte array to read a name from.\\\\n    /// @param offset The offset to start reading at.\\\\n    /// @return ret The name.\\\\n    function readName(\\\\n        bytes memory self,\\\\n        uint256 offset\\\\n    ) internal pure returns (bytes memory ret) {\\\\n        uint256 len = nameLength(self, offset);\\\\n        return self.substring(offset, len);\\\\n    }\\\\n\\\\n    /// @dev Returns the number of labels in the DNS name at \'offset\' in \'self\'.\\\\n    /// @param self The byte array to read a name from.\\\\n    /// @param offset The offset to start reading at.\\\\n    /// @return The number of labels in the DNS name at \'offset\', in bytes.\\\\n    function labelCount(\\\\n        bytes memory self,\\\\n        uint256 offset\\\\n    ) internal pure returns (uint256) {\\\\n        uint256 count = 0;\\\\n        while (true) {\\\\n            assert(offset < self.length);\\\\n            uint256 labelLen = self.readUint8(offset);\\\\n            offset += labelLen + 1;\\\\n            if (labelLen == 0) {\\\\n                break;\\\\n            }\\\\n            count += 1;\\\\n        }\\\\n        return count;\\\\n    }\\\\n\\\\n    uint256 constant RRSIG_TYPE = 0;\\\\n    uint256 constant RRSIG_ALGORITHM = 2;\\\\n    uint256 constant RRSIG_LABELS = 3;\\\\n    uint256 constant RRSIG_TTL = 4;\\\\n    uint256 constant RRSIG_EXPIRATION = 8;\\\\n    uint256 constant RRSIG_INCEPTION = 12;\\\\n    uint256 constant RRSIG_KEY_TAG = 16;\\\\n    uint256 constant RRSIG_SIGNER_NAME = 18;\\\\n\\\\n    struct SignedSet {\\\\n        uint16 typeCovered;\\\\n        uint8 algorithm;\\\\n        uint8 labels;\\\\n        uint32 ttl;\\\\n        uint32 expiration;\\\\n        uint32 inception;\\\\n        uint16 keytag;\\\\n        bytes signerName;\\\\n        bytes data;\\\\n        bytes name;\\\\n    }\\\\n\\\\n    function readSignedSet(\\\\n        bytes memory data\\\\n    ) internal pure returns (SignedSet memory self) {\\\\n        self.typeCovered = data.readUint16(RRSIG_TYPE);\\\\n        self.algorithm = data.readUint8(RRSIG_ALGORITHM);\\\\n        self.labels = data.readUint8(RRSIG_LABELS);\\\\n        self.ttl = data.readUint32(RRSIG_TTL);\\\\n        self.expiration = data.readUint32(RRSIG_EXPIRATION);\\\\n        self.inception = data.readUint32(RRSIG_INCEPTION);\\\\n        self.keytag = data.readUint16(RRSIG_KEY_TAG);\\\\n        self.signerName = readName(data, RRSIG_SIGNER_NAME);\\\\n        self.data = data.substring(\\\\n            RRSIG_SIGNER_NAME + self.signerName.length,\\\\n            data.length - RRSIG_SIGNER_NAME - self.signerName.length\\\\n        );\\\\n    }\\\\n\\\\n    function rrs(\\\\n        SignedSet memory rrset\\\\n    ) internal pure returns (RRIterator memory) {\\\\n        return iterateRRs(rrset.data, 0);\\\\n    }\\\\n\\\\n    /// @dev An iterator over resource records.\\\\n    struct RRIterator {\\\\n        bytes data;\\\\n        uint256 offset;\\\\n        uint16 dnstype;\\\\n        uint16 class;\\\\n        uint32 ttl;\\\\n        uint256 rdataOffset;\\\\n        uint256 nextOffset;\\\\n    }\\\\n\\\\n    /// @dev Begins iterating over resource records.\\\\n    /// @param self The byte string to read from.\\\\n    /// @param offset The offset to start reading at.\\\\n    /// @return ret An iterator object.\\\\n    function iterateRRs(\\\\n        bytes memory self,\\\\n        uint256 offset\\\\n    ) internal pure returns (RRIterator memory ret) {\\\\n        ret.data = self;\\\\n        ret.nextOffset = offset;\\\\n        next(ret);\\\\n    }\\\\n\\\\n    /// @dev Returns true iff there are more RRs to iterate.\\\\n    /// @param iter The iterator to check.\\\\n    /// @return True iff the iterator has finished.\\\\n    function done(RRIterator memory iter) internal pure returns (bool) {\\\\n        return iter.offset >= iter.data.length;\\\\n    }\\\\n\\\\n    /// @dev Moves the iterator to the next resource record.\\\\n    /// @param iter The iterator to advance.\\\\n    function next(RRIterator memory iter) internal pure {\\\\n        iter.offset = iter.nextOffset;\\\\n        if (iter.offset >= iter.data.length) {\\\\n            return;\\\\n        }\\\\n\\\\n        // Skip the name\\\\n        uint256 off = iter.offset + nameLength(iter.data, iter.offset);\\\\n\\\\n        // Read type, class, and ttl\\\\n        iter.dnstype = iter.data.readUint16(off);\\\\n        off += 2;\\\\n        iter.class = iter.data.readUint16(off);\\\\n        off += 2;\\\\n        iter.ttl = iter.data.readUint32(off);\\\\n        off += 4;\\\\n\\\\n        // Read the rdata\\\\n        uint256 rdataLength = iter.data.readUint16(off);\\\\n        off += 2;\\\\n        iter.rdataOffset = off;\\\\n        iter.nextOffset = off + rdataLength;\\\\n    }\\\\n\\\\n    /// @dev Returns the name of the current record.\\\\n    /// @param iter The iterator.\\\\n    /// @return A new bytes object containing the owner name from the RR.\\\\n    function name(RRIterator memory iter) internal pure returns (bytes memory) {\\\\n        return\\\\n            iter.data.substring(\\\\n                iter.offset,\\\\n                nameLength(iter.data, iter.offset)\\\\n            );\\\\n    }\\\\n\\\\n    /// @dev Returns the rdata portion of the current record.\\\\n    /// @param iter The iterator.\\\\n    /// @return A new bytes object containing the RR\'s RDATA.\\\\n    function rdata(\\\\n        RRIterator memory iter\\\\n    ) internal pure returns (bytes memory) {\\\\n        return\\\\n            iter.data.substring(\\\\n                iter.rdataOffset,\\\\n                iter.nextOffset - iter.rdataOffset\\\\n            );\\\\n    }\\\\n\\\\n    uint256 constant DNSKEY_FLAGS = 0;\\\\n    uint256 constant DNSKEY_PROTOCOL = 2;\\\\n    uint256 constant DNSKEY_ALGORITHM = 3;\\\\n    uint256 constant DNSKEY_PUBKEY = 4;\\\\n\\\\n    struct DNSKEY {\\\\n        uint16 flags;\\\\n        uint8 protocol;\\\\n        uint8 algorithm;\\\\n        bytes publicKey;\\\\n    }\\\\n\\\\n    function readDNSKEY(\\\\n        bytes memory data,\\\\n        uint256 offset,\\\\n        uint256 length\\\\n    ) internal pure returns (DNSKEY memory self) {\\\\n        self.flags = data.readUint16(offset + DNSKEY_FLAGS);\\\\n        self.protocol = data.readUint8(offset + DNSKEY_PROTOCOL);\\\\n        self.algorithm = data.readUint8(offset + DNSKEY_ALGORITHM);\\\\n        self.publicKey = data.substring(\\\\n            offset + DNSKEY_PUBKEY,\\\\n            length - DNSKEY_PUBKEY\\\\n        );\\\\n    }\\\\n\\\\n    uint256 constant DS_KEY_TAG = 0;\\\\n    uint256 constant DS_ALGORITHM = 2;\\\\n    uint256 constant DS_DIGEST_TYPE = 3;\\\\n    uint256 constant DS_DIGEST = 4;\\\\n\\\\n    struct DS {\\\\n        uint16 keytag;\\\\n        uint8 algorithm;\\\\n        uint8 digestType;\\\\n        bytes digest;\\\\n    }\\\\n\\\\n    function readDS(\\\\n        bytes memory data,\\\\n        uint256 offset,\\\\n        uint256 length\\\\n    ) internal pure returns (DS memory self) {\\\\n        self.keytag = data.readUint16(offset + DS_KEY_TAG);\\\\n        self.algorithm = data.readUint8(offset + DS_ALGORITHM);\\\\n        self.digestType = data.readUint8(offset + DS_DIGEST_TYPE);\\\\n        self.digest = data.substring(offset + DS_DIGEST, length - DS_DIGEST);\\\\n    }\\\\n\\\\n    function isSubdomainOf(\\\\n        bytes memory self,\\\\n        bytes memory other\\\\n    ) internal pure returns (bool) {\\\\n        uint256 off = 0;\\\\n        uint256 counts = labelCount(self, 0);\\\\n        uint256 othercounts = labelCount(other, 0);\\\\n\\\\n        while (counts > othercounts) {\\\\n            off = progress(self, off);\\\\n            counts--;\\\\n        }\\\\n\\\\n        return self.equals(off, other, 0);\\\\n    }\\\\n\\\\n    function compareNames(\\\\n        bytes memory self,\\\\n        bytes memory other\\\\n    ) internal pure returns (int256) {\\\\n        if (self.equals(other)) {\\\\n            return 0;\\\\n        }\\\\n\\\\n        uint256 off;\\\\n        uint256 otheroff;\\\\n        uint256 prevoff;\\\\n        uint256 otherprevoff;\\\\n        uint256 counts = labelCount(self, 0);\\\\n        uint256 othercounts = labelCount(other, 0);\\\\n\\\\n        // Keep removing labels from the front of the name until both names are equal length\\\\n        while (counts > othercounts) {\\\\n            prevoff = off;\\\\n            off = progress(self, off);\\\\n            counts--;\\\\n        }\\\\n\\\\n        while (othercounts > counts) {\\\\n            otherprevoff = otheroff;\\\\n            otheroff = progress(other, otheroff);\\\\n            othercounts--;\\\\n        }\\\\n\\\\n        // Compare the last nonequal labels to each other\\\\n        while (counts > 0 && !self.equals(off, other, otheroff)) {\\\\n            prevoff = off;\\\\n            off = progress(self, off);\\\\n            otherprevoff = otheroff;\\\\n            otheroff = progress(other, otheroff);\\\\n            counts -= 1;\\\\n        }\\\\n\\\\n        if (off == 0) {\\\\n            return -1;\\\\n        }\\\\n        if (otheroff == 0) {\\\\n            return 1;\\\\n        }\\\\n\\\\n        return\\\\n            self.compare(\\\\n                prevoff + 1,\\\\n                self.readUint8(prevoff),\\\\n                other,\\\\n                otherprevoff + 1,\\\\n                other.readUint8(otherprevoff)\\\\n            );\\\\n    }\\\\n\\\\n    /// @dev Compares two serial numbers using RFC1982 serial number math.\\\\n    function serialNumberGte(\\\\n        uint32 i1,\\\\n        uint32 i2\\\\n    ) internal pure returns (bool) {\\\\n        unchecked {\\\\n            return int32(i1) - int32(i2) >= 0;\\\\n        }\\\\n    }\\\\n\\\\n    function progress(\\\\n        bytes memory body,\\\\n        uint256 off\\\\n    ) internal pure returns (uint256) {\\\\n        return off + 1 + body.readUint8(off);\\\\n    }\\\\n\\\\n    /// @dev Computes the keytag for a chunk of data.\\\\n    /// @param data The data to compute a keytag for.\\\\n    /// @return The computed key tag.\\\\n    function computeKeytag(bytes memory data) internal pure returns (uint16) {\\\\n        /* This function probably deserves some explanation.\\\\n         * The DNSSEC keytag function is a checksum that relies on summing up individual bytes\\\\n         * from the input string, with some mild bitshifting. Here\'s a Naive solidity implementation:\\\\n         *\\\\n         *     function computeKeytag(bytes memory data) internal pure returns (uint16) {\\\\n         *         uint ac;\\\\n         *         for (uint i = 0; i < data.length; i++) {\\\\n         *             ac += i & 1 == 0 ? uint16(data.readUint8(i)) << 8 : data.readUint8(i);\\\\n         *         }\\\\n         *         return uint16(ac + (ac >> 16));\\\\n         *     }\\\\n         *\\\\n         * The EVM, with its 256 bit words, is exceedingly inefficient at doing byte-by-byte operations;\\\\n         * the code above, on reasonable length inputs, consumes over 100k gas. But we can make the EVM\'s\\\\n         * large words work in our favour.\\\\n         *\\\\n         * The code below works by treating the input as a series of 256 bit words. It first masks out\\\\n         * even and odd bytes from each input word, adding them to two separate accumulators `ac1` and `ac2`.\\\\n         * The bytes are separated by empty bytes, so as long as no individual sum exceeds 2^16-1, we\'re\\\\n         * effectively summing 16 different numbers with each EVM ADD opcode.\\\\n         *\\\\n         * Once it\'s added up all the inputs, it has to add all the 16 bit values in `ac1` and `ac2` together.\\\\n         * It does this using the same trick - mask out every other value, shift to align them, add them together.\\\\n         * After the first addition on both accumulators, there\'s enough room to add the two accumulators together,\\\\n         * and the remaining sums can be done just on ac1.\\\\n         */\\\\n        unchecked {\\\\n            require(data.length <= 8192, \\\\\\"Long keys not permitted\\\\\\");\\\\n            uint256 ac1;\\\\n            uint256 ac2;\\\\n            for (uint256 i = 0; i < data.length + 31; i += 32) {\\\\n                uint256 word;\\\\n                assembly {\\\\n                    word := mload(add(add(data, 32), i))\\\\n                }\\\\n                if (i + 32 > data.length) {\\\\n                    uint256 unused = 256 - (data.length - i) * 8;\\\\n                    word = (word >> unused) << unused;\\\\n                }\\\\n                ac1 +=\\\\n                    (word &\\\\n                        0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >>\\\\n                    8;\\\\n                ac2 += (word &\\\\n                    0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF);\\\\n            }\\\\n            ac1 =\\\\n                (ac1 &\\\\n                    0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) +\\\\n                ((ac1 &\\\\n                    0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >>\\\\n                    16);\\\\n            ac2 =\\\\n                (ac2 &\\\\n                    0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) +\\\\n                ((ac2 &\\\\n                    0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >>\\\\n                    16);\\\\n            ac1 = (ac1 << 8) + ac2;\\\\n            ac1 =\\\\n                (ac1 &\\\\n                    0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) +\\\\n                ((ac1 &\\\\n                    0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >>\\\\n                    32);\\\\n            ac1 =\\\\n                (ac1 &\\\\n                    0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) +\\\\n                ((ac1 &\\\\n                    0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >>\\\\n                    64);\\\\n            ac1 =\\\\n                (ac1 &\\\\n                    0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) +\\\\n                (ac1 >> 128);\\\\n            ac1 += (ac1 >> 16) & 0xFFFF;\\\\n            return uint16(ac1);\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xdbab10dde632a1a02ee1c706bd4a31f9fb6195bd15a360528f7f6615e8fc895a\\",\\"license\\":\\"MIT\\"},\\"contracts/ethregistrar/IBaseRegistrar.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.4;\\\\n\\\\nimport \\\\\\"../registry/ENS.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\\\\";\\\\n\\\\ninterface IBaseRegistrar is IERC721 {\\\\n    event ControllerAdded(address indexed controller);\\\\n    event ControllerRemoved(address indexed controller);\\\\n    event NameMigrated(\\\\n        uint256 indexed id,\\\\n        address indexed owner,\\\\n        uint256 expires\\\\n    );\\\\n    event NameRegistered(\\\\n        uint256 indexed id,\\\\n        address indexed owner,\\\\n        uint256 expires\\\\n    );\\\\n    event NameRenewed(uint256 indexed id, uint256 expires);\\\\n\\\\n    // Authorises a controller, who can register and renew domains.\\\\n    function addController(address controller) external;\\\\n\\\\n    // Revoke controller permission for an address.\\\\n    function removeController(address controller) external;\\\\n\\\\n    // Set the resolver for the TLD this registrar manages.\\\\n    function setResolver(address resolver) external;\\\\n\\\\n    // Returns the expiration timestamp of the specified label hash.\\\\n    function nameExpires(uint256 id) external view returns (uint256);\\\\n\\\\n    // Returns true if the specified name is available for registration.\\\\n    function available(uint256 id) external view returns (bool);\\\\n\\\\n    /// @dev Register a name.\\\\n    function register(\\\\n        uint256 id,\\\\n        address owner,\\\\n        uint256 duration\\\\n    ) external returns (uint256);\\\\n\\\\n    function renew(uint256 id, uint256 duration) external returns (uint256);\\\\n\\\\n    /// @dev Reclaim ownership of a name in ENS, if you own it in the registrar.\\\\n    function reclaim(uint256 id, address owner) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x984447817adfb8fc76447da9c24a492379bcfa4cd4e7ed8e795ea1981be3db83\\",\\"license\\":\\"MIT\\"},\\"contracts/registry/ENS.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\ninterface ENS {\\\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\\\n\\\\n    // Logged when the owner of a node transfers ownership to a new account.\\\\n    event Transfer(bytes32 indexed node, address owner);\\\\n\\\\n    // Logged when the resolver for a node changes.\\\\n    event NewResolver(bytes32 indexed node, address resolver);\\\\n\\\\n    // Logged when the TTL of a node changes\\\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\\\n\\\\n    // Logged when an operator is added or removed.\\\\n    event ApprovalForAll(\\\\n        address indexed owner,\\\\n        address indexed operator,\\\\n        bool approved\\\\n    );\\\\n\\\\n    function setRecord(\\\\n        bytes32 node,\\\\n        address owner,\\\\n        address resolver,\\\\n        uint64 ttl\\\\n    ) external;\\\\n\\\\n    function setSubnodeRecord(\\\\n        bytes32 node,\\\\n        bytes32 label,\\\\n        address owner,\\\\n        address resolver,\\\\n        uint64 ttl\\\\n    ) external;\\\\n\\\\n    function setSubnodeOwner(\\\\n        bytes32 node,\\\\n        bytes32 label,\\\\n        address owner\\\\n    ) external returns (bytes32);\\\\n\\\\n    function setResolver(bytes32 node, address resolver) external;\\\\n\\\\n    function setOwner(bytes32 node, address owner) external;\\\\n\\\\n    function setTTL(bytes32 node, uint64 ttl) external;\\\\n\\\\n    function setApprovalForAll(address operator, bool approved) external;\\\\n\\\\n    function owner(bytes32 node) external view returns (address);\\\\n\\\\n    function resolver(bytes32 node) external view returns (address);\\\\n\\\\n    function ttl(bytes32 node) external view returns (uint64);\\\\n\\\\n    function recordExists(bytes32 node) external view returns (bool);\\\\n\\\\n    function isApprovedForAll(\\\\n        address owner,\\\\n        address operator\\\\n    ) external view returns (bool);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8e208b44d5dbf22552fe72d79b45c640855b84fbc9ee21f4c3bb4bfe81cbe8db\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/IMulticallable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.4;\\\\n\\\\ninterface IMulticallable {\\\\n    function multicall(\\\\n        bytes[] calldata data\\\\n    ) external returns (bytes[] memory results);\\\\n\\\\n    function multicallWithNodeCheck(\\\\n        bytes32,\\\\n        bytes[] calldata data\\\\n    ) external returns (bytes[] memory results);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x0334202e20bb11995997083d05963f5e8e7ed6194cba494e7f9371ab7bf4e2c3\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/Multicallable.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.4;\\\\n\\\\nimport \\\\\\"./IMulticallable.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\\\\";\\\\n\\\\nabstract contract Multicallable is IMulticallable, ERC165 {\\\\n    function _multicall(\\\\n        bytes32 nodehash,\\\\n        bytes[] calldata data\\\\n    ) internal returns (bytes[] memory results) {\\\\n        results = new bytes[](data.length);\\\\n        for (uint256 i = 0; i < data.length; i++) {\\\\n            if (nodehash != bytes32(0)) {\\\\n                bytes32 txNamehash = bytes32(data[i][4:36]);\\\\n                require(\\\\n                    txNamehash == nodehash,\\\\n                    \\\\\\"multicall: All records must have a matching namehash\\\\\\"\\\\n                );\\\\n            }\\\\n            (bool success, bytes memory result) = address(this).delegatecall(\\\\n                data[i]\\\\n            );\\\\n            require(success);\\\\n            results[i] = result;\\\\n        }\\\\n        return results;\\\\n    }\\\\n\\\\n    // This function provides an extra security check when called\\\\n    // from priviledged contracts (such as EthRegistrarController)\\\\n    // that can set records on behalf of the node owners\\\\n    function multicallWithNodeCheck(\\\\n        bytes32 nodehash,\\\\n        bytes[] calldata data\\\\n    ) external returns (bytes[] memory results) {\\\\n        return _multicall(nodehash, data);\\\\n    }\\\\n\\\\n    function multicall(\\\\n        bytes[] calldata data\\\\n    ) public override returns (bytes[] memory results) {\\\\n        return _multicall(bytes32(0), data);\\\\n    }\\\\n\\\\n    function supportsInterface(\\\\n        bytes4 interfaceID\\\\n    ) public view virtual override returns (bool) {\\\\n        return\\\\n            interfaceID == type(IMulticallable).interfaceId ||\\\\n            super.supportsInterface(interfaceID);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x1063a9dd3b94ba304624d5ec6deb43c1916640758ae970eece4d4e3ef8b2fcb1\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/PublicResolver.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.17 <0.9.0;\\\\n\\\\nimport \\\\\\"../registry/ENS.sol\\\\\\";\\\\nimport \\\\\\"./profiles/ABIResolver.sol\\\\\\";\\\\nimport \\\\\\"./profiles/AddrResolver.sol\\\\\\";\\\\nimport \\\\\\"./profiles/ContentHashResolver.sol\\\\\\";\\\\nimport \\\\\\"./profiles/DNSResolver.sol\\\\\\";\\\\nimport \\\\\\"./profiles/InterfaceResolver.sol\\\\\\";\\\\nimport \\\\\\"./profiles/NameResolver.sol\\\\\\";\\\\nimport \\\\\\"./profiles/PubkeyResolver.sol\\\\\\";\\\\nimport \\\\\\"./profiles/TextResolver.sol\\\\\\";\\\\nimport \\\\\\"./Multicallable.sol\\\\\\";\\\\nimport {ReverseClaimer} from \\\\\\"../reverseRegistrar/ReverseClaimer.sol\\\\\\";\\\\nimport {INameWrapper} from \\\\\\"../wrapper/INameWrapper.sol\\\\\\";\\\\n\\\\n/// A simple resolver anyone can use; only allows the owner of a node to set its\\\\n/// address.\\\\ncontract PublicResolver is\\\\n    Multicallable,\\\\n    ABIResolver,\\\\n    AddrResolver,\\\\n    ContentHashResolver,\\\\n    DNSResolver,\\\\n    InterfaceResolver,\\\\n    NameResolver,\\\\n    PubkeyResolver,\\\\n    TextResolver,\\\\n    ReverseClaimer\\\\n{\\\\n    ENS immutable ens;\\\\n    INameWrapper immutable nameWrapper;\\\\n    address immutable trustedETHController;\\\\n    address immutable trustedReverseRegistrar;\\\\n\\\\n    /// A mapping of operators. An address that is authorised for an address\\\\n    /// may make any changes to the name that the owner could, but may not update\\\\n    /// the set of authorisations.\\\\n    /// (owner, operator) => approved\\\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\\\n\\\\n    /// A mapping of delegates. A delegate that is authorised by an owner\\\\n    /// for a name may make changes to the name\'s resolver, but may not update\\\\n    /// the set of token approvals.\\\\n    /// (owner, name, delegate) => approved\\\\n    mapping(address => mapping(bytes32 => mapping(address => bool)))\\\\n        private _tokenApprovals;\\\\n\\\\n    // Logged when an operator is added or removed.\\\\n    event ApprovalForAll(\\\\n        address indexed owner,\\\\n        address indexed operator,\\\\n        bool approved\\\\n    );\\\\n\\\\n    // Logged when a delegate is approved or  an approval is revoked.\\\\n    event Approved(\\\\n        address owner,\\\\n        bytes32 indexed node,\\\\n        address indexed delegate,\\\\n        bool indexed approved\\\\n    );\\\\n\\\\n    constructor(\\\\n        ENS _ens,\\\\n        INameWrapper wrapperAddress,\\\\n        address _trustedETHController,\\\\n        address _trustedReverseRegistrar\\\\n    ) ReverseClaimer(_ens, msg.sender) {\\\\n        ens = _ens;\\\\n        nameWrapper = wrapperAddress;\\\\n        trustedETHController = _trustedETHController;\\\\n        trustedReverseRegistrar = _trustedReverseRegistrar;\\\\n    }\\\\n\\\\n    /// @dev See {IERC1155-setApprovalForAll}.\\\\n    function setApprovalForAll(address operator, bool approved) external {\\\\n        require(\\\\n            msg.sender != operator,\\\\n            \\\\\\"ERC1155: setting approval status for self\\\\\\"\\\\n        );\\\\n\\\\n        _operatorApprovals[msg.sender][operator] = approved;\\\\n        emit ApprovalForAll(msg.sender, operator, approved);\\\\n    }\\\\n\\\\n    /// @dev See {IERC1155-isApprovedForAll}.\\\\n    function isApprovedForAll(\\\\n        address account,\\\\n        address operator\\\\n    ) public view returns (bool) {\\\\n        return _operatorApprovals[account][operator];\\\\n    }\\\\n\\\\n    /// @dev Approve a delegate to be able to updated records on a node.\\\\n    function approve(bytes32 node, address delegate, bool approved) external {\\\\n        require(msg.sender != delegate, \\\\\\"Setting delegate status for self\\\\\\");\\\\n\\\\n        _tokenApprovals[msg.sender][node][delegate] = approved;\\\\n        emit Approved(msg.sender, node, delegate, approved);\\\\n    }\\\\n\\\\n    /// @dev Check to see if the delegate has been approved by the owner for the node.\\\\n    function isApprovedFor(\\\\n        address owner,\\\\n        bytes32 node,\\\\n        address delegate\\\\n    ) public view returns (bool) {\\\\n        return _tokenApprovals[owner][node][delegate];\\\\n    }\\\\n\\\\n    function isAuthorised(bytes32 node) internal view override returns (bool) {\\\\n        if (\\\\n            msg.sender == trustedETHController ||\\\\n            msg.sender == trustedReverseRegistrar\\\\n        ) {\\\\n            return true;\\\\n        }\\\\n        address owner = ens.owner(node);\\\\n        if (owner == address(nameWrapper)) {\\\\n            owner = nameWrapper.ownerOf(uint256(node));\\\\n        }\\\\n        return\\\\n            owner == msg.sender ||\\\\n            isApprovedForAll(owner, msg.sender) ||\\\\n            isApprovedFor(owner, node, msg.sender);\\\\n    }\\\\n\\\\n    function supportsInterface(\\\\n        bytes4 interfaceID\\\\n    )\\\\n        public\\\\n        view\\\\n        override(\\\\n            Multicallable,\\\\n            ABIResolver,\\\\n            AddrResolver,\\\\n            ContentHashResolver,\\\\n            DNSResolver,\\\\n            InterfaceResolver,\\\\n            NameResolver,\\\\n            PubkeyResolver,\\\\n            TextResolver\\\\n        )\\\\n        returns (bool)\\\\n    {\\\\n        return super.supportsInterface(interfaceID);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x65b478c405ac2742d9a6661cb62adb7b09bf2bf03cff7b8a0fe970e0aad3f4aa\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/ResolverBase.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\\\\";\\\\nimport \\\\\\"./profiles/IVersionableResolver.sol\\\\\\";\\\\n\\\\nabstract contract ResolverBase is ERC165, IVersionableResolver {\\\\n    mapping(bytes32 => uint64) public recordVersions;\\\\n\\\\n    function isAuthorised(bytes32 node) internal view virtual returns (bool);\\\\n\\\\n    modifier authorised(bytes32 node) {\\\\n        require(isAuthorised(node));\\\\n        _;\\\\n    }\\\\n\\\\n    /// Increments the record version associated with an ENS node.\\\\n    /// May only be called by the owner of that node in the ENS registry.\\\\n    /// @param node The node to update.\\\\n    function clearRecords(bytes32 node) public virtual authorised(node) {\\\\n        recordVersions[node]++;\\\\n        emit VersionChanged(node, recordVersions[node]);\\\\n    }\\\\n\\\\n    function supportsInterface(\\\\n        bytes4 interfaceID\\\\n    ) public view virtual override returns (bool) {\\\\n        return\\\\n            interfaceID == type(IVersionableResolver).interfaceId ||\\\\n            super.supportsInterface(interfaceID);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb063f86c1e75508779fd23762f20ebfbb2f3ef6d84328038e3de01cf59d18e4b\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/profiles/ABIResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\nimport \\\\\\"./IABIResolver.sol\\\\\\";\\\\nimport \\\\\\"../ResolverBase.sol\\\\\\";\\\\n\\\\nabstract contract ABIResolver is IABIResolver, ResolverBase {\\\\n    mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes))) versionable_abis;\\\\n\\\\n    /// Sets the ABI associated with an ENS node.\\\\n    /// Nodes may have one ABI of each content type. To remove an ABI, set it to\\\\n    /// the empty string.\\\\n    /// @param node The node to update.\\\\n    /// @param contentType The content type of the ABI\\\\n    /// @param data The ABI data.\\\\n    function setABI(\\\\n        bytes32 node,\\\\n        uint256 contentType,\\\\n        bytes calldata data\\\\n    ) external virtual authorised(node) {\\\\n        // Content types must be powers of 2\\\\n        require(((contentType - 1) & contentType) == 0);\\\\n\\\\n        versionable_abis[recordVersions[node]][node][contentType] = data;\\\\n        emit ABIChanged(node, contentType);\\\\n    }\\\\n\\\\n    /// Returns the ABI associated with an ENS node.\\\\n    /// Defined in EIP205.\\\\n    /// @param node The ENS node to query\\\\n    /// @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\\\n    /// @return contentType The content type of the return value\\\\n    /// @return data The ABI data\\\\n    function ABI(\\\\n        bytes32 node,\\\\n        uint256 contentTypes\\\\n    ) external view virtual override returns (uint256, bytes memory) {\\\\n        mapping(uint256 => bytes) storage abiset = versionable_abis[\\\\n            recordVersions[node]\\\\n        ][node];\\\\n\\\\n        for (\\\\n            uint256 contentType = 1;\\\\n            contentType > 0 && contentType <= contentTypes;\\\\n            contentType <<= 1\\\\n        ) {\\\\n            if (\\\\n                (contentType & contentTypes) != 0 &&\\\\n                abiset[contentType].length > 0\\\\n            ) {\\\\n                return (contentType, abiset[contentType]);\\\\n            }\\\\n        }\\\\n\\\\n        return (0, bytes(\\\\\\"\\\\\\"));\\\\n    }\\\\n\\\\n    function supportsInterface(\\\\n        bytes4 interfaceID\\\\n    ) public view virtual override returns (bool) {\\\\n        return\\\\n            interfaceID == type(IABIResolver).interfaceId ||\\\\n            super.supportsInterface(interfaceID);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0xf938b15d989964645a1aba2c151663fd63d2942c8daf46470ac7b15fe3d41641\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/profiles/AddrResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\nimport {ResolverBase, IERC165} from \\\\\\"../ResolverBase.sol\\\\\\";\\\\nimport {IAddrResolver} from \\\\\\"./IAddrResolver.sol\\\\\\";\\\\nimport {IAddressResolver} from \\\\\\"./IAddressResolver.sol\\\\\\";\\\\nimport {IHasAddressResolver} from \\\\\\"./IHasAddressResolver.sol\\\\\\";\\\\nimport {ENSIP19, COIN_TYPE_ETH, COIN_TYPE_DEFAULT} from \\\\\\"../../utils/ENSIP19.sol\\\\\\";\\\\n\\\\nabstract contract AddrResolver is\\\\n    IAddrResolver,\\\\n    IAddressResolver,\\\\n    IHasAddressResolver,\\\\n    ResolverBase\\\\n{\\\\n    mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes))) versionable_addresses;\\\\n\\\\n    /// @notice The supplied address could not be converted to `address`.\\\\n    /// @dev Error selector: `0x8d666f60`\\\\n    error InvalidEVMAddress(bytes addressBytes);\\\\n\\\\n    /// @notice Set `addr(60)` of the associated ENS node.\\\\n    ///         `address(0)` is stored as `new bytes(20)`.\\\\n    /// @param node The node to update.\\\\n    /// @param _addr The address to set.\\\\n    function setAddr(\\\\n        bytes32 node,\\\\n        address _addr\\\\n    ) external virtual authorised(node) {\\\\n        setAddr(node, COIN_TYPE_ETH, abi.encodePacked(_addr));\\\\n    }\\\\n\\\\n    /// @notice Get `addr(60)` as `address` of the associated ENS node.\\\\n    /// @param node The node to query.\\\\n    /// @return The associated address.\\\\n    function addr(\\\\n        bytes32 node\\\\n    ) public view virtual override returns (address payable) {\\\\n        return payable(address(bytes20(addr(node, COIN_TYPE_ETH))));\\\\n    }\\\\n\\\\n    /// @notice Set the address for coin type of the associated ENS node.\\\\n    ///         Reverts `InvalidEVMAddress` if coin type is EVM and not 0 or 20 bytes.\\\\n    /// @param node The node to update.\\\\n    /// @param coinType The coin type.\\\\n    /// @param addressBytes The address to set.\\\\n    function setAddr(\\\\n        bytes32 node,\\\\n        uint256 coinType,\\\\n        bytes memory addressBytes\\\\n    ) public virtual authorised(node) {\\\\n        if (\\\\n            addressBytes.length != 0 &&\\\\n            addressBytes.length != 20 &&\\\\n            ENSIP19.isEVMCoinType(coinType)\\\\n        ) {\\\\n            revert InvalidEVMAddress(addressBytes);\\\\n        }\\\\n        emit AddressChanged(node, coinType, addressBytes);\\\\n        if (coinType == COIN_TYPE_ETH) {\\\\n            emit AddrChanged(node, address(bytes20(addressBytes)));\\\\n        }\\\\n        versionable_addresses[recordVersions[node]][node][\\\\n            coinType\\\\n        ] = addressBytes;\\\\n    }\\\\n\\\\n    /// @notice Get the address for coin type of the associated ENS node.\\\\n    ///         If coin type is EVM and empty, defaults to `addr(COIN_TYPE_DEFAULT)`.\\\\n    /// @param node The node to query.\\\\n    /// @param coinType The coin type.\\\\n    /// @return addressBytes The assocated address.\\\\n    function addr(\\\\n        bytes32 node,\\\\n        uint256 coinType\\\\n    ) public view virtual override returns (bytes memory addressBytes) {\\\\n        mapping(uint256 => bytes) storage addrs = versionable_addresses[\\\\n            recordVersions[node]\\\\n        ][node];\\\\n        addressBytes = addrs[coinType];\\\\n        if (\\\\n            addressBytes.length == 0 && ENSIP19.chainFromCoinType(coinType) > 0\\\\n        ) {\\\\n            addressBytes = addrs[COIN_TYPE_DEFAULT];\\\\n        }\\\\n    }\\\\n\\\\n    /// @inheritdoc IHasAddressResolver\\\\n    function hasAddr(\\\\n        bytes32 node,\\\\n        uint256 coinType\\\\n    ) external view returns (bool) {\\\\n        return\\\\n            versionable_addresses[recordVersions[node]][node][coinType].length >\\\\n            0;\\\\n    }\\\\n\\\\n    /// @inheritdoc IERC165\\\\n    function supportsInterface(\\\\n        bytes4 interfaceId\\\\n    ) public view virtual override returns (bool) {\\\\n        return\\\\n            type(IAddrResolver).interfaceId == interfaceId ||\\\\n            type(IAddressResolver).interfaceId == interfaceId ||\\\\n            type(IHasAddressResolver).interfaceId == interfaceId ||\\\\n            super.supportsInterface(interfaceId);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x2d214ea1213dbd8cc02d32355edf044a6551296df56e8a4931d3447092e8abcc\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/profiles/ContentHashResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\nimport \\\\\\"../ResolverBase.sol\\\\\\";\\\\nimport \\\\\\"./IContentHashResolver.sol\\\\\\";\\\\n\\\\nabstract contract ContentHashResolver is IContentHashResolver, ResolverBase {\\\\n    mapping(uint64 => mapping(bytes32 => bytes)) versionable_hashes;\\\\n\\\\n    /// Sets the contenthash associated with an ENS node.\\\\n    /// May only be called by the owner of that node in the ENS registry.\\\\n    /// @param node The node to update.\\\\n    /// @param hash The contenthash to set\\\\n    function setContenthash(\\\\n        bytes32 node,\\\\n        bytes calldata hash\\\\n    ) external virtual authorised(node) {\\\\n        versionable_hashes[recordVersions[node]][node] = hash;\\\\n        emit ContenthashChanged(node, hash);\\\\n    }\\\\n\\\\n    /// Returns the contenthash associated with an ENS node.\\\\n    /// @param node The ENS node to query.\\\\n    /// @return The associated contenthash.\\\\n    function contenthash(\\\\n        bytes32 node\\\\n    ) external view virtual override returns (bytes memory) {\\\\n        return versionable_hashes[recordVersions[node]][node];\\\\n    }\\\\n\\\\n    function supportsInterface(\\\\n        bytes4 interfaceID\\\\n    ) public view virtual override returns (bool) {\\\\n        return\\\\n            interfaceID == type(IContentHashResolver).interfaceId ||\\\\n            super.supportsInterface(interfaceID);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8eddfb712744906b41ad3458171438605982cdcd0c570d91fed49eca56bf7def\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/profiles/DNSResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\nimport \\\\\\"../ResolverBase.sol\\\\\\";\\\\nimport \\\\\\"../../dnssec-oracle/RRUtils.sol\\\\\\";\\\\nimport \\\\\\"./IDNSRecordResolver.sol\\\\\\";\\\\nimport \\\\\\"./IDNSZoneResolver.sol\\\\\\";\\\\n\\\\nabstract contract DNSResolver is\\\\n    IDNSRecordResolver,\\\\n    IDNSZoneResolver,\\\\n    ResolverBase\\\\n{\\\\n    using RRUtils for *;\\\\n    using BytesUtils for bytes;\\\\n\\\\n    // Zone hashes for the domains.\\\\n    // A zone hash is an EIP-1577 content hash in binary format that should point to a\\\\n    // resource containing a single zonefile.\\\\n    // node => contenthash\\\\n    mapping(uint64 => mapping(bytes32 => bytes)) private versionable_zonehashes;\\\\n\\\\n    // The records themselves.  Stored as binary RRSETs\\\\n    // node => version => name => resource => data\\\\n    mapping(uint64 => mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes))))\\\\n        private versionable_records;\\\\n\\\\n    // Count of number of entries for a given name.  Required for DNS resolvers\\\\n    // when resolving wildcards.\\\\n    // node => version => name => number of records\\\\n    mapping(uint64 => mapping(bytes32 => mapping(bytes32 => uint16)))\\\\n        private versionable_nameEntriesCount;\\\\n\\\\n    /// Set one or more DNS records.  Records are supplied in wire-format.\\\\n    /// Records with the same node/name/resource must be supplied one after the\\\\n    /// other to ensure the data is updated correctly. For example, if the data\\\\n    /// was supplied:\\\\n    ///     a.example.com IN A 1.2.3.4\\\\n    ///     a.example.com IN A 5.6.7.8\\\\n    ///     www.example.com IN CNAME a.example.com.\\\\n    /// then this would store the two A records for a.example.com correctly as a\\\\n    /// single RRSET, however if the data was supplied:\\\\n    ///     a.example.com IN A 1.2.3.4\\\\n    ///     www.example.com IN CNAME a.example.com.\\\\n    ///     a.example.com IN A 5.6.7.8\\\\n    /// then this would store the first A record, the CNAME, then the second A\\\\n    /// record which would overwrite the first.\\\\n    ///\\\\n    /// @param node the namehash of the node for which to set the records\\\\n    /// @param data the DNS wire format records to set\\\\n    function setDNSRecords(\\\\n        bytes32 node,\\\\n        bytes calldata data\\\\n    ) external virtual authorised(node) {\\\\n        uint16 resource = 0;\\\\n        uint256 offset = 0;\\\\n        bytes memory name;\\\\n        bytes memory value;\\\\n        bytes32 nameHash;\\\\n        uint64 version = recordVersions[node];\\\\n        // Iterate over the data to add the resource records\\\\n        for (\\\\n            RRUtils.RRIterator memory iter = data.iterateRRs(0);\\\\n            !iter.done();\\\\n            iter.next()\\\\n        ) {\\\\n            if (resource == 0) {\\\\n                resource = iter.dnstype;\\\\n                name = iter.name();\\\\n                nameHash = keccak256(abi.encodePacked(name));\\\\n                value = bytes(iter.rdata());\\\\n            } else {\\\\n                bytes memory newName = iter.name();\\\\n                if (resource != iter.dnstype || !name.equals(newName)) {\\\\n                    setDNSRRSet(\\\\n                        node,\\\\n                        name,\\\\n                        resource,\\\\n                        data,\\\\n                        offset,\\\\n                        iter.offset - offset,\\\\n                        value.length == 0,\\\\n                        version\\\\n                    );\\\\n                    resource = iter.dnstype;\\\\n                    offset = iter.offset;\\\\n                    name = newName;\\\\n                    nameHash = keccak256(name);\\\\n                    value = bytes(iter.rdata());\\\\n                }\\\\n            }\\\\n        }\\\\n        if (name.length > 0) {\\\\n            setDNSRRSet(\\\\n                node,\\\\n                name,\\\\n                resource,\\\\n                data,\\\\n                offset,\\\\n                data.length - offset,\\\\n                value.length == 0,\\\\n                version\\\\n            );\\\\n        }\\\\n    }\\\\n\\\\n    /// Obtain a DNS record.\\\\n    /// @param node the namehash of the node for which to fetch the record\\\\n    /// @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\\\n    /// @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\\\n    /// @return the DNS record in wire format if present, otherwise empty\\\\n    function dnsRecord(\\\\n        bytes32 node,\\\\n        bytes32 name,\\\\n        uint16 resource\\\\n    ) public view virtual override returns (bytes memory) {\\\\n        return versionable_records[recordVersions[node]][node][name][resource];\\\\n    }\\\\n\\\\n    /// Check if a given node has records.\\\\n    /// @param node the namehash of the node for which to check the records\\\\n    /// @param name the namehash of the node for which to check the records\\\\n    function hasDNSRecords(\\\\n        bytes32 node,\\\\n        bytes32 name\\\\n    ) public view virtual returns (bool) {\\\\n        return (versionable_nameEntriesCount[recordVersions[node]][node][\\\\n            name\\\\n        ] != 0);\\\\n    }\\\\n\\\\n    /// setZonehash sets the hash for the zone.\\\\n    /// May only be called by the owner of that node in the ENS registry.\\\\n    /// @param node The node to update.\\\\n    /// @param hash The zonehash to set\\\\n    function setZonehash(\\\\n        bytes32 node,\\\\n        bytes calldata hash\\\\n    ) external virtual authorised(node) {\\\\n        uint64 currentRecordVersion = recordVersions[node];\\\\n        bytes memory oldhash = versionable_zonehashes[currentRecordVersion][\\\\n            node\\\\n        ];\\\\n        versionable_zonehashes[currentRecordVersion][node] = hash;\\\\n        emit DNSZonehashChanged(node, oldhash, hash);\\\\n    }\\\\n\\\\n    /// zonehash obtains the hash for the zone.\\\\n    /// @param node The ENS node to query.\\\\n    /// @return The associated contenthash.\\\\n    function zonehash(\\\\n        bytes32 node\\\\n    ) external view virtual override returns (bytes memory) {\\\\n        return versionable_zonehashes[recordVersions[node]][node];\\\\n    }\\\\n\\\\n    function supportsInterface(\\\\n        bytes4 interfaceID\\\\n    ) public view virtual override returns (bool) {\\\\n        return\\\\n            interfaceID == type(IDNSRecordResolver).interfaceId ||\\\\n            interfaceID == type(IDNSZoneResolver).interfaceId ||\\\\n            super.supportsInterface(interfaceID);\\\\n    }\\\\n\\\\n    function setDNSRRSet(\\\\n        bytes32 node,\\\\n        bytes memory name,\\\\n        uint16 resource,\\\\n        bytes memory data,\\\\n        uint256 offset,\\\\n        uint256 size,\\\\n        bool deleteRecord,\\\\n        uint64 version\\\\n    ) private {\\\\n        bytes32 nameHash = keccak256(name);\\\\n        bytes memory rrData = data.substring(offset, size);\\\\n        if (deleteRecord) {\\\\n            if (\\\\n                versionable_records[version][node][nameHash][resource].length !=\\\\n                0\\\\n            ) {\\\\n                versionable_nameEntriesCount[version][node][nameHash]--;\\\\n            }\\\\n            delete (versionable_records[version][node][nameHash][resource]);\\\\n            emit DNSRecordDeleted(node, name, resource);\\\\n        } else {\\\\n            if (\\\\n                versionable_records[version][node][nameHash][resource].length ==\\\\n                0\\\\n            ) {\\\\n                versionable_nameEntriesCount[version][node][nameHash]++;\\\\n            }\\\\n            versionable_records[version][node][nameHash][resource] = rrData;\\\\n            emit DNSRecordChanged(node, name, resource, rrData);\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x3f5344239a3461c06389c952ae8e6feb29f0fd72dea1baaf31be81ba8b6a194a\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/profiles/IABIResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\ninterface IABIResolver {\\\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\\\n\\\\n    /// Returns the ABI associated with an ENS node.\\\\n    /// Defined in EIP205.\\\\n    /// @param node The ENS node to query\\\\n    /// @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\\\n    /// @return contentType The content type of the return value\\\\n    /// @return data The ABI data\\\\n    function ABI(\\\\n        bytes32 node,\\\\n        uint256 contentTypes\\\\n    ) external view returns (uint256, bytes memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x3a7a763d7a4f0d196c4b628545b022b1d1d0e37baf84eaa6eecb1a57a1633cad\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/profiles/IAddrResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\n/// Interface for the legacy (ETH-only) addr function.\\\\ninterface IAddrResolver {\\\\n    event AddrChanged(bytes32 indexed node, address a);\\\\n\\\\n    /// Returns the address associated with an ENS node.\\\\n    /// @param node The ENS node to query.\\\\n    /// @return The associated address.\\\\n    function addr(bytes32 node) external view returns (address payable);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x91dd0c350698c505d6c7e4c919da9f981d4b8d7ad062e25073fa1f6af7cb79d1\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/profiles/IAddressResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\n/// Interface for the new (multicoin) addr function.\\\\ninterface IAddressResolver {\\\\n    event AddressChanged(\\\\n        bytes32 indexed node,\\\\n        uint256 coinType,\\\\n        bytes newAddress\\\\n    );\\\\n\\\\n    function addr(\\\\n        bytes32 node,\\\\n        uint256 coinType\\\\n    ) external view returns (bytes memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8da5dd0fc1c5ab4f47e03c23126976a86d4b2dbeac161e70e3af9e2a13330cf0\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/profiles/IContentHashResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\ninterface IContentHashResolver {\\\\n    event ContenthashChanged(bytes32 indexed node, bytes hash);\\\\n\\\\n    /// Returns the contenthash associated with an ENS node.\\\\n    /// @param node The ENS node to query.\\\\n    /// @return The associated contenthash.\\\\n    function contenthash(bytes32 node) external view returns (bytes memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xaa978b1ee4c19e99c8aa409dc553e9b4c1bf9fe3c5bad718cd3589e6c9e6d121\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/profiles/IDNSRecordResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\ninterface IDNSRecordResolver {\\\\n    // DNSRecordChanged is emitted whenever a given node/name/resource\'s RRSET is updated.\\\\n    event DNSRecordChanged(\\\\n        bytes32 indexed node,\\\\n        bytes name,\\\\n        uint16 resource,\\\\n        bytes record\\\\n    );\\\\n    // DNSRecordDeleted is emitted whenever a given node/name/resource\'s RRSET is deleted.\\\\n    event DNSRecordDeleted(bytes32 indexed node, bytes name, uint16 resource);\\\\n\\\\n    /// Obtain a DNS record.\\\\n    /// @param node the namehash of the node for which to fetch the record\\\\n    /// @param name the keccak-256 hash of the fully-qualified name for which to fetch the record\\\\n    /// @param resource the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types\\\\n    /// @return the DNS record in wire format if present, otherwise empty\\\\n    function dnsRecord(\\\\n        bytes32 node,\\\\n        bytes32 name,\\\\n        uint16 resource\\\\n    ) external view returns (bytes memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x434bf76bba71eed3e0f22b3a5b9f8aaed0ddd8b79f6a1e7c7447785be5924d3b\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/profiles/IDNSZoneResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\ninterface IDNSZoneResolver {\\\\n    // DNSZonehashChanged is emitted whenever a given node\'s zone hash is updated.\\\\n    event DNSZonehashChanged(\\\\n        bytes32 indexed node,\\\\n        bytes lastzonehash,\\\\n        bytes zonehash\\\\n    );\\\\n\\\\n    /// zonehash obtains the hash for the zone.\\\\n    /// @param node The ENS node to query.\\\\n    /// @return The associated contenthash.\\\\n    function zonehash(bytes32 node) external view returns (bytes memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x3a028c0b13721c7627c55bbf5a7d0762d5b1db1045fdc0f8e417011876bd2d29\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/profiles/IHasAddressResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\ninterface IHasAddressResolver {\\\\n    /// @notice Determine if an addresss is stored for the coin type of the associated ENS node.\\\\n    /// @param node The node to query.\\\\n    /// @param coinType The coin type.\\\\n    /// @return True if the associated address is not empty.\\\\n    function hasAddr(\\\\n        bytes32 node,\\\\n        uint256 coinType\\\\n    ) external view returns (bool);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xbe13530b8cc027517c235e422326abd36bb1152dac8546713471be2a7335cf2b\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/profiles/IInterfaceResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\ninterface IInterfaceResolver {\\\\n    event InterfaceChanged(\\\\n        bytes32 indexed node,\\\\n        bytes4 indexed interfaceID,\\\\n        address implementer\\\\n    );\\\\n\\\\n    /// Returns the address of a contract that implements the specified interface for this name.\\\\n    /// If an implementer has not been set for this interfaceID and name, the resolver will query\\\\n    /// the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\\\n    /// contract implements EIP165 and returns `true` for the specified interfaceID, its address\\\\n    /// will be returned.\\\\n    /// @param node The ENS node to query.\\\\n    /// @param interfaceID The EIP 165 interface ID to check for.\\\\n    /// @return The address that implements this interface, or 0 if the interface is unsupported.\\\\n    function interfaceImplementer(\\\\n        bytes32 node,\\\\n        bytes4 interfaceID\\\\n    ) external view returns (address);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x510176a3fe60471775328756ab025d8bafda7063f52f218728ca559b8f61a357\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/profiles/INameResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\ninterface INameResolver {\\\\n    event NameChanged(bytes32 indexed node, string name);\\\\n\\\\n    /// Returns the name associated with an ENS node, for reverse records.\\\\n    /// Defined in EIP181.\\\\n    /// @param node The ENS node to query.\\\\n    /// @return The associated name.\\\\n    function name(bytes32 node) external view returns (string memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x3ab986332e0baad7aeb4b426aace3aa1c235be5efff8db4b6f1ce501bcdd9e68\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/profiles/IPubkeyResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\ninterface IPubkeyResolver {\\\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\\\n\\\\n    /// Returns the SECP256k1 public key associated with an ENS node.\\\\n    /// Defined in EIP 619.\\\\n    /// @param node The ENS node to query\\\\n    /// @return x The X coordinate of the curve point for the public key.\\\\n    /// @return y The Y coordinate of the curve point for the public key.\\\\n    function pubkey(bytes32 node) external view returns (bytes32 x, bytes32 y);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x1a21561b58ce17db400c015882ff07f12f9bd0df0e7b9305841799aada441820\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/profiles/ITextResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\ninterface ITextResolver {\\\\n    event TextChanged(\\\\n        bytes32 indexed node,\\\\n        string indexed indexedKey,\\\\n        string key,\\\\n        string value\\\\n    );\\\\n\\\\n    /// Returns the text data associated with an ENS node and key.\\\\n    /// @param node The ENS node to query.\\\\n    /// @param key The text data key to query.\\\\n    /// @return The associated text data.\\\\n    function text(\\\\n        bytes32 node,\\\\n        string calldata key\\\\n    ) external view returns (string memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xe91c15697be2d20417cce3c58d4ecce34796986fdedc97be5b93a823be58e471\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/profiles/IVersionableResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\ninterface IVersionableResolver {\\\\n    event VersionChanged(bytes32 indexed node, uint64 newVersion);\\\\n\\\\n    function recordVersions(bytes32 node) external view returns (uint64);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xd0d09596f20c57bafb2ffa8521a8c57120e9af6c6b194f9c689d4da56f91a57c\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/profiles/InterfaceResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\nimport \\\\\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\\\\";\\\\nimport \\\\\\"../ResolverBase.sol\\\\\\";\\\\nimport \\\\\\"./AddrResolver.sol\\\\\\";\\\\nimport \\\\\\"./IInterfaceResolver.sol\\\\\\";\\\\n\\\\nabstract contract InterfaceResolver is IInterfaceResolver, AddrResolver {\\\\n    mapping(uint64 => mapping(bytes32 => mapping(bytes4 => address))) versionable_interfaces;\\\\n\\\\n    /// Sets an interface associated with a name.\\\\n    /// Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support.\\\\n    /// @param node The node to update.\\\\n    /// @param interfaceID The EIP 165 interface ID.\\\\n    /// @param implementer The address of a contract that implements this interface for this node.\\\\n    function setInterface(\\\\n        bytes32 node,\\\\n        bytes4 interfaceID,\\\\n        address implementer\\\\n    ) external virtual authorised(node) {\\\\n        versionable_interfaces[recordVersions[node]][node][\\\\n            interfaceID\\\\n        ] = implementer;\\\\n        emit InterfaceChanged(node, interfaceID, implementer);\\\\n    }\\\\n\\\\n    /// Returns the address of a contract that implements the specified interface for this name.\\\\n    /// If an implementer has not been set for this interfaceID and name, the resolver will query\\\\n    /// the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that\\\\n    /// contract implements EIP165 and returns `true` for the specified interfaceID, its address\\\\n    /// will be returned.\\\\n    /// @param node The ENS node to query.\\\\n    /// @param interfaceID The EIP 165 interface ID to check for.\\\\n    /// @return The address that implements this interface, or 0 if the interface is unsupported.\\\\n    function interfaceImplementer(\\\\n        bytes32 node,\\\\n        bytes4 interfaceID\\\\n    ) external view virtual override returns (address) {\\\\n        address implementer = versionable_interfaces[recordVersions[node]][\\\\n            node\\\\n        ][interfaceID];\\\\n        if (implementer != address(0)) {\\\\n            return implementer;\\\\n        }\\\\n\\\\n        address a = addr(node);\\\\n        if (a == address(0)) {\\\\n            return address(0);\\\\n        }\\\\n\\\\n        (bool success, bytes memory returnData) = a.staticcall(\\\\n            abi.encodeWithSignature(\\\\n                \\\\\\"supportsInterface(bytes4)\\\\\\",\\\\n                type(IERC165).interfaceId\\\\n            )\\\\n        );\\\\n        if (!success || returnData.length < 32 || returnData[31] == 0) {\\\\n            // EIP 165 not supported by target\\\\n            return address(0);\\\\n        }\\\\n\\\\n        (success, returnData) = a.staticcall(\\\\n            abi.encodeWithSignature(\\\\\\"supportsInterface(bytes4)\\\\\\", interfaceID)\\\\n        );\\\\n        if (!success || returnData.length < 32 || returnData[31] == 0) {\\\\n            // Specified interface not supported by target\\\\n            return address(0);\\\\n        }\\\\n\\\\n        return a;\\\\n    }\\\\n\\\\n    function supportsInterface(\\\\n        bytes4 interfaceID\\\\n    ) public view virtual override returns (bool) {\\\\n        return\\\\n            interfaceID == type(IInterfaceResolver).interfaceId ||\\\\n            super.supportsInterface(interfaceID);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x029b7f2fa0e763b914e2769c05b8b230aea7991f3947e5324499454e98310300\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/profiles/NameResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\nimport \\\\\\"../ResolverBase.sol\\\\\\";\\\\nimport \\\\\\"./INameResolver.sol\\\\\\";\\\\n\\\\nabstract contract NameResolver is INameResolver, ResolverBase {\\\\n    mapping(uint64 => mapping(bytes32 => string)) versionable_names;\\\\n\\\\n    /// Sets the name associated with an ENS node, for reverse records.\\\\n    /// May only be called by the owner of that node in the ENS registry.\\\\n    /// @param node The node to update.\\\\n    function setName(\\\\n        bytes32 node,\\\\n        string calldata newName\\\\n    ) external virtual authorised(node) {\\\\n        versionable_names[recordVersions[node]][node] = newName;\\\\n        emit NameChanged(node, newName);\\\\n    }\\\\n\\\\n    /// Returns the name associated with an ENS node, for reverse records.\\\\n    /// Defined in EIP181.\\\\n    /// @param node The ENS node to query.\\\\n    /// @return The associated name.\\\\n    function name(\\\\n        bytes32 node\\\\n    ) external view virtual override returns (string memory) {\\\\n        return versionable_names[recordVersions[node]][node];\\\\n    }\\\\n\\\\n    function supportsInterface(\\\\n        bytes4 interfaceID\\\\n    ) public view virtual override returns (bool) {\\\\n        return\\\\n            interfaceID == type(INameResolver).interfaceId ||\\\\n            super.supportsInterface(interfaceID);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x2bee21414404629419db708bd8b8e284e702a175c17451c4b8f0f06ce5c7a250\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/profiles/PubkeyResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\nimport \\\\\\"../ResolverBase.sol\\\\\\";\\\\nimport \\\\\\"./IPubkeyResolver.sol\\\\\\";\\\\n\\\\nabstract contract PubkeyResolver is IPubkeyResolver, ResolverBase {\\\\n    struct PublicKey {\\\\n        bytes32 x;\\\\n        bytes32 y;\\\\n    }\\\\n\\\\n    mapping(uint64 => mapping(bytes32 => PublicKey)) versionable_pubkeys;\\\\n\\\\n    /// Sets the SECP256k1 public key associated with an ENS node.\\\\n    /// @param node The ENS node to query\\\\n    /// @param x the X coordinate of the curve point for the public key.\\\\n    /// @param y the Y coordinate of the curve point for the public key.\\\\n    function setPubkey(\\\\n        bytes32 node,\\\\n        bytes32 x,\\\\n        bytes32 y\\\\n    ) external virtual authorised(node) {\\\\n        versionable_pubkeys[recordVersions[node]][node] = PublicKey(x, y);\\\\n        emit PubkeyChanged(node, x, y);\\\\n    }\\\\n\\\\n    /// Returns the SECP256k1 public key associated with an ENS node.\\\\n    /// Defined in EIP 619.\\\\n    /// @param node The ENS node to query\\\\n    /// @return x The X coordinate of the curve point for the public key.\\\\n    /// @return y The Y coordinate of the curve point for the public key.\\\\n    function pubkey(\\\\n        bytes32 node\\\\n    ) external view virtual override returns (bytes32 x, bytes32 y) {\\\\n        uint64 currentRecordVersion = recordVersions[node];\\\\n        return (\\\\n            versionable_pubkeys[currentRecordVersion][node].x,\\\\n            versionable_pubkeys[currentRecordVersion][node].y\\\\n        );\\\\n    }\\\\n\\\\n    function supportsInterface(\\\\n        bytes4 interfaceID\\\\n    ) public view virtual override returns (bool) {\\\\n        return\\\\n            interfaceID == type(IPubkeyResolver).interfaceId ||\\\\n            super.supportsInterface(interfaceID);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x697b350cd142af9ed401e1e73f395f039bb12cdb503bc6c3488482788d69587b\\",\\"license\\":\\"MIT\\"},\\"contracts/resolvers/profiles/TextResolver.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.4;\\\\n\\\\nimport \\\\\\"../ResolverBase.sol\\\\\\";\\\\nimport \\\\\\"./ITextResolver.sol\\\\\\";\\\\n\\\\nabstract contract TextResolver is ITextResolver, ResolverBase {\\\\n    mapping(uint64 => mapping(bytes32 => mapping(string => string))) versionable_texts;\\\\n\\\\n    /// Sets the text data associated with an ENS node and key.\\\\n    /// May only be called by the owner of that node in the ENS registry.\\\\n    /// @param node The node to update.\\\\n    /// @param key The key to set.\\\\n    /// @param value The text data value to set.\\\\n    function setText(\\\\n        bytes32 node,\\\\n        string calldata key,\\\\n        string calldata value\\\\n    ) external virtual authorised(node) {\\\\n        versionable_texts[recordVersions[node]][node][key] = value;\\\\n        emit TextChanged(node, key, key, value);\\\\n    }\\\\n\\\\n    /// Returns the text data associated with an ENS node and key.\\\\n    /// @param node The ENS node to query.\\\\n    /// @param key The text data key to query.\\\\n    /// @return The associated text data.\\\\n    function text(\\\\n        bytes32 node,\\\\n        string calldata key\\\\n    ) external view virtual override returns (string memory) {\\\\n        return versionable_texts[recordVersions[node]][node][key];\\\\n    }\\\\n\\\\n    function supportsInterface(\\\\n        bytes4 interfaceID\\\\n    ) public view virtual override returns (bool) {\\\\n        return\\\\n            interfaceID == type(ITextResolver).interfaceId ||\\\\n            super.supportsInterface(interfaceID);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x82a914dfe1b30634e729c03450e4c9ef4afd53919993231a92fb9cca2f8b3a83\\",\\"license\\":\\"MIT\\"},\\"contracts/reverseRegistrar/IReverseRegistrar.sol\\":{\\"content\\":\\"pragma solidity >=0.8.4;\\\\n\\\\ninterface IReverseRegistrar {\\\\n    function setDefaultResolver(address resolver) external;\\\\n\\\\n    function claim(address owner) external returns (bytes32);\\\\n\\\\n    function claimForAddr(\\\\n        address addr,\\\\n        address owner,\\\\n        address resolver\\\\n    ) external returns (bytes32);\\\\n\\\\n    function claimWithResolver(\\\\n        address owner,\\\\n        address resolver\\\\n    ) external returns (bytes32);\\\\n\\\\n    function setName(string memory name) external returns (bytes32);\\\\n\\\\n    function setNameForAddr(\\\\n        address addr,\\\\n        address owner,\\\\n        address resolver,\\\\n        string memory name\\\\n    ) external returns (bytes32);\\\\n\\\\n    function node(address addr) external pure returns (bytes32);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x83adfcf6da72b1bcd1e3ac387afe5fc7fdf7f2ac28b7601544d2ca4b9d45d159\\"},\\"contracts/reverseRegistrar/ReverseClaimer.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity >=0.8.17 <0.9.0;\\\\n\\\\nimport {ENS} from \\\\\\"../registry/ENS.sol\\\\\\";\\\\nimport {IReverseRegistrar} from \\\\\\"../reverseRegistrar/IReverseRegistrar.sol\\\\\\";\\\\n\\\\ncontract ReverseClaimer {\\\\n    bytes32 constant ADDR_REVERSE_NODE =\\\\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\\\n\\\\n    constructor(ENS ens, address claimant) {\\\\n        IReverseRegistrar reverseRegistrar = IReverseRegistrar(\\\\n            ens.owner(ADDR_REVERSE_NODE)\\\\n        );\\\\n        reverseRegistrar.claim(claimant);\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x78a28627241535b595f6fff476a1fa7acc90c80684fe7784734920fc8af6fc22\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/BytesUtils.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.4;\\\\n\\\\nlibrary BytesUtils {\\\\n    error OffsetOutOfBoundsError(uint256 offset, uint256 length);\\\\n\\\\n    /// @dev Returns the keccak-256 hash of a byte range.\\\\n    /// @param self The byte string to hash.\\\\n    /// @param offset The position to start hashing at.\\\\n    /// @param len The number of bytes to hash.\\\\n    /// @return ret The hash of the byte range.\\\\n    function keccak(\\\\n        bytes memory self,\\\\n        uint256 offset,\\\\n        uint256 len\\\\n    ) internal pure returns (bytes32 ret) {\\\\n        require(offset + len <= self.length);\\\\n        assembly {\\\\n            ret := keccak256(add(add(self, 32), offset), len)\\\\n        }\\\\n    }\\\\n\\\\n    /// @dev Returns a positive number if `other` comes lexicographically after\\\\n    ///      `self`, a negative number if it comes before, or zero if the\\\\n    ///      contents of the two bytes are equal.\\\\n    /// @param self The first bytes to compare.\\\\n    /// @param other The second bytes to compare.\\\\n    /// @return The result of the comparison.\\\\n    function compare(\\\\n        bytes memory self,\\\\n        bytes memory other\\\\n    ) internal pure returns (int256) {\\\\n        return compare(self, 0, self.length, other, 0, other.length);\\\\n    }\\\\n\\\\n    /// @dev Returns a positive number if `other` comes lexicographically after\\\\n    ///      `self`, a negative number if it comes before, or zero if the\\\\n    ///      contents of the two bytes are equal. Comparison is done per-rune,\\\\n    ///      on unicode codepoints.\\\\n    /// @param self The first bytes to compare.\\\\n    /// @param offset The offset of self.\\\\n    /// @param len    The length of self.\\\\n    /// @param other The second bytes to compare.\\\\n    /// @param otheroffset The offset of the other string.\\\\n    /// @param otherlen    The length of the other string.\\\\n    /// @return The result of the comparison.\\\\n    function compare(\\\\n        bytes memory self,\\\\n        uint256 offset,\\\\n        uint256 len,\\\\n        bytes memory other,\\\\n        uint256 otheroffset,\\\\n        uint256 otherlen\\\\n    ) internal pure returns (int256) {\\\\n        if (offset + len > self.length) {\\\\n            revert OffsetOutOfBoundsError(offset + len, self.length);\\\\n        }\\\\n        if (otheroffset + otherlen > other.length) {\\\\n            revert OffsetOutOfBoundsError(otheroffset + otherlen, other.length);\\\\n        }\\\\n\\\\n        uint256 shortest = len;\\\\n        if (otherlen < len) shortest = otherlen;\\\\n\\\\n        uint256 selfptr;\\\\n        uint256 otherptr;\\\\n\\\\n        assembly {\\\\n            selfptr := add(self, add(offset, 32))\\\\n            otherptr := add(other, add(otheroffset, 32))\\\\n        }\\\\n        for (uint256 idx = 0; idx < shortest; idx += 32) {\\\\n            uint256 a;\\\\n            uint256 b;\\\\n            assembly {\\\\n                a := mload(selfptr)\\\\n                b := mload(otherptr)\\\\n            }\\\\n            if (a != b) {\\\\n                uint256 rest = shortest - idx;\\\\n                if (rest < 32) {\\\\n                    // shift out the irrelevant bits\\\\n                    rest = (32 - rest) << 3; // bits to drop\\\\n                    a >>= rest;\\\\n                    b >>= rest;\\\\n                }\\\\n                if (a < b) {\\\\n                    return -1;\\\\n                } else if (a > b) {\\\\n                    return 1;\\\\n                }\\\\n            }\\\\n            selfptr += 32;\\\\n            otherptr += 32;\\\\n        }\\\\n\\\\n        return int256(len) - int256(otherlen);\\\\n    }\\\\n\\\\n    /// @dev Returns true if the two byte ranges are equal.\\\\n    /// @param self The first byte range to compare.\\\\n    /// @param offset The offset into the first byte range.\\\\n    /// @param other The second byte range to compare.\\\\n    /// @param otherOffset The offset into the second byte range.\\\\n    /// @param len The number of bytes to compare\\\\n    /// @return True if the byte ranges are equal, false otherwise.\\\\n    function equals(\\\\n        bytes memory self,\\\\n        uint256 offset,\\\\n        bytes memory other,\\\\n        uint256 otherOffset,\\\\n        uint256 len\\\\n    ) internal pure returns (bool) {\\\\n        return keccak(self, offset, len) == keccak(other, otherOffset, len);\\\\n    }\\\\n\\\\n    /// @dev Returns true if the two byte ranges are equal with offsets.\\\\n    /// @param self The first byte range to compare.\\\\n    /// @param offset The offset into the first byte range.\\\\n    /// @param other The second byte range to compare.\\\\n    /// @param otherOffset The offset into the second byte range.\\\\n    /// @return True if the byte ranges are equal, false otherwise.\\\\n    function equals(\\\\n        bytes memory self,\\\\n        uint256 offset,\\\\n        bytes memory other,\\\\n        uint256 otherOffset\\\\n    ) internal pure returns (bool) {\\\\n        return\\\\n            keccak(self, offset, self.length - offset) ==\\\\n            keccak(other, otherOffset, other.length - otherOffset);\\\\n    }\\\\n\\\\n    /// @dev Compares a range of \'self\' to all of \'other\' and returns True iff\\\\n    ///      they are equal.\\\\n    /// @param self The first byte range to compare.\\\\n    /// @param offset The offset into the first byte range.\\\\n    /// @param other The second byte range to compare.\\\\n    /// @return True if the byte ranges are equal, false otherwise.\\\\n    function equals(\\\\n        bytes memory self,\\\\n        uint256 offset,\\\\n        bytes memory other\\\\n    ) internal pure returns (bool) {\\\\n        return\\\\n            self.length == offset + other.length &&\\\\n            equals(self, offset, other, 0, other.length);\\\\n    }\\\\n\\\\n    /// @dev Returns true if the two byte ranges are equal.\\\\n    /// @param self The first byte range to compare.\\\\n    /// @param other The second byte range to compare.\\\\n    /// @return True if the byte ranges are equal, false otherwise.\\\\n    function equals(\\\\n        bytes memory self,\\\\n        bytes memory other\\\\n    ) internal pure returns (bool) {\\\\n        return\\\\n            self.length == other.length &&\\\\n            equals(self, 0, other, 0, self.length);\\\\n    }\\\\n\\\\n    /// @dev Returns the 8-bit number at the specified index of self.\\\\n    /// @param self The byte string.\\\\n    /// @param idx The index into the bytes\\\\n    /// @return ret The specified 8 bits of the string, interpreted as an integer.\\\\n    function readUint8(\\\\n        bytes memory self,\\\\n        uint256 idx\\\\n    ) internal pure returns (uint8 ret) {\\\\n        return uint8(self[idx]);\\\\n    }\\\\n\\\\n    /// @dev Returns the 16-bit number at the specified index of self.\\\\n    /// @param self The byte string.\\\\n    /// @param idx The index into the bytes\\\\n    /// @return ret The specified 16 bits of the string, interpreted as an integer.\\\\n    function readUint16(\\\\n        bytes memory self,\\\\n        uint256 idx\\\\n    ) internal pure returns (uint16 ret) {\\\\n        require(idx + 2 <= self.length);\\\\n        assembly {\\\\n            ret := and(mload(add(add(self, 2), idx)), 0xFFFF)\\\\n        }\\\\n    }\\\\n\\\\n    /// @dev Returns the 32-bit number at the specified index of self.\\\\n    /// @param self The byte string.\\\\n    /// @param idx The index into the bytes\\\\n    /// @return ret The specified 32 bits of the string, interpreted as an integer.\\\\n    function readUint32(\\\\n        bytes memory self,\\\\n        uint256 idx\\\\n    ) internal pure returns (uint32 ret) {\\\\n        require(idx + 4 <= self.length);\\\\n        assembly {\\\\n            ret := and(mload(add(add(self, 4), idx)), 0xFFFFFFFF)\\\\n        }\\\\n    }\\\\n\\\\n    /// @dev Returns the 32 byte value at the specified index of self.\\\\n    /// @param self The byte string.\\\\n    /// @param idx The index into the bytes\\\\n    /// @return ret The specified 32 bytes of the string.\\\\n    function readBytes32(\\\\n        bytes memory self,\\\\n        uint256 idx\\\\n    ) internal pure returns (bytes32 ret) {\\\\n        require(idx + 32 <= self.length);\\\\n        assembly {\\\\n            ret := mload(add(add(self, 32), idx))\\\\n        }\\\\n    }\\\\n\\\\n    /// @dev Returns the 32 byte value at the specified index of self.\\\\n    /// @param self The byte string.\\\\n    /// @param idx The index into the bytes\\\\n    /// @return ret The specified 32 bytes of the string.\\\\n    function readBytes20(\\\\n        bytes memory self,\\\\n        uint256 idx\\\\n    ) internal pure returns (bytes20 ret) {\\\\n        require(idx + 20 <= self.length);\\\\n        assembly {\\\\n            ret := and(\\\\n                mload(add(add(self, 32), idx)),\\\\n                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000\\\\n            )\\\\n        }\\\\n    }\\\\n\\\\n    /// @dev Returns the n byte value at the specified index of self.\\\\n    /// @param self The byte string.\\\\n    /// @param idx The index into the bytes.\\\\n    /// @param len The number of bytes.\\\\n    /// @return ret The specified 32 bytes of the string.\\\\n    function readBytesN(\\\\n        bytes memory self,\\\\n        uint256 idx,\\\\n        uint256 len\\\\n    ) internal pure returns (bytes32 ret) {\\\\n        require(len <= 32);\\\\n        require(idx + len <= self.length);\\\\n        assembly {\\\\n            let mask := not(sub(exp(256, sub(32, len)), 1))\\\\n            ret := and(mload(add(add(self, 32), idx)), mask)\\\\n        }\\\\n    }\\\\n\\\\n    function memcpy(uint256 dest, uint256 src, uint256 len) private pure {\\\\n        // Copy word-length chunks while possible\\\\n        for (; len >= 32; len -= 32) {\\\\n            assembly {\\\\n                mstore(dest, mload(src))\\\\n            }\\\\n            dest += 32;\\\\n            src += 32;\\\\n        }\\\\n\\\\n        // Copy remaining bytes\\\\n        unchecked {\\\\n            uint256 mask = (256 ** (32 - len)) - 1;\\\\n            assembly {\\\\n                let srcpart := and(mload(src), not(mask))\\\\n                let destpart := and(mload(dest), mask)\\\\n                mstore(dest, or(destpart, srcpart))\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    /// @dev Copies a substring into a new byte string.\\\\n    /// @param self The byte string to copy from.\\\\n    /// @param offset The offset to start copying at.\\\\n    /// @param len The number of bytes to copy.\\\\n    function substring(\\\\n        bytes memory self,\\\\n        uint256 offset,\\\\n        uint256 len\\\\n    ) internal pure returns (bytes memory) {\\\\n        require(offset + len <= self.length);\\\\n\\\\n        bytes memory ret = new bytes(len);\\\\n        uint256 dest;\\\\n        uint256 src;\\\\n\\\\n        assembly {\\\\n            dest := add(ret, 32)\\\\n            src := add(add(self, 32), offset)\\\\n        }\\\\n        memcpy(dest, src, len);\\\\n\\\\n        return ret;\\\\n    }\\\\n\\\\n    // Maps characters from 0x30 to 0x7A to their base32 values.\\\\n    // 0xFF represents invalid characters in that range.\\\\n    bytes constant base32HexTable =\\\\n        hex\\\\\\"00010203040506070809FFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1FFFFFFFFFFFFFFFFFFFFF0A0B0C0D0E0F101112131415161718191A1B1C1D1E1F\\\\\\";\\\\n\\\\n    /// @dev Decodes unpadded base32 data of up to one word in length.\\\\n    /// @param self The data to decode.\\\\n    /// @param off Offset into the string to start at.\\\\n    /// @param len Number of characters to decode.\\\\n    /// @return The decoded data, left aligned.\\\\n    function base32HexDecodeWord(\\\\n        bytes memory self,\\\\n        uint256 off,\\\\n        uint256 len\\\\n    ) internal pure returns (bytes32) {\\\\n        require(len <= 52);\\\\n\\\\n        uint256 ret = 0;\\\\n        uint8 decoded;\\\\n        for (uint256 i = 0; i < len; i++) {\\\\n            bytes1 char = self[off + i];\\\\n            require(char >= 0x30 && char <= 0x7A);\\\\n            decoded = uint8(base32HexTable[uint256(uint8(char)) - 0x30]);\\\\n            require(decoded <= 0x20);\\\\n            if (i == len - 1) {\\\\n                break;\\\\n            }\\\\n            ret = (ret << 5) | decoded;\\\\n        }\\\\n\\\\n        uint256 bitlen = len * 5;\\\\n        if (len % 8 == 0) {\\\\n            // Multiple of 8 characters, no padding\\\\n            ret = (ret << 5) | decoded;\\\\n        } else if (len % 8 == 2) {\\\\n            // Two extra characters - 1 byte\\\\n            ret = (ret << 3) | (decoded >> 2);\\\\n            bitlen -= 2;\\\\n        } else if (len % 8 == 4) {\\\\n            // Four extra characters - 2 bytes\\\\n            ret = (ret << 1) | (decoded >> 4);\\\\n            bitlen -= 4;\\\\n        } else if (len % 8 == 5) {\\\\n            // Five extra characters - 3 bytes\\\\n            ret = (ret << 4) | (decoded >> 1);\\\\n            bitlen -= 1;\\\\n        } else if (len % 8 == 7) {\\\\n            // Seven extra characters - 4 bytes\\\\n            ret = (ret << 2) | (decoded >> 3);\\\\n            bitlen -= 3;\\\\n        } else {\\\\n            revert();\\\\n        }\\\\n\\\\n        return bytes32(ret << (256 - bitlen));\\\\n    }\\\\n\\\\n    /// @dev Finds the first occurrence of the byte `needle` in `self`.\\\\n    /// @param self The string to search\\\\n    /// @param off The offset to start searching at\\\\n    /// @param len The number of bytes to search\\\\n    /// @param needle The byte to search for\\\\n    /// @return The offset of `needle` in `self`, or 2**256-1 if it was not found.\\\\n    function find(\\\\n        bytes memory self,\\\\n        uint256 off,\\\\n        uint256 len,\\\\n        bytes1 needle\\\\n    ) internal pure returns (uint256) {\\\\n        for (uint256 idx = off; idx < off + len; idx++) {\\\\n            if (self[idx] == needle) {\\\\n                return idx;\\\\n            }\\\\n        }\\\\n        return type(uint256).max;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x91aa93c6538538518436746a72ed262b677c5216209b7a7f32dbf5f87018ba52\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/ENSIP19.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport {HexUtils} from \\\\\\"../utils/HexUtils.sol\\\\\\";\\\\nimport {NameCoder} from \\\\\\"../utils/NameCoder.sol\\\\\\";\\\\n\\\\nuint32 constant CHAIN_ID_ETH = 1;\\\\n\\\\nuint256 constant COIN_TYPE_ETH = 60;\\\\nuint256 constant COIN_TYPE_DEFAULT = 1 << 31; // 0x8000_0000\\\\n\\\\nstring constant SLUG_ETH = \\\\\\"addr\\\\\\"; // <=> COIN_TYPE_ETH\\\\nstring constant SLUG_DEFAULT = \\\\\\"default\\\\\\"; // <=> COIN_TYPE_DEFAULT\\\\nstring constant TLD_REVERSE = \\\\\\"reverse\\\\\\";\\\\n\\\\n/// @dev Library for generating reverse names according to ENSIP-19.\\\\n/// https://docs.ens.domains/ensip/19\\\\nlibrary ENSIP19 {\\\\n    /// @dev The supplied address was `0x`.\\\\n    error EmptyAddress();\\\\n\\\\n    /// @dev Extract Chain ID from `coinType`.\\\\n    /// @param coinType The coin type.\\\\n    /// @return The Chain ID or 0 if non-EVM Chain.\\\\n    function chainFromCoinType(\\\\n        uint256 coinType\\\\n    ) internal pure returns (uint32) {\\\\n        if (coinType == COIN_TYPE_ETH) return CHAIN_ID_ETH;\\\\n        coinType ^= COIN_TYPE_DEFAULT;\\\\n        return uint32(coinType < COIN_TYPE_DEFAULT ? coinType : 0);\\\\n    }\\\\n\\\\n    /// @dev Determine if Coin Type is for an EVM address.\\\\n    /// @param coinType The coin type.\\\\n    /// @return True if coin type represents an EVM address.\\\\n    function isEVMCoinType(uint256 coinType) internal pure returns (bool) {\\\\n        return coinType == COIN_TYPE_DEFAULT || chainFromCoinType(coinType) > 0;\\\\n    }\\\\n\\\\n    /// @dev Generate Reverse Name from Address + Coin Type.\\\\n    ///      Reverts `EmptyAddress` if `addressBytes` is `0x`.\\\\n    /// @param addressBytes The input address.\\\\n    /// @param coinType The coin type.\\\\n    /// @return The ENS reverse name, eg. `1234abcd.addr.reverse`.\\\\n    function reverseName(\\\\n        bytes memory addressBytes,\\\\n        uint256 coinType\\\\n    ) internal pure returns (string memory) {\\\\n        if (addressBytes.length == 0) {\\\\n            revert EmptyAddress();\\\\n        }\\\\n        return\\\\n            string(\\\\n                abi.encodePacked(\\\\n                    HexUtils.bytesToHex(addressBytes),\\\\n                    bytes1(\\\\\\".\\\\\\"),\\\\n                    coinType == COIN_TYPE_ETH\\\\n                        ? SLUG_ETH\\\\n                        : coinType == COIN_TYPE_DEFAULT\\\\n                            ? SLUG_DEFAULT\\\\n                            : HexUtils.unpaddedUintToHex(coinType, true),\\\\n                    bytes1(\\\\\\".\\\\\\"),\\\\n                    TLD_REVERSE\\\\n                )\\\\n            );\\\\n    }\\\\n\\\\n    /// @dev Parse Reverse Name into Address + Coin Type.\\\\n    ///      Matches: /^[0-9a-fA-F]+\\\\\\\\.([0-9a-f]{1,64}|addr|default)\\\\\\\\.reverse$/.\\\\n    ///      Reverts `DNSDecodingFailed`.\\\\n    /// @param name The DNS-encoded name.\\\\n    /// @return addressBytes The address or empty if invalid.\\\\n    /// @return coinType The coin type.\\\\n    function parse(\\\\n        bytes memory name\\\\n    ) internal pure returns (bytes memory addressBytes, uint256 coinType) {\\\\n        (, uint256 offset) = NameCoder.readLabel(name, 0);\\\\n        bool valid;\\\\n        (addressBytes, valid) = HexUtils.hexToBytes(name, 1, offset);\\\\n        if (!valid || addressBytes.length == 0) return (\\\\\\"\\\\\\", 0); // addressBytes not 1+ hex\\\\n        (valid, coinType) = parseNamespace(name, offset);\\\\n        if (!valid) return (\\\\\\"\\\\\\", 0); // invalid namespace\\\\n    }\\\\n\\\\n    /// @dev Parse Reverse Namespace into Coin Type.\\\\n    ///      Matches: /^([0-9a-f]{1,64}|addr|default)\\\\\\\\.reverse$/.\\\\n    ///      Reverts `DNSDecodingFailed`.\\\\n    /// @param name The DNS-encoded name.\\\\n    /// @param offset The offset to begin parsing.\\\\n    /// @return valid True if a valid reverse namespace.\\\\n    /// @return coinType The coin type.\\\\n    function parseNamespace(\\\\n        bytes memory name,\\\\n        uint256 offset\\\\n    ) internal pure returns (bool valid, uint256 coinType) {\\\\n        (bytes32 labelHash, uint256 offsetTLD) = NameCoder.readLabel(\\\\n            name,\\\\n            offset\\\\n        );\\\\n        if (labelHash == keccak256(bytes(SLUG_ETH))) {\\\\n            coinType = COIN_TYPE_ETH;\\\\n        } else if (labelHash == keccak256(bytes(SLUG_DEFAULT))) {\\\\n            coinType = COIN_TYPE_DEFAULT;\\\\n        } else if (labelHash == bytes32(0)) {\\\\n            return (false, 0); // no slug\\\\n        } else {\\\\n            (bytes32 word, bool validHex) = HexUtils.hexStringToBytes32(\\\\n                name,\\\\n                1 + offset,\\\\n                offsetTLD\\\\n            );\\\\n            if (!validHex) return (false, 0); // invalid coinType or too long\\\\n            coinType = uint256(word);\\\\n        }\\\\n        (labelHash, offset) = NameCoder.readLabel(name, offsetTLD);\\\\n        if (labelHash != keccak256(bytes(TLD_REVERSE))) return (false, 0); // invalid tld\\\\n        (labelHash, ) = NameCoder.readLabel(name, offset);\\\\n        if (labelHash != bytes32(0)) return (false, 0); // not tld\\\\n        valid = true;\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x417e62b642c6a6c2efbb4601649b2fa1a9c46dc44c00869f687c074bfbe45945\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/HexUtils.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.4;\\\\n\\\\nlibrary HexUtils {\\\\n    /// @dev Convert `hexString[pos:end]` to `bytes32`.\\\\n    ///      Accepts 0-64 hex-chars.\\\\n    ///      Uses right alignment: `1` &rarr; `0000000000000000000000000000000000000000000000000000000000000001`.\\\\n    /// @param hexString The string to parse.\\\\n    /// @param pos The index to start parsing.\\\\n    /// @param end The (exclusive) index to stop parsing.\\\\n    /// @return word The parsed bytes32.\\\\n    /// @return valid True if the parse was successful.\\\\n    function hexStringToBytes32(\\\\n        bytes memory hexString,\\\\n        uint256 pos,\\\\n        uint256 end\\\\n    ) internal pure returns (bytes32 word, bool valid) {\\\\n        uint256 nibbles = end - pos;\\\\n        if (nibbles > 64 || end > hexString.length) {\\\\n            return (bytes32(0), false); // too large or out of bounds\\\\n        }\\\\n        uint256 src;\\\\n        assembly {\\\\n            src := add(add(hexString, 32), pos)\\\\n        }\\\\n        valid = unsafeBytes(src, 0, nibbles);\\\\n        assembly {\\\\n            let pad := sub(32, shr(1, add(nibbles, 1))) // number of bytes\\\\n            word := shr(shl(3, pad), mload(0)) // right align\\\\n        }\\\\n    }\\\\n\\\\n    /// @dev Convert `hexString[pos:end]` to `address`.\\\\n    ///      Accepts exactly 40 hex-chars.\\\\n    /// @param hexString The string to parse.\\\\n    /// @param pos The index to start parsing.\\\\n    /// @param end The (exclusive) index to stop parsing.\\\\n    /// @return addr The parsed address.\\\\n    /// @return valid True if the parse was successful.\\\\n    function hexToAddress(\\\\n        bytes memory hexString,\\\\n        uint256 pos,\\\\n        uint256 end\\\\n    ) internal pure returns (address addr, bool valid) {\\\\n        if (end - pos != 40) return (address(0), false); // wrong length\\\\n        bytes32 word;\\\\n        (word, valid) = hexStringToBytes32(hexString, pos, end);\\\\n        addr = address(uint160(uint256(word)));\\\\n    }\\\\n\\\\n    /// @dev Convert `hexString[pos:end]` to `bytes`.\\\\n    ///      Accepts 0+ hex-chars.\\\\n    /// @param pos The index to start parsing.\\\\n    /// @param end The (exclusive) index to stop parsing.\\\\n    /// @return v The parsed bytes.\\\\n    /// @return valid True if the parse was successful.\\\\n    function hexToBytes(\\\\n        bytes memory hexString,\\\\n        uint256 pos,\\\\n        uint256 end\\\\n    ) internal pure returns (bytes memory v, bool valid) {\\\\n        uint256 nibbles = end - pos;\\\\n        v = new bytes((1 + nibbles) >> 1); // round up\\\\n        uint256 src;\\\\n        uint256 dst;\\\\n        assembly {\\\\n            src := add(add(hexString, 32), pos)\\\\n            dst := add(v, 32)\\\\n        }\\\\n        valid = unsafeBytes(src, dst, nibbles);\\\\n    }\\\\n\\\\n    /// @dev Convert arbitrary hex-encoded memory to bytes.\\\\n    ///      If nibbles is odd, leading hex-char is padded, eg. `F` &rarr; `0x0F`.\\\\n    ///      Matches: /^[0-9a-f]*$/i.\\\\n    /// @param src The memory offset of first hex-char of input.\\\\n    /// @param dst The memory offset of first byte of output (cannot alias `src`).\\\\n    /// @param nibbles The number of hex-chars to convert.\\\\n    /// @return valid True if all characters were hex.\\\\n    function unsafeBytes(\\\\n        uint256 src,\\\\n        uint256 dst,\\\\n        uint256 nibbles\\\\n    ) internal pure returns (bool valid) {\\\\n        assembly {\\\\n            function getHex(c, i) -> ascii {\\\\n                c := byte(i, c)\\\\n                // chars 48-57: 0-9\\\\n                if and(gt(c, 47), lt(c, 58)) {\\\\n                    ascii := sub(c, 48)\\\\n                    leave\\\\n                }\\\\n                // chars 65-70: A-F\\\\n                if and(gt(c, 64), lt(c, 71)) {\\\\n                    ascii := add(sub(c, 65), 10)\\\\n                    leave\\\\n                }\\\\n                // chars 97-102: a-f\\\\n                if and(gt(c, 96), lt(c, 103)) {\\\\n                    ascii := add(sub(c, 97), 10)\\\\n                    leave\\\\n                }\\\\n                // invalid char\\\\n                ascii := 0x100\\\\n            }\\\\n            valid := true\\\\n            let end := add(src, nibbles)\\\\n            if and(nibbles, 1) {\\\\n                let b := getHex(mload(src), 0) // \\\\\\"f\\\\\\" -> 15\\\\n                mstore8(dst, b) // write ascii byte\\\\n                src := add(src, 1) // update pointers\\\\n                dst := add(dst, 1)\\\\n                if gt(b, 255) {\\\\n                    valid := false\\\\n                    src := end // terminate loop\\\\n                }\\\\n            }\\\\n            for {} lt(src, end) {\\\\n                src := add(src, 2) // 2 nibbles\\\\n                dst := add(dst, 1) // per byte\\\\n            } {\\\\n                let word := mload(src) // read word (left aligned)\\\\n                let b := or(shl(4, getHex(word, 0)), getHex(word, 1)) // \\\\\\"ff\\\\\\" -> 255\\\\n                if gt(b, 255) {\\\\n                    valid := false\\\\n                    break\\\\n                }\\\\n                mstore8(dst, b) // write ascii byte\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    /// @dev Format `address` as a hex string.\\\\n    /// @param addr The address to format.\\\\n    /// @return hexString The corresponding hex string w/o a 0x-prefix.\\\\n    function addressToHex(\\\\n        address addr\\\\n    ) internal pure returns (string memory hexString) {\\\\n        // return bytesToHex(abi.encodePacked(addr));\\\\n        hexString = new string(40);\\\\n        uint256 dst;\\\\n        assembly {\\\\n            mstore(0, addr)\\\\n            dst := add(hexString, 32)\\\\n        }\\\\n        unsafeHex(12, dst, 40);\\\\n    }\\\\n\\\\n    /// @dev Format `uint256` as a variable-length hex string without zero padding.\\\\n    /// * unpaddedUintToHex(0, true)  = \\\\\\"0\\\\\\"\\\\n    /// * unpaddedUintToHex(1, true)  = \\\\\\"1\\\\\\"\\\\n    /// * unpaddedUintToHex(0, false) = \\\\\\"00\\\\\\"\\\\n    /// * unpaddedUintToHex(1, false) = \\\\\\"01\\\\\\"\\\\n    /// @param value The number to format.\\\\n    /// @param dropZeroNibble If true, the leading byte will use one nibble if less than 16.\\\\n    /// @return hexString The corresponding hex string w/o an 0x-prefix.\\\\n    function unpaddedUintToHex(\\\\n        uint256 value,\\\\n        bool dropZeroNibble\\\\n    ) internal pure returns (string memory hexString) {\\\\n        uint256 temp = value;\\\\n        uint256 shift;\\\\n        for (uint256 b = 128; b >= 8; b >>= 1) {\\\\n            if (temp < (1 << b)) {\\\\n                shift += b; // number of zero upper bits\\\\n            } else {\\\\n                temp >>= b; // shift away lower half\\\\n            }\\\\n        }\\\\n        if (dropZeroNibble && temp < 16) shift += 4;\\\\n        uint256 nibbles = 64 - (shift >> 2);\\\\n        hexString = new string(nibbles);\\\\n        uint256 dst;\\\\n        assembly {\\\\n            mstore(0, shl(shift, value)) // left-align\\\\n            dst := add(hexString, 32)\\\\n        }\\\\n        unsafeHex(0, dst, nibbles);\\\\n    }\\\\n\\\\n    /// @dev Format `bytes` as a hex string.\\\\n    /// @param v The bytes to format.\\\\n    /// @return hexString The corresponding hex string w/o a 0x-prefix.\\\\n    function bytesToHex(\\\\n        bytes memory v\\\\n    ) internal pure returns (string memory hexString) {\\\\n        uint256 nibbles = v.length << 1;\\\\n        hexString = new string(nibbles);\\\\n        uint256 src;\\\\n        uint256 dst;\\\\n        assembly {\\\\n            src := add(v, 32)\\\\n            dst := add(hexString, 32)\\\\n        }\\\\n        unsafeHex(src, dst, nibbles);\\\\n    }\\\\n\\\\n    /// @dev Converts arbitrary memory to a hex string.\\\\n    /// @param src The memory offset of first nibble of input.\\\\n    /// @param dst The memory offset of first hex-char of output (can alias `src`).\\\\n    /// @param nibbles The number of nibbles to convert and the byte-length of the output.\\\\n    function unsafeHex(\\\\n        uint256 src,\\\\n        uint256 dst,\\\\n        uint256 nibbles\\\\n    ) internal pure {\\\\n        unchecked {\\\\n            for (uint256 end = dst + nibbles; dst < end; src += 32) {\\\\n                uint256 word;\\\\n                assembly {\\\\n                    word := mload(src)\\\\n                }\\\\n                for (uint256 shift = 256; dst < end && shift > 0; dst++) {\\\\n                    uint256 b = (word >> (shift -= 4)) & 15; // each nibble\\\\n                    b = b < 10 ? b + 0x30 : b + 0x57; // (\\\\\\"a\\\\\\" - 10) => 0x57\\\\n                    assembly {\\\\n                        mstore8(dst, b)\\\\n                    }\\\\n                }\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x48e51ac631fabaa3e659cdc9f3c5743fa76e999213d65e931c486f9375dd2d4f\\",\\"license\\":\\"MIT\\"},\\"contracts/utils/NameCoder.sol\\":{\\"content\\":\\"// SPDX-License-Identifier: MIT\\\\npragma solidity ^0.8.0;\\\\n\\\\nimport {HexUtils} from \\\\\\"../utils/HexUtils.sol\\\\\\";\\\\n\\\\n/// @dev Library for encoding/decoding names.\\\\n///\\\\n/// An ENS name is stop-separated labels, eg. \\\\\\"aaa.bb.c\\\\\\".\\\\n///\\\\n/// A DNS-encoded name is composed of byte length-prefixed labels with a terminator byte.\\\\n/// eg. \\\\\\"\\\\\\\\x03aaa\\\\\\\\x02bb\\\\\\\\x01c\\\\\\\\x00\\\\\\".\\\\n/// - maximum label length is 255 bytes.\\\\n/// - length = 0 is reserved for the terminator (root).\\\\n///\\\\n/// To encode a label larger than 255 bytes, use a hashed label.\\\\n/// A label of any length can be converted to a hashed label.\\\\n///\\\\n/// A hashed label is encoded as \\\\\\"[\\\\\\" + toHex(keccak256(label)) + \\\\\\"]\\\\\\".\\\\n/// eg. [af2caa1c2ca1d027f1ac823b529d0a67cd144264b2789fa2ea4d63a67c7103cc] = \\\\\\"vitalik\\\\\\".\\\\n/// - always 66 bytes.\\\\n/// - matches: `/^\\\\\\\\[[0-9a-f]{64}\\\\\\\\]$/`.\\\\n///\\\\n/// w/o hashed labels: `dns.length == 2 + ens.length` and the mapping is injective.\\\\n///  w/ hashed labels: `dns.length == 2 + ens.split(\'.\').map(x => x.utf8Length).sum(n => n > 255 ? 66 : n)`.\\\\nlibrary NameCoder {\\\\n    /// @dev The DNS-encoded name is malformed.\\\\n    error DNSDecodingFailed(bytes dns);\\\\n\\\\n    /// @dev A label of the ENS name has an invalid size.\\\\n    error DNSEncodingFailed(string ens);\\\\n\\\\n    /// @dev Same as `BytesUtils.readLabel()` but supports hashed labels.\\\\n    ///      Only the last labelHash is zero.\\\\n    ///      Disallows hashed label of zero (eg. `[0..0]`) to prevent confusion with terminator.\\\\n    ///      Reverts `DNSDecodingFailed`.\\\\n    /// @param name The DNS-encoded name.\\\\n    /// @param idx The offset into `name` to start reading.\\\\n    /// @return labelHash The resulting labelhash.\\\\n    /// @return newIdx The offset into `name` of the next label.\\\\n    function readLabel(\\\\n        bytes memory name,\\\\n        uint256 idx\\\\n    ) internal pure returns (bytes32 labelHash, uint256 newIdx) {\\\\n        if (idx >= name.length) revert DNSDecodingFailed(name); // \\\\\\"readLabel: expected length\\\\\\"\\\\n        uint256 len = uint256(uint8(name[idx++]));\\\\n        newIdx = idx + len;\\\\n        if (newIdx > name.length) revert DNSDecodingFailed(name); // \\\\\\"readLabel: expected label\\\\\\"\\\\n        if (len == 66 && name[idx] == \\\\\\"[\\\\\\" && name[newIdx - 1] == \\\\\\"]\\\\\\") {\\\\n            bool valid;\\\\n            (labelHash, valid) = HexUtils.hexStringToBytes32(\\\\n                name,\\\\n                idx + 1,\\\\n                newIdx - 1\\\\n            ); // will not revert\\\\n            if (!valid || labelHash == bytes32(0)) {\\\\n                revert DNSDecodingFailed(name); // \\\\\\"readLabel: malformed\\\\\\" or null literal\\\\n            }\\\\n        } else if (len > 0) {\\\\n            assembly {\\\\n                labelHash := keccak256(add(add(name, idx), 32), len)\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    /// @dev Same as `BytesUtils.namehash()` but supports hashed labels.\\\\n    ///      Reverts `DNSDecodingFailed`.\\\\n    /// @param name The DNS-encoded name.\\\\n    /// @param idx The offset into name start hashing.\\\\n    /// @return hash The resulting namehash.\\\\n    function namehash(\\\\n        bytes memory name,\\\\n        uint256 idx\\\\n    ) internal pure returns (bytes32 hash) {\\\\n        (hash, idx) = readLabel(name, idx);\\\\n        if (hash == bytes32(0)) {\\\\n            if (idx != name.length) revert DNSDecodingFailed(name); // \\\\\\"namehash: Junk at end of name\\\\\\"\\\\n        } else {\\\\n            bytes32 parent = namehash(name, idx);\\\\n            assembly {\\\\n                mstore(0, parent)\\\\n                mstore(32, hash)\\\\n                hash := keccak256(0, 64)\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    /// @dev Convert DNS-encoded name to ENS name.\\\\n    ///      Reverts `DNSDecodingFailed`.\\\\n    /// @param dns The DNS-encoded name to convert, eg. `\\\\\\\\x03aaa\\\\\\\\x02bb\\\\\\\\x01c\\\\\\\\x00`.\\\\n    /// @return ens The equivalent ENS name, eg. `aaa.bb.c`.\\\\n    function decode(\\\\n        bytes memory dns\\\\n    ) internal pure returns (string memory ens) {\\\\n        unchecked {\\\\n            uint256 n = dns.length;\\\\n            if (n == 1 && dns[0] == 0) return \\\\\\"\\\\\\"; // only valid answer is root\\\\n            if (n < 3) revert DNSDecodingFailed(dns);\\\\n            bytes memory v = new bytes(n - 2); // always 2-shorter\\\\n            uint256 src;\\\\n            uint256 dst;\\\\n            while (src < n) {\\\\n                uint8 len = uint8(dns[src++]);\\\\n                if (len == 0) break;\\\\n                uint256 end = src + len;\\\\n                if (end > dns.length) revert DNSDecodingFailed(dns); // overflow\\\\n                if (dst > 0) v[dst++] = \\\\\\".\\\\\\"; // skip first stop\\\\n                while (src < end) {\\\\n                    bytes1 x = dns[src++]; // read byte\\\\n                    if (x == \\\\\\".\\\\\\") revert DNSDecodingFailed(dns); // malicious label\\\\n                    v[dst++] = x; // write byte\\\\n                }\\\\n            }\\\\n            if (src != dns.length) revert DNSDecodingFailed(dns); // junk at end\\\\n            return string(v);\\\\n        }\\\\n    }\\\\n\\\\n    /// @dev Convert ENS name to DNS-encoded name.\\\\n    ///      Hashes labels longer than 255 bytes.\\\\n    ///      Reverts `DNSEncodingFailed`.\\\\n    /// @param ens The ENS name to convert, eg. `aaa.bb.c`.\\\\n    /// @return dns The corresponding DNS-encoded name, eg. `\\\\\\\\x03aaa\\\\\\\\x02bb\\\\\\\\x01c\\\\\\\\x00`.\\\\n    function encode(\\\\n        string memory ens\\\\n    ) internal pure returns (bytes memory dns) {\\\\n        unchecked {\\\\n            uint256 n = bytes(ens).length;\\\\n            if (n == 0) return hex\\\\\\"00\\\\\\"; // root\\\\n            dns = new bytes(n + 2);\\\\n            uint256 start;\\\\n            assembly {\\\\n                start := add(dns, 32) // first byte of output\\\\n            }\\\\n            uint256 end = start; // remember position to write length\\\\n            for (uint256 i; i < n; i++) {\\\\n                bytes1 x = bytes(ens)[i]; // read byte\\\\n                if (x == \\\\\\".\\\\\\") {\\\\n                    start = _createHashedLabel(start, end);\\\\n                    if (start == 0) revert DNSEncodingFailed(ens);\\\\n                    end = start; // jump to next position\\\\n                } else {\\\\n                    assembly {\\\\n                        end := add(end, 1) // increase length\\\\n                        mstore(end, x) // write byte\\\\n                    }\\\\n                }\\\\n            }\\\\n            start = _createHashedLabel(start, end);\\\\n            if (start == 0) revert DNSEncodingFailed(ens);\\\\n            assembly {\\\\n                mstore8(start, 0) // terminal byte\\\\n                mstore(dns, sub(start, add(dns, 31))) // truncate length\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    /// @dev Write the label length.\\\\n    ///      If longer than 255, writes a hashed label instead.\\\\n    /// @param start The memory offset of the length-prefixed label.\\\\n    /// @param end The memory offset at the end of the label.\\\\n    /// @return next The memory offset for the next label.\\\\n    ///              Returns 0 if label is empty (handled by caller).\\\\n    function _createHashedLabel(\\\\n        uint256 start,\\\\n        uint256 end\\\\n    ) internal pure returns (uint256 next) {\\\\n        uint256 size = end - start; // length of label\\\\n        if (size > 255) {\\\\n            assembly {\\\\n                mstore(0, keccak256(add(start, 1), size)) // compute hash of label\\\\n            }\\\\n            HexUtils.unsafeHex(0, start + 2, 64); // override label with hex(hash)\\\\n            assembly {\\\\n                mstore8(add(start, 1), 0x5B) // \\\\\\"[\\\\\\"\\\\n                mstore8(add(start, 66), 0x5D) // \\\\\\"]\\\\\\"\\\\n            }\\\\n            size = 66;\\\\n        }\\\\n        if (size > 0) {\\\\n            assembly {\\\\n                mstore8(start, size) // update length\\\\n            }\\\\n            next = start + 1 + size; // advance\\\\n        }\\\\n    }\\\\n}\\\\n\\",\\"keccak256\\":\\"0x8fd7af9cec38612e8041c13d4c3eb9c11fccdcbed4fac40020a4b84672f0aa85\\",\\"license\\":\\"MIT\\"},\\"contracts/wrapper/IMetadataService.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity ~0.8.17;\\\\n\\\\ninterface IMetadataService {\\\\n    function uri(uint256) external view returns (string memory);\\\\n}\\\\n\\",\\"keccak256\\":\\"0xb3f1cf6df01ed7b15e5f2318f6823afbdb586ca38c2124c67955c645647ae9a2\\",\\"license\\":\\"MIT\\"},\\"contracts/wrapper/INameWrapper.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity ~0.8.17;\\\\n\\\\nimport \\\\\\"../registry/ENS.sol\\\\\\";\\\\nimport \\\\\\"../ethregistrar/IBaseRegistrar.sol\\\\\\";\\\\nimport \\\\\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\\\\";\\\\nimport \\\\\\"./IMetadataService.sol\\\\\\";\\\\nimport \\\\\\"./INameWrapperUpgrade.sol\\\\\\";\\\\n\\\\nuint32 constant CANNOT_UNWRAP = 1;\\\\nuint32 constant CANNOT_BURN_FUSES = 2;\\\\nuint32 constant CANNOT_TRANSFER = 4;\\\\nuint32 constant CANNOT_SET_RESOLVER = 8;\\\\nuint32 constant CANNOT_SET_TTL = 16;\\\\nuint32 constant CANNOT_CREATE_SUBDOMAIN = 32;\\\\nuint32 constant CANNOT_APPROVE = 64;\\\\n//uint16 reserved for parent controlled fuses from bit 17 to bit 32\\\\nuint32 constant PARENT_CANNOT_CONTROL = 1 << 16;\\\\nuint32 constant IS_DOT_ETH = 1 << 17;\\\\nuint32 constant CAN_EXTEND_EXPIRY = 1 << 18;\\\\nuint32 constant CAN_DO_EVERYTHING = 0;\\\\nuint32 constant PARENT_CONTROLLED_FUSES = 0xFFFF0000;\\\\n// all fuses apart from IS_DOT_ETH\\\\nuint32 constant USER_SETTABLE_FUSES = 0xFFFDFFFF;\\\\n\\\\ninterface INameWrapper is IERC1155 {\\\\n    event NameWrapped(\\\\n        bytes32 indexed node,\\\\n        bytes name,\\\\n        address owner,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    );\\\\n\\\\n    event NameUnwrapped(bytes32 indexed node, address owner);\\\\n\\\\n    event FusesSet(bytes32 indexed node, uint32 fuses);\\\\n    event ExpiryExtended(bytes32 indexed node, uint64 expiry);\\\\n\\\\n    function ens() external view returns (ENS);\\\\n\\\\n    function registrar() external view returns (IBaseRegistrar);\\\\n\\\\n    function metadataService() external view returns (IMetadataService);\\\\n\\\\n    function names(bytes32) external view returns (bytes memory);\\\\n\\\\n    function name() external view returns (string memory);\\\\n\\\\n    function upgradeContract() external view returns (INameWrapperUpgrade);\\\\n\\\\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\\\\n\\\\n    function wrap(\\\\n        bytes calldata name,\\\\n        address wrappedOwner,\\\\n        address resolver\\\\n    ) external;\\\\n\\\\n    function wrapETH2LD(\\\\n        string calldata label,\\\\n        address wrappedOwner,\\\\n        uint16 ownerControlledFuses,\\\\n        address resolver\\\\n    ) external returns (uint64 expires);\\\\n\\\\n    function registerAndWrapETH2LD(\\\\n        string calldata label,\\\\n        address wrappedOwner,\\\\n        uint256 duration,\\\\n        address resolver,\\\\n        uint16 ownerControlledFuses\\\\n    ) external returns (uint256 registrarExpiry);\\\\n\\\\n    function renew(\\\\n        uint256 labelHash,\\\\n        uint256 duration\\\\n    ) external returns (uint256 expires);\\\\n\\\\n    function unwrap(bytes32 node, bytes32 label, address owner) external;\\\\n\\\\n    function unwrapETH2LD(\\\\n        bytes32 label,\\\\n        address newRegistrant,\\\\n        address newController\\\\n    ) external;\\\\n\\\\n    function upgrade(bytes calldata name, bytes calldata extraData) external;\\\\n\\\\n    function setFuses(\\\\n        bytes32 node,\\\\n        uint16 ownerControlledFuses\\\\n    ) external returns (uint32 newFuses);\\\\n\\\\n    function setChildFuses(\\\\n        bytes32 parentNode,\\\\n        bytes32 labelhash,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) external;\\\\n\\\\n    function setSubnodeRecord(\\\\n        bytes32 node,\\\\n        string calldata label,\\\\n        address owner,\\\\n        address resolver,\\\\n        uint64 ttl,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) external returns (bytes32);\\\\n\\\\n    function setRecord(\\\\n        bytes32 node,\\\\n        address owner,\\\\n        address resolver,\\\\n        uint64 ttl\\\\n    ) external;\\\\n\\\\n    function setSubnodeOwner(\\\\n        bytes32 node,\\\\n        string calldata label,\\\\n        address newOwner,\\\\n        uint32 fuses,\\\\n        uint64 expiry\\\\n    ) external returns (bytes32);\\\\n\\\\n    function extendExpiry(\\\\n        bytes32 node,\\\\n        bytes32 labelhash,\\\\n        uint64 expiry\\\\n    ) external returns (uint64);\\\\n\\\\n    function canModifyName(\\\\n        bytes32 node,\\\\n        address addr\\\\n    ) external view returns (bool);\\\\n\\\\n    function setResolver(bytes32 node, address resolver) external;\\\\n\\\\n    function setTTL(bytes32 node, uint64 ttl) external;\\\\n\\\\n    function ownerOf(uint256 id) external view returns (address owner);\\\\n\\\\n    function approve(address to, uint256 tokenId) external;\\\\n\\\\n    function getApproved(uint256 tokenId) external view returns (address);\\\\n\\\\n    function getData(\\\\n        uint256 id\\\\n    ) external view returns (address, uint32, uint64);\\\\n\\\\n    function setMetadataService(IMetadataService _metadataService) external;\\\\n\\\\n    function uri(uint256 tokenId) external view returns (string memory);\\\\n\\\\n    function setUpgradeContract(INameWrapperUpgrade _upgradeAddress) external;\\\\n\\\\n    function allFusesBurned(\\\\n        bytes32 node,\\\\n        uint32 fuseMask\\\\n    ) external view returns (bool);\\\\n\\\\n    function isWrapped(bytes32) external view returns (bool);\\\\n\\\\n    function isWrapped(bytes32, bytes32) external view returns (bool);\\\\n}\\\\n\\",\\"keccak256\\":\\"0x70310eb67146d7290731c31841399640ac3b6a949eadc6598bc150123d185c57\\",\\"license\\":\\"MIT\\"},\\"contracts/wrapper/INameWrapperUpgrade.sol\\":{\\"content\\":\\"//SPDX-License-Identifier: MIT\\\\npragma solidity ~0.8.17;\\\\n\\\\ninterface INameWrapperUpgrade {\\\\n    function wrapFromUpgrade(\\\\n        bytes calldata name,\\\\n        address wrappedOwner,\\\\n        uint32 fuses,\\\\n        uint64 expiry,\\\\n        address approved,\\\\n        bytes calldata extraData\\\\n    ) external;\\\\n}\\\\n\\",\\"keccak256\\":\\"0x42e0cec6cd9d1a62d51d45b678f69d3e4ad5555e659b197e41257b308346bb8a\\",\\"license\\":\\"MIT\\"}},\\"version\\":1}","bytecode":"0x61010060405234801561001157600080fd5b50604051613af9380380613af98339810160408190526100309161016d565b6040516302571be360e01b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26004820152849033906000906001600160a01b038416906302571be390602401602060405180830381865afa15801561009b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100bf91906101cc565b604051630f41a04d60e11b81526001600160a01b03848116600483015291925090821690631e83409a906024016020604051808303816000875af115801561010b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061012f91906101f0565b5050506001600160a01b039485166080525091831660a052821660c0521660e052610209565b6001600160a01b038116811461016a57600080fd5b50565b6000806000806080858703121561018357600080fd5b845161018e81610155565b602086015190945061019f81610155565b60408601519093506101b081610155565b60608601519092506101c181610155565b939692955090935050565b6000602082840312156101de57600080fd5b81516101e981610155565b9392505050565b60006020828403121561020257600080fd5b5051919050565b60805160a05160c05160e0516138b06102496000396000611bb101526000611b72015260008181611c960152611d1601526000611c1201526138b06000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c8063773722131161010f578063c8690233116100a2578063e32954eb11610071578063e32954eb1461053c578063e59d895d1461054f578063e985e9c514610562578063f1cb7e06146105ab57600080fd5b8063c86902331461047a578063ce3decdc146104d3578063d5fa2b00146104e6578063d700ff33146104f957600080fd5b8063a8fa5682116100de578063a8fa5682146103e3578063a9784b3e146103f6578063ac9650d814610447578063bc1c58d11461046757600080fd5b806377372213146103975780638b95dd71146103aa578063a22cb465146103bd578063a4b91a01146103d057600080fd5b806332f111d71161018757806359d1d43c1161015657806359d1d43c1461033e5780635c98042b1461035e578063623195b014610371578063691f34311461038457600080fd5b806332f111d7146102b95780633603d758146102cc5780633b3b57de146102df5780634cbf6ba4146102f257600080fd5b8063124a319c116101c3578063124a319c1461023a5780632203ab561461027257806329cd62ea14610293578063304e6ade146102a657600080fd5b806301ffc9a7146101ea5780630af179d71461021257806310f13a8c14610227575b600080fd5b6101fd6101f8366004612b16565b6105be565b60405190151581526020015b60405180910390f35b610225610220366004612b73565b6105cf565b005b610225610235366004612bbf565b6107d9565b61024d610248366004612c3e565b6108a6565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610209565b610285610280366004612c6a565b610c3d565b604051610209929190612cfa565b6102256102a1366004612d13565b610d82565b6102256102b4366004612b73565b610e1d565b6101fd6102c7366004612c6a565b610e99565b6102256102da366004612d3f565b610ee5565b61024d6102ed366004612d3f565b610f88565b6101fd610300366004612c6a565b6000828152602081815260408083205467ffffffffffffffff1683526006825280832094835293815283822092825291909152205461ffff16151590565b61035161034c366004612b73565b610fa7565b6040516102099190612d58565b61035161036c366004612d3f565b611087565b61022561037f366004612d6b565b611146565b610351610392366004612d3f565b6111e3565b6102256103a5366004612b73565b61121d565b6102256103b8366004612ded565b611299565b6102256103cb366004612f28565b6113d8565b6102256103de366004612f54565b611514565b6103516103f1366004612f92565b611633565b6101fd610404366004612fd2565b73ffffffffffffffffffffffffffffffffffffffff9283166000908152600c60209081526040808320948352938152838220929094168152925290205460ff1690565b61045a61045536600461304e565b611681565b6040516102099190613090565b610351610475366004612d3f565b611696565b6104be610488366004612d3f565b6000818152602081815260408083205467ffffffffffffffff168352600982528083209383529290522080546001909101549091565b60408051928352602083019190915201610209565b6102256104e1366004612b73565b6116d0565b6102256104f4366004613113565b611813565b610523610507366004612d3f565b60006020819052908152604090205467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610209565b61045a61054a366004613143565b61187a565b61022561055d366004613182565b61188f565b6101fd6105703660046131b7565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152600b6020908152604080832093909416825291909152205460ff1690565b6103516105b9366004612c6a565b611973565b60006105c982611b02565b92915050565b826105d981611b58565b6105e257600080fd5b600084815260208181526040808320548151601f870184900484028101840190925285825283926060928392859267ffffffffffffffff9091169183916106489183918d908d90819084018382808284376000920191909152509293925050611e349050565b90505b80515160208201511015610772578661ffff166000036106b0578060400151965061067581611e95565b94508460405160200161068891906131e5565b6040516020818303038152906040528051906020012092506106a981611eb6565b9350610764565b60006106bb82611e95565b9050816040015161ffff168861ffff161415806106df57506106dd8682611ed2565b155b156107625761073b8c878a8e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505060208801518d9150610732908290613230565b8b51158a611ef0565b81604001519750816020015196508095508580519060200120935061075f82611eb6565b94505b505b61076d8161215d565b61064b565b508351156107cd576107cd8a85888c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92506107c491508290508f613230565b89511588611ef0565b50505050505050505050565b846107e381611b58565b6107ec57600080fd5b6000868152602081815260408083205467ffffffffffffffff168352600a82528083208984529091529081902090518491849161082c9089908990613243565b908152602001604051809103902091826108479291906132ed565b508484604051610858929190613243565b6040518091039020867f448bc014f1536726cf8d54ff3d6481ed3cbc683c2591ca204274009afa09b1a1878787876040516108969493929190613450565b60405180910390a3505050505050565b6000828152602081815260408083205467ffffffffffffffff1683526007825280832085845282528083207fffffffff000000000000000000000000000000000000000000000000000000008516845290915281205473ffffffffffffffffffffffffffffffffffffffff16801561091f5790506105c9565b600061092a85610f88565b905073ffffffffffffffffffffffffffffffffffffffff8116610952576000925050506105c9565b6040517f01ffc9a7000000000000000000000000000000000000000000000000000000006024820152600090819073ffffffffffffffffffffffffffffffffffffffff841690604401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a70000000000000000000000000000000000000000000000000000000017905251610a1c91906131e5565b600060405180830381855afa9150503d8060008114610a57576040519150601f19603f3d011682016040523d82523d6000602084013e610a5c565b606091505b5091509150811580610a6f575060208151105b80610ab1575080601f81518110610a8857610a88613482565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016155b15610ac35760009450505050506105c9565b6040517fffffffff000000000000000000000000000000000000000000000000000000008716602482015273ffffffffffffffffffffffffffffffffffffffff841690604401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a70000000000000000000000000000000000000000000000000000000017905251610b8a91906131e5565b600060405180830381855afa9150503d8060008114610bc5576040519150601f19603f3d011682016040523d82523d6000602084013e610bca565b606091505b509092509050811580610bde575060208151105b80610c20575080601f81518110610bf757610bf7613482565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016155b15610c325760009450505050506105c9565b509095945050505050565b6000828152602081815260408083205467ffffffffffffffff168352600180835281842086855290925282206060915b600081118015610c7d5750848111155b15610d625780851615801590610cab575060008181526020839052604081208054610ca790613253565b9050115b15610d5a5780826000838152602001908152602001600020808054610ccf90613253565b80601f0160208091040260200160405190810160405280929190818152602001828054610cfb90613253565b8015610d485780601f10610d1d57610100808354040283529160200191610d48565b820191906000526020600020905b815481529060010190602001808311610d2b57829003601f168201915b50505050509050935093505050610d7b565b60011b610c6d565b5060006040518060200160405280600081525092509250505b9250929050565b82610d8c81611b58565b610d9557600080fd5b604080518082018252848152602080820185815260008881528083528481205467ffffffffffffffff1681526009835284812089825283528490209251835551600190920191909155815185815290810184905285917f1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e4691015b60405180910390a250505050565b82610e2781611b58565b610e3057600080fd5b6000848152602081815260408083205467ffffffffffffffff168352600382528083208784529091529020610e668385836132ed565b50837fe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d75788484604051610e0f9291906134b1565b6000828152602081815260408083205467ffffffffffffffff16835260028252808320858452825280832084845290915281208054829190610eda90613253565b905011905092915050565b80610eef81611b58565b610ef857600080fd5b6000828152602081905260408120805467ffffffffffffffff1691610f1c836134c5565b82546101009290920a67ffffffffffffffff818102199093169183160217909155600084815260208181526040918290205491519190921681528492507fc6621ccb8f3f5a04bb6502154b2caf6adf5983fe76dfef1cfc9c42e3579db444910160405180910390a25050565b6000610f9582603c611973565b610f9e906134f2565b60601c92915050565b6000838152602081815260408083205467ffffffffffffffff168352600a825280832086845290915290819020905160609190610fe79085908590613243565b9081526020016040518091039020805461100090613253565b80601f016020809104026020016040519081016040528092919081815260200182805461102c90613253565b80156110795780601f1061104e57610100808354040283529160200191611079565b820191906000526020600020905b81548152906001019060200180831161105c57829003601f168201915b505050505090509392505050565b6000818152602081815260408083205467ffffffffffffffff1683526004825280832084845290915290208054606091906110c190613253565b80601f01602080910402602001604051908101604052809291908181526020018280546110ed90613253565b801561113a5780601f1061110f5761010080835404028352916020019161113a565b820191906000526020600020905b81548152906001019060200180831161111d57829003601f168201915b50505050509050919050565b8361115081611b58565b61115957600080fd5b83611165600182613230565b161561117057600080fd5b6000858152602081815260408083205467ffffffffffffffff16835260018252808320888452825280832087845290915290206111ae8385836132ed565b50604051849086907faa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe390600090a35050505050565b6000818152602081815260408083205467ffffffffffffffff1683526008825280832084845290915290208054606091906110c190613253565b8261122781611b58565b61123057600080fd5b6000848152602081815260408083205467ffffffffffffffff1683526008825280832087845290915290206112668385836132ed565b50837fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f78484604051610e0f9291906134b1565b826112a381611b58565b6112ac57600080fd5b8151158015906112be57508151601414155b80156112ce57506112ce83612245565b1561131057816040517f8d666f600000000000000000000000000000000000000000000000000000000081526004016113079190612d58565b60405180910390fd5b837f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af7528484604051611342929190612cfa565b60405180910390a2603c830361139457837f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd261137d846134f2565b60405160609190911c815260200160405180910390a25b6000848152602081815260408083205467ffffffffffffffff16835260028252808320878452825280832086845290915290206113d1838261355e565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff8216330361147d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401611307565b336000818152600b6020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff82163303611593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f53657474696e672064656c65676174652073746174757320666f722073656c666044820152606401611307565b336000818152600c60209081526040808320878452825280832073ffffffffffffffffffffffffffffffffffffffff87168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519384529286917ff0ddb3b04746704017f9aa8bd728fcc2c1d11675041205350018915f5e4750a0910160405180910390a4505050565b6000838152602081815260408083205467ffffffffffffffff168352600582528083208684528252808320858452825280832061ffff85168452909152902080546060919061100090613253565b606061168f6000848461226c565b9392505050565b6000818152602081815260408083205467ffffffffffffffff1683526003825280832084845290915290208054606091906110c190613253565b826116da81611b58565b6116e357600080fd5b6000848152602081815260408083205467ffffffffffffffff16808452600483528184208885529092528220805491929161171d90613253565b80601f016020809104026020016040519081016040528092919081815260200182805461174990613253565b80156117965780601f1061176b57610100808354040283529160200191611796565b820191906000526020600020905b81548152906001019060200180831161177957829003601f168201915b5050505067ffffffffffffffff841660009081526004602090815260408083208b845290915290209192506117ce90508587836132ed565b50857f8f15ed4b723ef428f250961da8315675b507046737e19319fc1a4d81bfe87f8582878760405161180393929190613677565b60405180910390a2505050505050565b8161181d81611b58565b61182657600080fd5b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084901b166020820152611875908490603c90603401604051602081830303815290604052611299565b505050565b606061188784848461226c565b949350505050565b8261189981611b58565b6118a257600080fd5b6000848152602081815260408083205467ffffffffffffffff1683526007825280832087845282528083207fffffffff0000000000000000000000000000000000000000000000000000000087168085529083529281902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8716908117909155905190815286917f7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa910160405180910390a350505050565b6000828152602081815260408083205467ffffffffffffffff16835260028252808320858452825280832084845291829052909120805460609291906119b890613253565b80601f01602080910402602001604051908101604052809291908181526020018280546119e490613253565b8015611a315780601f10611a0657610100808354040283529160200191611a31565b820191906000526020600020905b815481529060010190602001808311611a1457829003601f168201915b5050505050915081516000148015611a5757506000611a4f84612454565b63ffffffff16115b15611afb57638000000060009081526020829052604090208054611a7a90613253565b80601f0160208091040260200160405190810160405280929190818152602001828054611aa690613253565b8015611af35780601f10611ac857610100808354040283529160200191611af3565b820191906000526020600020905b815481529060010190602001808311611ad657829003601f168201915b505050505091505b5092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f59d1d43c0000000000000000000000000000000000000000000000000000000014806105c957506105c982612480565b60003373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480611bd357503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016145b15611be057506001919050565b6040517f02571be3000000000000000000000000000000000000000000000000000000008152600481018390526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906302571be390602401602060405180830381865afa158015611c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9291906136a7565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611d99576040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e90602401602060405180830381865afa158015611d72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9691906136a7565b90505b73ffffffffffffffffffffffffffffffffffffffff8116331480611ded575073ffffffffffffffffffffffffffffffffffffffff81166000908152600b6020908152604080832033845290915290205460ff165b8061168f575073ffffffffffffffffffffffffffffffffffffffff81166000908152600c60209081526040808320868452825280832033845290915290205460ff1661168f565b611e826040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b82815260c081018290526105c98161215d565b602081015181516060916105c991611ead90826124d6565b84519190612530565b60a081015160c08201516060916105c991611ead908290613230565b60008151835114801561168f575061168f83600084600087516125a7565b865160208801206000611f04878787612530565b9050831561202e5767ffffffffffffffff831660009081526005602090815260408083208d84528252808320858452825280832061ffff8c16845290915290208054611f4f90613253565b159050611fae5767ffffffffffffffff831660009081526006602090815260408083208d845282528083208584529091528120805461ffff1691611f92836136c4565b91906101000a81548161ffff021916908361ffff160217905550505b67ffffffffffffffff831660009081526005602090815260408083208d84528252808320858452825280832061ffff8c1684529091528120611fef91612a8f565b897f03528ed0c2a3ebc993b12ce3c16bb382f9c7d88ef7d8a1bf290eaf35955a12078a8a604051612021929190613700565b60405180910390a26107cd565b67ffffffffffffffff831660009081526005602090815260408083208d84528252808320858452825280832061ffff8c1684529091529020805461207190613253565b90506000036120d25767ffffffffffffffff831660009081526006602090815260408083208d845282528083208584529091528120805461ffff16916120b683613726565b91906101000a81548161ffff021916908361ffff160217905550505b67ffffffffffffffff831660009081526005602090815260408083208d84528252808320858452825280832061ffff8c1684529091529020612114828261355e565b50897f52a608b3303a48862d07a73d82fa221318c0027fbbcfb1b2329bface3f19ff2b8a8a846040516121499392919061373e565b60405180910390a250505050505050505050565b60c081015160208201819052815151116121745750565b6000612188826000015183602001516124d6565b8260200151612197919061376d565b82519091506121a690826125ca565b61ffff1660408301526121ba60028261376d565b82519091506121c990826125ca565b61ffff1660608301526121dd60028261376d565b82519091506121ec90826125f2565b63ffffffff16608083015261220260048261376d565b825190915060009061221490836125ca565b61ffff16905061222560028361376d565b60a084018190529150612238818361376d565b60c0909301929092525050565b600063800000008214806105c95750600061225f83612454565b63ffffffff161192915050565b60608167ffffffffffffffff81111561228757612287612dbe565b6040519080825280602002602001820160405280156122ba57816020015b60608152602001906001900390816122a55790505b50905060005b8281101561244c57841561239f5760008484838181106122e2576122e2613482565b90506020028101906122f49190613780565b612303916024916004916137e5565b61230c9161380f565b905085811461239d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f6d756c746963616c6c3a20416c6c207265636f726473206d757374206861766560448201527f2061206d61746368696e67206e616d65686173680000000000000000000000006064820152608401611307565b505b600080308686858181106123b5576123b5613482565b90506020028101906123c79190613780565b6040516123d5929190613243565b600060405180830381855af49150503d8060008114612410576040519150601f19603f3d011682016040523d82523d6000602084013e612415565b606091505b50915091508161242457600080fd5b8084848151811061243757612437613482565b602090810291909101015250506001016122c0565b509392505050565b6000603c820361246657506001919050565b638000000091821891821061247c5760006105c9565b5090565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fc86902330000000000000000000000000000000000000000000000000000000014806105c957506105c98261261c565b6000815b835181106124ea576124ea61384b565b60006124f68583612672565b60ff16905061250681600161376d565b612510908361376d565b9150806000036125205750612526565b506124da565b6118878382613230565b825160609061253f838561376d565b111561254a57600080fd5b60008267ffffffffffffffff81111561256557612565612dbe565b6040519080825280601f01601f19166020018201604052801561258f576020820181803683370190505b50905060208082019086860101610c32828287612696565b60006125b484848461270a565b6125bf87878561270a565b149695505050505050565b81516000906125da83600261376d565b11156125e557600080fd5b50016002015161ffff1690565b815160009061260283600461376d565b111561260d57600080fd5b50016004015163ffffffff1690565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f691f34310000000000000000000000000000000000000000000000000000000014806105c957506105c98261272e565b600082828151811061268657612686613482565b016020015160f81c905092915050565b602081106126ce57815183526126ad60208461376d565b92506126ba60208361376d565b91506126c7602082613230565b9050612696565b905182516020929092036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180199091169116179052565b8251600090612719838561376d565b111561272457600080fd5b5091016020012090565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f124a319c0000000000000000000000000000000000000000000000000000000014806105c957506105c98260007fffffffff0000000000000000000000000000000000000000000000000000000082167fa8fa568200000000000000000000000000000000000000000000000000000000148061281257507fffffffff0000000000000000000000000000000000000000000000000000000082167f5c98042b00000000000000000000000000000000000000000000000000000000145b806105c957506105c98260007fffffffff0000000000000000000000000000000000000000000000000000000082167fbc1c58d10000000000000000000000000000000000000000000000000000000014806105c957506105c98260007f3b3b57de000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316148061290057507ff1cb7e06000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b8061294c57507f32f111d7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b806105c957506105c98260007fffffffff0000000000000000000000000000000000000000000000000000000082167f2203ab560000000000000000000000000000000000000000000000000000000014806105c957506105c98260007fffffffff0000000000000000000000000000000000000000000000000000000082167fd700ff330000000000000000000000000000000000000000000000000000000014806105c957506105c98260007fffffffff0000000000000000000000000000000000000000000000000000000082167f4fbf04330000000000000000000000000000000000000000000000000000000014806105c957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146105c9565b508054612a9b90613253565b6000825580601f10612aab575050565b601f016020900490600052602060002090810190612ac99190612acc565b50565b5b8082111561247c5760008155600101612acd565b80357fffffffff0000000000000000000000000000000000000000000000000000000081168114612b1157600080fd5b919050565b600060208284031215612b2857600080fd5b61168f82612ae1565b60008083601f840112612b4357600080fd5b50813567ffffffffffffffff811115612b5b57600080fd5b602083019150836020828501011115610d7b57600080fd5b600080600060408486031215612b8857600080fd5b83359250602084013567ffffffffffffffff811115612ba657600080fd5b612bb286828701612b31565b9497909650939450505050565b600080600080600060608688031215612bd757600080fd5b85359450602086013567ffffffffffffffff811115612bf557600080fd5b612c0188828901612b31565b909550935050604086013567ffffffffffffffff811115612c2157600080fd5b612c2d88828901612b31565b969995985093965092949392505050565b60008060408385031215612c5157600080fd5b82359150612c6160208401612ae1565b90509250929050565b60008060408385031215612c7d57600080fd5b50508035926020909101359150565b60005b83811015612ca7578181015183820152602001612c8f565b50506000910152565b60008151808452612cc8816020860160208601612c8c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8281526040602082015260006118876040830184612cb0565b600080600060608486031215612d2857600080fd5b505081359360208301359350604090920135919050565b600060208284031215612d5157600080fd5b5035919050565b60208152600061168f6020830184612cb0565b60008060008060608587031215612d8157600080fd5b8435935060208501359250604085013567ffffffffffffffff811115612da657600080fd5b612db287828801612b31565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600060608486031215612e0257600080fd5b8335925060208401359150604084013567ffffffffffffffff811115612e2757600080fd5b8401601f81018613612e3857600080fd5b803567ffffffffffffffff811115612e5257612e52612dbe565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160116810181811067ffffffffffffffff82111715612ebe57612ebe612dbe565b604052818152828201602001881015612ed657600080fd5b816020840160208301376000602083830101528093505050509250925092565b73ffffffffffffffffffffffffffffffffffffffff81168114612ac957600080fd5b80358015158114612b1157600080fd5b60008060408385031215612f3b57600080fd5b8235612f4681612ef6565b9150612c6160208401612f18565b600080600060608486031215612f6957600080fd5b833592506020840135612f7b81612ef6565b9150612f8960408501612f18565b90509250925092565b600080600060608486031215612fa757600080fd5b8335925060208401359150604084013561ffff81168114612fc757600080fd5b809150509250925092565b600080600060608486031215612fe757600080fd5b8335612ff281612ef6565b9250602084013591506040840135612fc781612ef6565b60008083601f84011261301b57600080fd5b50813567ffffffffffffffff81111561303357600080fd5b6020830191508360208260051b8501011115610d7b57600080fd5b6000806020838503121561306157600080fd5b823567ffffffffffffffff81111561307857600080fd5b61308485828601613009565b90969095509350505050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b82811015613107577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08786030184526130f2858351612cb0565b945060209384019391909101906001016130b8565b50929695505050505050565b6000806040838503121561312657600080fd5b82359150602083013561313881612ef6565b809150509250929050565b60008060006040848603121561315857600080fd5b83359250602084013567ffffffffffffffff81111561317657600080fd5b612bb286828701613009565b60008060006060848603121561319757600080fd5b833592506131a760208501612ae1565b91506040840135612fc781612ef6565b600080604083850312156131ca57600080fd5b82356131d581612ef6565b9150602083013561313881612ef6565b600082516131f7818460208701612c8c565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156105c9576105c9613201565b8183823760009101908152919050565b600181811c9082168061326757607f821691505b6020821081036132a0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561187557806000526020600020601f840160051c810160208510156132cd5750805b601f840160051c820191505b818110156113d157600081556001016132d9565b67ffffffffffffffff83111561330557613305612dbe565b613319836133138354613253565b836132a6565b6000601f84116001811461336b57600085156133355750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b1783556113d1565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b828110156133ba578685013582556020948501946001909201910161339a565b50868210156133f5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b604081526000613464604083018688613407565b8281036020840152613477818587613407565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602081526000611887602083018486613407565b600067ffffffffffffffff821667ffffffffffffffff81036134e9576134e9613201565b60010192915050565b805160208201517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000811691906014821015613557577fffffffffffffffffffffffffffffffffffffffff000000000000000000000000808360140360031b1b82161692505b5050919050565b815167ffffffffffffffff81111561357857613578612dbe565b61358c816135868454613253565b846132a6565b6020601f8211600181146135de57600083156135a85750848201515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600385901b1c1916600184901b1784556113d1565b6000848152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08516915b8281101561362c578785015182556020948501946001909201910161360c565b508482101561366857868401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b60f8161c191681555b50505050600190811b01905550565b60408152600061368a6040830186612cb0565b828103602084015261369d818587613407565b9695505050505050565b6000602082840312156136b957600080fd5b815161168f81612ef6565b600061ffff8216806136d8576136d8613201565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b6040815260006137136040830185612cb0565b905061ffff831660208301529392505050565b600061ffff821661ffff81036134e9576134e9613201565b6060815260006137516060830186612cb0565b61ffff85166020840152828103604084015261369d8185612cb0565b808201808211156105c9576105c9613201565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126137b557600080fd5b83018035915067ffffffffffffffff8211156137d057600080fd5b602001915036819003821315610d7b57600080fd5b600080858511156137f557600080fd5b8386111561380257600080fd5b5050820193919092039150565b803560208310156105c9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea264697066735822122075a7658084d4def9f6cce391e839ba4adcd596c5ae93e2d00f29a82163695c2f64736f6c634300081a0033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106101e55760003560e01c8063773722131161010f578063c8690233116100a2578063e32954eb11610071578063e32954eb1461053c578063e59d895d1461054f578063e985e9c514610562578063f1cb7e06146105ab57600080fd5b8063c86902331461047a578063ce3decdc146104d3578063d5fa2b00146104e6578063d700ff33146104f957600080fd5b8063a8fa5682116100de578063a8fa5682146103e3578063a9784b3e146103f6578063ac9650d814610447578063bc1c58d11461046757600080fd5b806377372213146103975780638b95dd71146103aa578063a22cb465146103bd578063a4b91a01146103d057600080fd5b806332f111d71161018757806359d1d43c1161015657806359d1d43c1461033e5780635c98042b1461035e578063623195b014610371578063691f34311461038457600080fd5b806332f111d7146102b95780633603d758146102cc5780633b3b57de146102df5780634cbf6ba4146102f257600080fd5b8063124a319c116101c3578063124a319c1461023a5780632203ab561461027257806329cd62ea14610293578063304e6ade146102a657600080fd5b806301ffc9a7146101ea5780630af179d71461021257806310f13a8c14610227575b600080fd5b6101fd6101f8366004612b16565b6105be565b60405190151581526020015b60405180910390f35b610225610220366004612b73565b6105cf565b005b610225610235366004612bbf565b6107d9565b61024d610248366004612c3e565b6108a6565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610209565b610285610280366004612c6a565b610c3d565b604051610209929190612cfa565b6102256102a1366004612d13565b610d82565b6102256102b4366004612b73565b610e1d565b6101fd6102c7366004612c6a565b610e99565b6102256102da366004612d3f565b610ee5565b61024d6102ed366004612d3f565b610f88565b6101fd610300366004612c6a565b6000828152602081815260408083205467ffffffffffffffff1683526006825280832094835293815283822092825291909152205461ffff16151590565b61035161034c366004612b73565b610fa7565b6040516102099190612d58565b61035161036c366004612d3f565b611087565b61022561037f366004612d6b565b611146565b610351610392366004612d3f565b6111e3565b6102256103a5366004612b73565b61121d565b6102256103b8366004612ded565b611299565b6102256103cb366004612f28565b6113d8565b6102256103de366004612f54565b611514565b6103516103f1366004612f92565b611633565b6101fd610404366004612fd2565b73ffffffffffffffffffffffffffffffffffffffff9283166000908152600c60209081526040808320948352938152838220929094168152925290205460ff1690565b61045a61045536600461304e565b611681565b6040516102099190613090565b610351610475366004612d3f565b611696565b6104be610488366004612d3f565b6000818152602081815260408083205467ffffffffffffffff168352600982528083209383529290522080546001909101549091565b60408051928352602083019190915201610209565b6102256104e1366004612b73565b6116d0565b6102256104f4366004613113565b611813565b610523610507366004612d3f565b60006020819052908152604090205467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610209565b61045a61054a366004613143565b61187a565b61022561055d366004613182565b61188f565b6101fd6105703660046131b7565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152600b6020908152604080832093909416825291909152205460ff1690565b6103516105b9366004612c6a565b611973565b60006105c982611b02565b92915050565b826105d981611b58565b6105e257600080fd5b600084815260208181526040808320548151601f870184900484028101840190925285825283926060928392859267ffffffffffffffff9091169183916106489183918d908d90819084018382808284376000920191909152509293925050611e349050565b90505b80515160208201511015610772578661ffff166000036106b0578060400151965061067581611e95565b94508460405160200161068891906131e5565b6040516020818303038152906040528051906020012092506106a981611eb6565b9350610764565b60006106bb82611e95565b9050816040015161ffff168861ffff161415806106df57506106dd8682611ed2565b155b156107625761073b8c878a8e8e8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505060208801518d9150610732908290613230565b8b51158a611ef0565b81604001519750816020015196508095508580519060200120935061075f82611eb6565b94505b505b61076d8161215d565b61064b565b508351156107cd576107cd8a85888c8c8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92506107c491508290508f613230565b89511588611ef0565b50505050505050505050565b846107e381611b58565b6107ec57600080fd5b6000868152602081815260408083205467ffffffffffffffff168352600a82528083208984529091529081902090518491849161082c9089908990613243565b908152602001604051809103902091826108479291906132ed565b508484604051610858929190613243565b6040518091039020867f448bc014f1536726cf8d54ff3d6481ed3cbc683c2591ca204274009afa09b1a1878787876040516108969493929190613450565b60405180910390a3505050505050565b6000828152602081815260408083205467ffffffffffffffff1683526007825280832085845282528083207fffffffff000000000000000000000000000000000000000000000000000000008516845290915281205473ffffffffffffffffffffffffffffffffffffffff16801561091f5790506105c9565b600061092a85610f88565b905073ffffffffffffffffffffffffffffffffffffffff8116610952576000925050506105c9565b6040517f01ffc9a7000000000000000000000000000000000000000000000000000000006024820152600090819073ffffffffffffffffffffffffffffffffffffffff841690604401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a70000000000000000000000000000000000000000000000000000000017905251610a1c91906131e5565b600060405180830381855afa9150503d8060008114610a57576040519150601f19603f3d011682016040523d82523d6000602084013e610a5c565b606091505b5091509150811580610a6f575060208151105b80610ab1575080601f81518110610a8857610a88613482565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016155b15610ac35760009450505050506105c9565b6040517fffffffff000000000000000000000000000000000000000000000000000000008716602482015273ffffffffffffffffffffffffffffffffffffffff841690604401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a70000000000000000000000000000000000000000000000000000000017905251610b8a91906131e5565b600060405180830381855afa9150503d8060008114610bc5576040519150601f19603f3d011682016040523d82523d6000602084013e610bca565b606091505b509092509050811580610bde575060208151105b80610c20575080601f81518110610bf757610bf7613482565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016155b15610c325760009450505050506105c9565b509095945050505050565b6000828152602081815260408083205467ffffffffffffffff168352600180835281842086855290925282206060915b600081118015610c7d5750848111155b15610d625780851615801590610cab575060008181526020839052604081208054610ca790613253565b9050115b15610d5a5780826000838152602001908152602001600020808054610ccf90613253565b80601f0160208091040260200160405190810160405280929190818152602001828054610cfb90613253565b8015610d485780601f10610d1d57610100808354040283529160200191610d48565b820191906000526020600020905b815481529060010190602001808311610d2b57829003601f168201915b50505050509050935093505050610d7b565b60011b610c6d565b5060006040518060200160405280600081525092509250505b9250929050565b82610d8c81611b58565b610d9557600080fd5b604080518082018252848152602080820185815260008881528083528481205467ffffffffffffffff1681526009835284812089825283528490209251835551600190920191909155815185815290810184905285917f1d6f5e03d3f63eb58751986629a5439baee5079ff04f345becb66e23eb154e4691015b60405180910390a250505050565b82610e2781611b58565b610e3057600080fd5b6000848152602081815260408083205467ffffffffffffffff168352600382528083208784529091529020610e668385836132ed565b50837fe379c1624ed7e714cc0937528a32359d69d5281337765313dba4e081b72d75788484604051610e0f9291906134b1565b6000828152602081815260408083205467ffffffffffffffff16835260028252808320858452825280832084845290915281208054829190610eda90613253565b905011905092915050565b80610eef81611b58565b610ef857600080fd5b6000828152602081905260408120805467ffffffffffffffff1691610f1c836134c5565b82546101009290920a67ffffffffffffffff818102199093169183160217909155600084815260208181526040918290205491519190921681528492507fc6621ccb8f3f5a04bb6502154b2caf6adf5983fe76dfef1cfc9c42e3579db444910160405180910390a25050565b6000610f9582603c611973565b610f9e906134f2565b60601c92915050565b6000838152602081815260408083205467ffffffffffffffff168352600a825280832086845290915290819020905160609190610fe79085908590613243565b9081526020016040518091039020805461100090613253565b80601f016020809104026020016040519081016040528092919081815260200182805461102c90613253565b80156110795780601f1061104e57610100808354040283529160200191611079565b820191906000526020600020905b81548152906001019060200180831161105c57829003601f168201915b505050505090509392505050565b6000818152602081815260408083205467ffffffffffffffff1683526004825280832084845290915290208054606091906110c190613253565b80601f01602080910402602001604051908101604052809291908181526020018280546110ed90613253565b801561113a5780601f1061110f5761010080835404028352916020019161113a565b820191906000526020600020905b81548152906001019060200180831161111d57829003601f168201915b50505050509050919050565b8361115081611b58565b61115957600080fd5b83611165600182613230565b161561117057600080fd5b6000858152602081815260408083205467ffffffffffffffff16835260018252808320888452825280832087845290915290206111ae8385836132ed565b50604051849086907faa121bbeef5f32f5961a2a28966e769023910fc9479059ee3495d4c1a696efe390600090a35050505050565b6000818152602081815260408083205467ffffffffffffffff1683526008825280832084845290915290208054606091906110c190613253565b8261122781611b58565b61123057600080fd5b6000848152602081815260408083205467ffffffffffffffff1683526008825280832087845290915290206112668385836132ed565b50837fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f78484604051610e0f9291906134b1565b826112a381611b58565b6112ac57600080fd5b8151158015906112be57508151601414155b80156112ce57506112ce83612245565b1561131057816040517f8d666f600000000000000000000000000000000000000000000000000000000081526004016113079190612d58565b60405180910390fd5b837f65412581168e88a1e60c6459d7f44ae83ad0832e670826c05a4e2476b57af7528484604051611342929190612cfa565b60405180910390a2603c830361139457837f52d7d861f09ab3d26239d492e8968629f95e9e318cf0b73bfddc441522a15fd261137d846134f2565b60405160609190911c815260200160405180910390a25b6000848152602081815260408083205467ffffffffffffffff16835260028252808320878452825280832086845290915290206113d1838261355e565b5050505050565b73ffffffffffffffffffffffffffffffffffffffff8216330361147d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401611307565b336000818152600b6020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b73ffffffffffffffffffffffffffffffffffffffff82163303611593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f53657474696e672064656c65676174652073746174757320666f722073656c666044820152606401611307565b336000818152600c60209081526040808320878452825280832073ffffffffffffffffffffffffffffffffffffffff87168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001686151590811790915590519384529286917ff0ddb3b04746704017f9aa8bd728fcc2c1d11675041205350018915f5e4750a0910160405180910390a4505050565b6000838152602081815260408083205467ffffffffffffffff168352600582528083208684528252808320858452825280832061ffff85168452909152902080546060919061100090613253565b606061168f6000848461226c565b9392505050565b6000818152602081815260408083205467ffffffffffffffff1683526003825280832084845290915290208054606091906110c190613253565b826116da81611b58565b6116e357600080fd5b6000848152602081815260408083205467ffffffffffffffff16808452600483528184208885529092528220805491929161171d90613253565b80601f016020809104026020016040519081016040528092919081815260200182805461174990613253565b80156117965780601f1061176b57610100808354040283529160200191611796565b820191906000526020600020905b81548152906001019060200180831161177957829003601f168201915b5050505067ffffffffffffffff841660009081526004602090815260408083208b845290915290209192506117ce90508587836132ed565b50857f8f15ed4b723ef428f250961da8315675b507046737e19319fc1a4d81bfe87f8582878760405161180393929190613677565b60405180910390a2505050505050565b8161181d81611b58565b61182657600080fd5b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084901b166020820152611875908490603c90603401604051602081830303815290604052611299565b505050565b606061188784848461226c565b949350505050565b8261189981611b58565b6118a257600080fd5b6000848152602081815260408083205467ffffffffffffffff1683526007825280832087845282528083207fffffffff0000000000000000000000000000000000000000000000000000000087168085529083529281902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8716908117909155905190815286917f7c69f06bea0bdef565b709e93a147836b0063ba2dd89f02d0b7e8d931e6a6daa910160405180910390a350505050565b6000828152602081815260408083205467ffffffffffffffff16835260028252808320858452825280832084845291829052909120805460609291906119b890613253565b80601f01602080910402602001604051908101604052809291908181526020018280546119e490613253565b8015611a315780601f10611a0657610100808354040283529160200191611a31565b820191906000526020600020905b815481529060010190602001808311611a1457829003601f168201915b5050505050915081516000148015611a5757506000611a4f84612454565b63ffffffff16115b15611afb57638000000060009081526020829052604090208054611a7a90613253565b80601f0160208091040260200160405190810160405280929190818152602001828054611aa690613253565b8015611af35780601f10611ac857610100808354040283529160200191611af3565b820191906000526020600020905b815481529060010190602001808311611ad657829003601f168201915b505050505091505b5092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f59d1d43c0000000000000000000000000000000000000000000000000000000014806105c957506105c982612480565b60003373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480611bd357503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016145b15611be057506001919050565b6040517f02571be3000000000000000000000000000000000000000000000000000000008152600481018390526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906302571be390602401602060405180830381865afa158015611c6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9291906136a7565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611d99576040517f6352211e000000000000000000000000000000000000000000000000000000008152600481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690636352211e90602401602060405180830381865afa158015611d72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9691906136a7565b90505b73ffffffffffffffffffffffffffffffffffffffff8116331480611ded575073ffffffffffffffffffffffffffffffffffffffff81166000908152600b6020908152604080832033845290915290205460ff165b8061168f575073ffffffffffffffffffffffffffffffffffffffff81166000908152600c60209081526040808320868452825280832033845290915290205460ff1661168f565b611e826040518060e001604052806060815260200160008152602001600061ffff168152602001600061ffff168152602001600063ffffffff16815260200160008152602001600081525090565b82815260c081018290526105c98161215d565b602081015181516060916105c991611ead90826124d6565b84519190612530565b60a081015160c08201516060916105c991611ead908290613230565b60008151835114801561168f575061168f83600084600087516125a7565b865160208801206000611f04878787612530565b9050831561202e5767ffffffffffffffff831660009081526005602090815260408083208d84528252808320858452825280832061ffff8c16845290915290208054611f4f90613253565b159050611fae5767ffffffffffffffff831660009081526006602090815260408083208d845282528083208584529091528120805461ffff1691611f92836136c4565b91906101000a81548161ffff021916908361ffff160217905550505b67ffffffffffffffff831660009081526005602090815260408083208d84528252808320858452825280832061ffff8c1684529091528120611fef91612a8f565b897f03528ed0c2a3ebc993b12ce3c16bb382f9c7d88ef7d8a1bf290eaf35955a12078a8a604051612021929190613700565b60405180910390a26107cd565b67ffffffffffffffff831660009081526005602090815260408083208d84528252808320858452825280832061ffff8c1684529091529020805461207190613253565b90506000036120d25767ffffffffffffffff831660009081526006602090815260408083208d845282528083208584529091528120805461ffff16916120b683613726565b91906101000a81548161ffff021916908361ffff160217905550505b67ffffffffffffffff831660009081526005602090815260408083208d84528252808320858452825280832061ffff8c1684529091529020612114828261355e565b50897f52a608b3303a48862d07a73d82fa221318c0027fbbcfb1b2329bface3f19ff2b8a8a846040516121499392919061373e565b60405180910390a250505050505050505050565b60c081015160208201819052815151116121745750565b6000612188826000015183602001516124d6565b8260200151612197919061376d565b82519091506121a690826125ca565b61ffff1660408301526121ba60028261376d565b82519091506121c990826125ca565b61ffff1660608301526121dd60028261376d565b82519091506121ec90826125f2565b63ffffffff16608083015261220260048261376d565b825190915060009061221490836125ca565b61ffff16905061222560028361376d565b60a084018190529150612238818361376d565b60c0909301929092525050565b600063800000008214806105c95750600061225f83612454565b63ffffffff161192915050565b60608167ffffffffffffffff81111561228757612287612dbe565b6040519080825280602002602001820160405280156122ba57816020015b60608152602001906001900390816122a55790505b50905060005b8281101561244c57841561239f5760008484838181106122e2576122e2613482565b90506020028101906122f49190613780565b612303916024916004916137e5565b61230c9161380f565b905085811461239d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f6d756c746963616c6c3a20416c6c207265636f726473206d757374206861766560448201527f2061206d61746368696e67206e616d65686173680000000000000000000000006064820152608401611307565b505b600080308686858181106123b5576123b5613482565b90506020028101906123c79190613780565b6040516123d5929190613243565b600060405180830381855af49150503d8060008114612410576040519150601f19603f3d011682016040523d82523d6000602084013e612415565b606091505b50915091508161242457600080fd5b8084848151811061243757612437613482565b602090810291909101015250506001016122c0565b509392505050565b6000603c820361246657506001919050565b638000000091821891821061247c5760006105c9565b5090565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167fc86902330000000000000000000000000000000000000000000000000000000014806105c957506105c98261261c565b6000815b835181106124ea576124ea61384b565b60006124f68583612672565b60ff16905061250681600161376d565b612510908361376d565b9150806000036125205750612526565b506124da565b6118878382613230565b825160609061253f838561376d565b111561254a57600080fd5b60008267ffffffffffffffff81111561256557612565612dbe565b6040519080825280601f01601f19166020018201604052801561258f576020820181803683370190505b50905060208082019086860101610c32828287612696565b60006125b484848461270a565b6125bf87878561270a565b149695505050505050565b81516000906125da83600261376d565b11156125e557600080fd5b50016002015161ffff1690565b815160009061260283600461376d565b111561260d57600080fd5b50016004015163ffffffff1690565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f691f34310000000000000000000000000000000000000000000000000000000014806105c957506105c98261272e565b600082828151811061268657612686613482565b016020015160f81c905092915050565b602081106126ce57815183526126ad60208461376d565b92506126ba60208361376d565b91506126c7602082613230565b9050612696565b905182516020929092036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0180199091169116179052565b8251600090612719838561376d565b111561272457600080fd5b5091016020012090565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f124a319c0000000000000000000000000000000000000000000000000000000014806105c957506105c98260007fffffffff0000000000000000000000000000000000000000000000000000000082167fa8fa568200000000000000000000000000000000000000000000000000000000148061281257507fffffffff0000000000000000000000000000000000000000000000000000000082167f5c98042b00000000000000000000000000000000000000000000000000000000145b806105c957506105c98260007fffffffff0000000000000000000000000000000000000000000000000000000082167fbc1c58d10000000000000000000000000000000000000000000000000000000014806105c957506105c98260007f3b3b57de000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316148061290057507ff1cb7e06000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b8061294c57507f32f111d7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b806105c957506105c98260007fffffffff0000000000000000000000000000000000000000000000000000000082167f2203ab560000000000000000000000000000000000000000000000000000000014806105c957506105c98260007fffffffff0000000000000000000000000000000000000000000000000000000082167fd700ff330000000000000000000000000000000000000000000000000000000014806105c957506105c98260007fffffffff0000000000000000000000000000000000000000000000000000000082167f4fbf04330000000000000000000000000000000000000000000000000000000014806105c957507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146105c9565b508054612a9b90613253565b6000825580601f10612aab575050565b601f016020900490600052602060002090810190612ac99190612acc565b50565b5b8082111561247c5760008155600101612acd565b80357fffffffff0000000000000000000000000000000000000000000000000000000081168114612b1157600080fd5b919050565b600060208284031215612b2857600080fd5b61168f82612ae1565b60008083601f840112612b4357600080fd5b50813567ffffffffffffffff811115612b5b57600080fd5b602083019150836020828501011115610d7b57600080fd5b600080600060408486031215612b8857600080fd5b83359250602084013567ffffffffffffffff811115612ba657600080fd5b612bb286828701612b31565b9497909650939450505050565b600080600080600060608688031215612bd757600080fd5b85359450602086013567ffffffffffffffff811115612bf557600080fd5b612c0188828901612b31565b909550935050604086013567ffffffffffffffff811115612c2157600080fd5b612c2d88828901612b31565b969995985093965092949392505050565b60008060408385031215612c5157600080fd5b82359150612c6160208401612ae1565b90509250929050565b60008060408385031215612c7d57600080fd5b50508035926020909101359150565b60005b83811015612ca7578181015183820152602001612c8f565b50506000910152565b60008151808452612cc8816020860160208601612c8c565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b8281526040602082015260006118876040830184612cb0565b600080600060608486031215612d2857600080fd5b505081359360208301359350604090920135919050565b600060208284031215612d5157600080fd5b5035919050565b60208152600061168f6020830184612cb0565b60008060008060608587031215612d8157600080fd5b8435935060208501359250604085013567ffffffffffffffff811115612da657600080fd5b612db287828801612b31565b95989497509550505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600060608486031215612e0257600080fd5b8335925060208401359150604084013567ffffffffffffffff811115612e2757600080fd5b8401601f81018613612e3857600080fd5b803567ffffffffffffffff811115612e5257612e52612dbe565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160116810181811067ffffffffffffffff82111715612ebe57612ebe612dbe565b604052818152828201602001881015612ed657600080fd5b816020840160208301376000602083830101528093505050509250925092565b73ffffffffffffffffffffffffffffffffffffffff81168114612ac957600080fd5b80358015158114612b1157600080fd5b60008060408385031215612f3b57600080fd5b8235612f4681612ef6565b9150612c6160208401612f18565b600080600060608486031215612f6957600080fd5b833592506020840135612f7b81612ef6565b9150612f8960408501612f18565b90509250925092565b600080600060608486031215612fa757600080fd5b8335925060208401359150604084013561ffff81168114612fc757600080fd5b809150509250925092565b600080600060608486031215612fe757600080fd5b8335612ff281612ef6565b9250602084013591506040840135612fc781612ef6565b60008083601f84011261301b57600080fd5b50813567ffffffffffffffff81111561303357600080fd5b6020830191508360208260051b8501011115610d7b57600080fd5b6000806020838503121561306157600080fd5b823567ffffffffffffffff81111561307857600080fd5b61308485828601613009565b90969095509350505050565b6000602082016020835280845180835260408501915060408160051b86010192506020860160005b82811015613107577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08786030184526130f2858351612cb0565b945060209384019391909101906001016130b8565b50929695505050505050565b6000806040838503121561312657600080fd5b82359150602083013561313881612ef6565b809150509250929050565b60008060006040848603121561315857600080fd5b83359250602084013567ffffffffffffffff81111561317657600080fd5b612bb286828701613009565b60008060006060848603121561319757600080fd5b833592506131a760208501612ae1565b91506040840135612fc781612ef6565b600080604083850312156131ca57600080fd5b82356131d581612ef6565b9150602083013561313881612ef6565b600082516131f7818460208701612c8c565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156105c9576105c9613201565b8183823760009101908152919050565b600181811c9082168061326757607f821691505b6020821081036132a0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561187557806000526020600020601f840160051c810160208510156132cd5750805b601f840160051c820191505b818110156113d157600081556001016132d9565b67ffffffffffffffff83111561330557613305612dbe565b613319836133138354613253565b836132a6565b6000601f84116001811461336b57600085156133355750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b1783556113d1565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b828110156133ba578685013582556020948501946001909201910161339a565b50868210156133f5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b604081526000613464604083018688613407565b8281036020840152613477818587613407565b979650505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602081526000611887602083018486613407565b600067ffffffffffffffff821667ffffffffffffffff81036134e9576134e9613201565b60010192915050565b805160208201517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000811691906014821015613557577fffffffffffffffffffffffffffffffffffffffff000000000000000000000000808360140360031b1b82161692505b5050919050565b815167ffffffffffffffff81111561357857613578612dbe565b61358c816135868454613253565b846132a6565b6020601f8211600181146135de57600083156135a85750848201515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600385901b1c1916600184901b1784556113d1565b6000848152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08516915b8281101561362c578785015182556020948501946001909201910161360c565b508482101561366857868401517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b60f8161c191681555b50505050600190811b01905550565b60408152600061368a6040830186612cb0565b828103602084015261369d818587613407565b9695505050505050565b6000602082840312156136b957600080fd5b815161168f81612ef6565b600061ffff8216806136d8576136d8613201565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0192915050565b6040815260006137136040830185612cb0565b905061ffff831660208301529392505050565b600061ffff821661ffff81036134e9576134e9613201565b6060815260006137516060830186612cb0565b61ffff85166020840152828103604084015261369d8185612cb0565b808201808211156105c9576105c9613201565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126137b557600080fd5b83018035915067ffffffffffffffff8211156137d057600080fd5b602001915036819003821315610d7b57600080fd5b600080858511156137f557600080fd5b8386111561380257600080fd5b5050820193919092039150565b803560208310156105c9577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff602084900360031b1b1692915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fdfea264697066735822122075a7658084d4def9f6cce391e839ba4adcd596c5ae93e2d00f29a82163695c2f64736f6c634300081a0033","devdoc":{"errors":{"InvalidEVMAddress(bytes)":[{"details":"Error selector: `0x8d666f60`"}]},"kind":"dev","methods":{"ABI(bytes32,uint256)":{"params":{"contentTypes":"A bitwise OR of the ABI formats accepted by the caller.","node":"The ENS node to query"},"returns":{"_0":"contentType The content type of the return value","_1":"data The ABI data"}},"addr(bytes32)":{"params":{"node":"The node to query."},"returns":{"_0":"The associated address."}},"addr(bytes32,uint256)":{"params":{"coinType":"The coin type.","node":"The node to query."},"returns":{"addressBytes":"The assocated address."}},"approve(bytes32,address,bool)":{"details":"Approve a delegate to be able to updated records on a node."},"clearRecords(bytes32)":{"params":{"node":"The node to update."}},"contenthash(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated contenthash."}},"dnsRecord(bytes32,bytes32,uint16)":{"params":{"name":"the keccak-256 hash of the fully-qualified name for which to fetch the record","node":"the namehash of the node for which to fetch the record","resource":"the ID of the resource as per https://en.wikipedia.org/wiki/List_of_DNS_record_types"},"returns":{"_0":"the DNS record in wire format if present, otherwise empty"}},"hasAddr(bytes32,uint256)":{"params":{"coinType":"The coin type.","node":"The node to query."},"returns":{"_0":"True if the associated address is not empty."}},"hasDNSRecords(bytes32,bytes32)":{"params":{"name":"the namehash of the node for which to check the records","node":"the namehash of the node for which to check the records"}},"interfaceImplementer(bytes32,bytes4)":{"params":{"interfaceID":"The EIP 165 interface ID to check for.","node":"The ENS node to query."},"returns":{"_0":"The address that implements this interface, or 0 if the interface is unsupported."}},"isApprovedFor(address,bytes32,address)":{"details":"Check to see if the delegate has been approved by the owner for the node."},"isApprovedForAll(address,address)":{"details":"See {IERC1155-isApprovedForAll}."},"name(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated name."}},"pubkey(bytes32)":{"params":{"node":"The ENS node to query"},"returns":{"x":"The X coordinate of the curve point for the public key.","y":"The Y coordinate of the curve point for the public key."}},"setABI(bytes32,uint256,bytes)":{"params":{"contentType":"The content type of the ABI","data":"The ABI data.","node":"The node to update."}},"setAddr(bytes32,address)":{"params":{"_addr":"The address to set.","node":"The node to update."}},"setAddr(bytes32,uint256,bytes)":{"params":{"addressBytes":"The address to set.","coinType":"The coin type.","node":"The node to update."}},"setApprovalForAll(address,bool)":{"details":"See {IERC1155-setApprovalForAll}."},"setContenthash(bytes32,bytes)":{"params":{"hash":"The contenthash to set","node":"The node to update."}},"setDNSRecords(bytes32,bytes)":{"params":{"data":"the DNS wire format records to set","node":"the namehash of the node for which to set the records"}},"setInterface(bytes32,bytes4,address)":{"params":{"implementer":"The address of a contract that implements this interface for this node.","interfaceID":"The EIP 165 interface ID.","node":"The node to update."}},"setName(bytes32,string)":{"params":{"node":"The node to update."}},"setPubkey(bytes32,bytes32,bytes32)":{"params":{"node":"The ENS node to query","x":"the X coordinate of the curve point for the public key.","y":"the Y coordinate of the curve point for the public key."}},"setText(bytes32,string,string)":{"params":{"key":"The key to set.","node":"The node to update.","value":"The text data value to set."}},"setZonehash(bytes32,bytes)":{"params":{"hash":"The zonehash to set","node":"The node to update."}},"text(bytes32,string)":{"params":{"key":"The text data key to query.","node":"The ENS node to query."},"returns":{"_0":"The associated text data."}},"zonehash(bytes32)":{"params":{"node":"The ENS node to query."},"returns":{"_0":"The associated contenthash."}}},"version":1},"userdoc":{"errors":{"InvalidEVMAddress(bytes)":[{"notice":"The supplied address could not be converted to `address`."}]},"kind":"user","methods":{"ABI(bytes32,uint256)":{"notice":"Returns the ABI associated with an ENS node. Defined in EIP205."},"addr(bytes32)":{"notice":"Get `addr(60)` as `address` of the associated ENS node."},"addr(bytes32,uint256)":{"notice":"Get the address for coin type of the associated ENS node.         If coin type is EVM and empty, defaults to `addr(COIN_TYPE_DEFAULT)`."},"clearRecords(bytes32)":{"notice":"Increments the record version associated with an ENS node. May only be called by the owner of that node in the ENS registry."},"contenthash(bytes32)":{"notice":"Returns the contenthash associated with an ENS node."},"dnsRecord(bytes32,bytes32,uint16)":{"notice":"Obtain a DNS record."},"hasAddr(bytes32,uint256)":{"notice":"Determine if an addresss is stored for the coin type of the associated ENS node."},"hasDNSRecords(bytes32,bytes32)":{"notice":"Check if a given node has records."},"interfaceImplementer(bytes32,bytes4)":{"notice":"Returns the address of a contract that implements the specified interface for this name. If an implementer has not been set for this interfaceID and name, the resolver will query the contract at `addr()`. If `addr()` is set, a contract exists at that address, and that contract implements EIP165 and returns `true` for the specified interfaceID, its address will be returned."},"name(bytes32)":{"notice":"Returns the name associated with an ENS node, for reverse records. Defined in EIP181."},"pubkey(bytes32)":{"notice":"Returns the SECP256k1 public key associated with an ENS node. Defined in EIP 619."},"setABI(bytes32,uint256,bytes)":{"notice":"Sets the ABI associated with an ENS node. Nodes may have one ABI of each content type. To remove an ABI, set it to the empty string."},"setAddr(bytes32,address)":{"notice":"Set `addr(60)` of the associated ENS node.         `address(0)` is stored as `new bytes(20)`."},"setAddr(bytes32,uint256,bytes)":{"notice":"Set the address for coin type of the associated ENS node.         Reverts `InvalidEVMAddress` if coin type is EVM and not 0 or 20 bytes."},"setContenthash(bytes32,bytes)":{"notice":"Sets the contenthash associated with an ENS node. May only be called by the owner of that node in the ENS registry."},"setDNSRecords(bytes32,bytes)":{"notice":"Set one or more DNS records.  Records are supplied in wire-format. Records with the same node/name/resource must be supplied one after the other to ensure the data is updated correctly. For example, if the data was supplied:     a.example.com IN A 1.2.3.4     a.example.com IN A 5.6.7.8     www.example.com IN CNAME a.example.com. then this would store the two A records for a.example.com correctly as a single RRSET, however if the data was supplied:     a.example.com IN A 1.2.3.4     www.example.com IN CNAME a.example.com.     a.example.com IN A 5.6.7.8 then this would store the first A record, the CNAME, then the second A record which would overwrite the first."},"setInterface(bytes32,bytes4,address)":{"notice":"Sets an interface associated with a name. Setting the address to 0 restores the default behaviour of querying the contract at `addr()` for interface support."},"setName(bytes32,string)":{"notice":"Sets the name associated with an ENS node, for reverse records. May only be called by the owner of that node in the ENS registry."},"setPubkey(bytes32,bytes32,bytes32)":{"notice":"Sets the SECP256k1 public key associated with an ENS node."},"setText(bytes32,string,string)":{"notice":"Sets the text data associated with an ENS node and key. May only be called by the owner of that node in the ENS registry."},"setZonehash(bytes32,bytes)":{"notice":"setZonehash sets the hash for the zone. May only be called by the owner of that node in the ENS registry."},"text(bytes32,string)":{"notice":"Returns the text data associated with an ENS node and key."},"zonehash(bytes32)":{"notice":"zonehash obtains the hash for the zone."}},"notice":"A simple resolver anyone can use; only allows the owner of a node to set its address.","version":1},"storageLayout":{"storage":[{"astId":23702,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"recordVersions","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_uint64)"},{"astId":23796,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"versionable_abis","offset":0,"slot":"1","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage)))"},{"astId":23963,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"versionable_addresses","offset":0,"slot":"2","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage)))"},{"astId":24205,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"versionable_hashes","offset":0,"slot":"3","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_bytes_storage))"},{"astId":24295,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"versionable_zonehashes","offset":0,"slot":"4","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_bytes_storage))"},{"astId":24305,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"versionable_records","offset":0,"slot":"5","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))))"},{"astId":24313,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"versionable_nameEntriesCount","offset":0,"slot":"6","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint16)))"},{"astId":25814,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"versionable_interfaces","offset":0,"slot":"7","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes4,t_address)))"},{"astId":26006,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"versionable_names","offset":0,"slot":"8","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_string_storage))"},{"astId":26093,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"versionable_pubkeys","offset":0,"slot":"9","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_struct(PublicKey)26086_storage))"},{"astId":26196,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"versionable_texts","offset":0,"slot":"10","type":"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage)))"},{"astId":23231,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"_operatorApprovals","offset":0,"slot":"11","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":23240,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"_tokenApprovals","offset":0,"slot":"12","type":"t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_address,t_bool)))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_bytes4":{"encoding":"inplace","label":"bytes4","numberOfBytes":"4"},"t_bytes_storage":{"encoding":"bytes","label":"bytes","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_address,t_bool)))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(bytes32 => mapping(address => bool)))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_address,t_bool))"},"t_mapping(t_bytes32,t_bytes_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_bytes32,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage)))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes)))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))"},"t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint16))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(bytes32 => uint16))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_uint16)"},"t_mapping(t_bytes32,t_mapping(t_bytes4,t_address))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(bytes4 => address))","numberOfBytes":"32","value":"t_mapping(t_bytes4,t_address)"},"t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(string => string))","numberOfBytes":"32","value":"t_mapping(t_string_memory_ptr,t_string_storage)"},"t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(uint16 => bytes))","numberOfBytes":"32","value":"t_mapping(t_uint16,t_bytes_storage)"},"t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(uint256 => bytes))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_bytes_storage)"},"t_mapping(t_bytes32,t_string_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_bytes32,t_struct(PublicKey)26086_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct PubkeyResolver.PublicKey)","numberOfBytes":"32","value":"t_struct(PublicKey)26086_storage"},"t_mapping(t_bytes32,t_uint16)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint16)","numberOfBytes":"32","value":"t_uint16"},"t_mapping(t_bytes32,t_uint64)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => uint64)","numberOfBytes":"32","value":"t_uint64"},"t_mapping(t_bytes4,t_address)":{"encoding":"mapping","key":"t_bytes4","label":"mapping(bytes4 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_string_memory_ptr,t_string_storage)":{"encoding":"mapping","key":"t_string_memory_ptr","label":"mapping(string => string)","numberOfBytes":"32","value":"t_string_storage"},"t_mapping(t_uint16,t_bytes_storage)":{"encoding":"mapping","key":"t_uint16","label":"mapping(uint16 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_uint256,t_bytes_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => bytes)","numberOfBytes":"32","value":"t_bytes_storage"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_bytes_storage))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => bytes))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_bytes_storage)"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage))))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => mapping(bytes32 => mapping(uint16 => bytes))))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_bytes32,t_mapping(t_uint16,t_bytes_storage)))"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint16)))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => mapping(bytes32 => uint16)))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_bytes32,t_uint16))"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_bytes4,t_address)))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => mapping(bytes4 => address)))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_bytes4,t_address))"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage)))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => mapping(string => string)))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_string_storage))"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage)))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => mapping(uint256 => bytes)))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_mapping(t_uint256,t_bytes_storage))"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_string_storage))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => string))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_string_storage)"},"t_mapping(t_uint64,t_mapping(t_bytes32,t_struct(PublicKey)26086_storage))":{"encoding":"mapping","key":"t_uint64","label":"mapping(uint64 => mapping(bytes32 => struct PubkeyResolver.PublicKey))","numberOfBytes":"32","value":"t_mapping(t_bytes32,t_struct(PublicKey)26086_storage)"},"t_string_memory_ptr":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(PublicKey)26086_storage":{"encoding":"inplace","label":"struct PubkeyResolver.PublicKey","members":[{"astId":26083,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"x","offset":0,"slot":"0","type":"t_bytes32"},{"astId":26085,"contract":"contracts/resolvers/PublicResolver.sol:PublicResolver","label":"y","offset":0,"slot":"1","type":"t_bytes32"}],"numberOfBytes":"64"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}}}')},75441:e=>{"use strict";e.exports=JSON.parse('[{"inputs":[{"internalType":"address","name":"_identityRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ECDSAInvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"length","type":"uint256"}],"name":"ECDSAInvalidSignatureLength","type":"error"},{"inputs":[{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ECDSAInvalidSignatureS","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"agentId","type":"uint256"},{"indexed":true,"internalType":"address","name":"clientAddress","type":"address"},{"indexed":true,"internalType":"uint64","name":"feedbackIndex","type":"uint64"}],"name":"FeedbackRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"agentId","type":"uint256"},{"indexed":true,"internalType":"address","name":"clientAddress","type":"address"},{"indexed":false,"internalType":"uint8","name":"score","type":"uint8"},{"indexed":true,"internalType":"bytes32","name":"tag1","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"tag2","type":"bytes32"},{"indexed":false,"internalType":"string","name":"feedbackUri","type":"string"},{"indexed":false,"internalType":"bytes32","name":"feedbackHash","type":"bytes32"}],"name":"NewFeedback","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"agentId","type":"uint256"},{"indexed":true,"internalType":"address","name":"clientAddress","type":"address"},{"indexed":false,"internalType":"uint64","name":"feedbackIndex","type":"uint64"},{"indexed":true,"internalType":"address","name":"responder","type":"address"},{"indexed":false,"internalType":"string","name":"responseUri","type":"string"},{"indexed":false,"internalType":"bytes32","name":"responseHash","type":"bytes32"}],"name":"ResponseAppended","type":"event"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"address","name":"clientAddress","type":"address"},{"internalType":"uint64","name":"feedbackIndex","type":"uint64"},{"internalType":"string","name":"responseUri","type":"string"},{"internalType":"bytes32","name":"responseHash","type":"bytes32"}],"name":"appendResponse","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"}],"name":"getClients","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getIdentityRegistry","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"address","name":"clientAddress","type":"address"}],"name":"getLastIndex","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"address","name":"clientAddress","type":"address"},{"internalType":"uint64","name":"feedbackIndex","type":"uint64"},{"internalType":"address[]","name":"responders","type":"address[]"}],"name":"getResponseCount","outputs":[{"internalType":"uint64","name":"count","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"address[]","name":"clientAddresses","type":"address[]"},{"internalType":"bytes32","name":"tag1","type":"bytes32"},{"internalType":"bytes32","name":"tag2","type":"bytes32"}],"name":"getSummary","outputs":[{"internalType":"uint64","name":"count","type":"uint64"},{"internalType":"uint8","name":"averageScore","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"uint8","name":"score","type":"uint8"},{"internalType":"bytes32","name":"tag1","type":"bytes32"},{"internalType":"bytes32","name":"tag2","type":"bytes32"},{"internalType":"string","name":"feedbackUri","type":"string"},{"internalType":"bytes32","name":"feedbackHash","type":"bytes32"},{"internalType":"bytes","name":"feedbackAuth","type":"bytes"}],"name":"giveFeedback","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"address[]","name":"clientAddresses","type":"address[]"},{"internalType":"bytes32","name":"tag1","type":"bytes32"},{"internalType":"bytes32","name":"tag2","type":"bytes32"},{"internalType":"bool","name":"includeRevoked","type":"bool"}],"name":"readAllFeedback","outputs":[{"internalType":"address[]","name":"clients","type":"address[]"},{"internalType":"uint8[]","name":"scores","type":"uint8[]"},{"internalType":"bytes32[]","name":"tag1s","type":"bytes32[]"},{"internalType":"bytes32[]","name":"tag2s","type":"bytes32[]"},{"internalType":"bool[]","name":"revokedStatuses","type":"bool[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"address","name":"clientAddress","type":"address"},{"internalType":"uint64","name":"index","type":"uint64"}],"name":"readFeedback","outputs":[{"internalType":"uint8","name":"score","type":"uint8"},{"internalType":"bytes32","name":"tag1","type":"bytes32"},{"internalType":"bytes32","name":"tag2","type":"bytes32"},{"internalType":"bool","name":"isRevoked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"uint64","name":"feedbackIndex","type":"uint64"}],"name":"revokeFeedback","outputs":[],"stateMutability":"nonpayable","type":"function"}]')},7581:e=>{"use strict";e.exports=JSON.parse('[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721IncorrectOwner","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721InsufficientApproval","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC721InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"ERC721InvalidOperator","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"ERC721InvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC721InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC721InvalidSender","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonexistentToken","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_toTokenId","type":"uint256"}],"name":"BatchMetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"agentId","type":"uint256"},{"indexed":true,"internalType":"string","name":"indexedKey","type":"string"},{"indexed":false,"internalType":"string","name":"key","type":"string"},{"indexed":false,"internalType":"bytes","name":"value","type":"bytes"}],"name":"MetadataSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"MetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"agentId","type":"uint256"},{"indexed":false,"internalType":"string","name":"tokenURI","type":"string"},{"indexed":true,"internalType":"address","name":"owner","type":"address"}],"name":"Registered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"agentId","type":"uint256"},{"indexed":false,"internalType":"string","name":"newUri","type":"string"},{"indexed":true,"internalType":"address","name":"updatedBy","type":"address"}],"name":"UriUpdated","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"string","name":"key","type":"string"}],"name":"getMetadata","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"register","outputs":[{"internalType":"uint256","name":"agentId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"tokenUri","type":"string"},{"components":[{"internalType":"string","name":"key","type":"string"},{"internalType":"bytes","name":"value","type":"bytes"}],"internalType":"struct IdentityRegistry.MetadataEntry[]","name":"metadata","type":"tuple[]"}],"name":"register","outputs":[{"internalType":"uint256","name":"agentId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"tokenUri","type":"string"}],"name":"register","outputs":[{"internalType":"uint256","name":"agentId","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"string","name":"newUri","type":"string"}],"name":"setAgentUri","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"string","name":"key","type":"string"},{"internalType":"bytes","name":"value","type":"bytes"}],"name":"setMetadata","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}]')},53650:e=>{"use strict";e.exports=JSON.parse('[{"inputs":[{"internalType":"address","name":"_identityRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ECDSAInvalidSignature","type":"error"},{"inputs":[{"internalType":"uint256","name":"length","type":"uint256"}],"name":"ECDSAInvalidSignatureLength","type":"error"},{"inputs":[{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"ECDSAInvalidSignatureS","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"agentId","type":"uint256"},{"indexed":true,"internalType":"address","name":"clientAddress","type":"address"},{"indexed":true,"internalType":"uint64","name":"feedbackIndex","type":"uint64"}],"name":"FeedbackRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"agentId","type":"uint256"},{"indexed":true,"internalType":"address","name":"clientAddress","type":"address"},{"indexed":false,"internalType":"uint8","name":"score","type":"uint8"},{"indexed":true,"internalType":"bytes32","name":"tag1","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"tag2","type":"bytes32"},{"indexed":false,"internalType":"string","name":"feedbackUri","type":"string"},{"indexed":false,"internalType":"bytes32","name":"feedbackHash","type":"bytes32"}],"name":"NewFeedback","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"agentId","type":"uint256"},{"indexed":true,"internalType":"address","name":"clientAddress","type":"address"},{"indexed":false,"internalType":"uint64","name":"feedbackIndex","type":"uint64"},{"indexed":true,"internalType":"address","name":"responder","type":"address"},{"indexed":false,"internalType":"string","name":"responseUri","type":"string"},{"indexed":false,"internalType":"bytes32","name":"responseHash","type":"bytes32"}],"name":"ResponseAppended","type":"event"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"address","name":"clientAddress","type":"address"},{"internalType":"uint64","name":"feedbackIndex","type":"uint64"},{"internalType":"string","name":"responseUri","type":"string"},{"internalType":"bytes32","name":"responseHash","type":"bytes32"}],"name":"appendResponse","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"}],"name":"getClients","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getIdentityRegistry","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"address","name":"clientAddress","type":"address"}],"name":"getLastIndex","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"address","name":"clientAddress","type":"address"},{"internalType":"uint64","name":"feedbackIndex","type":"uint64"},{"internalType":"address[]","name":"responders","type":"address[]"}],"name":"getResponseCount","outputs":[{"internalType":"uint64","name":"count","type":"uint64"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"address[]","name":"clientAddresses","type":"address[]"},{"internalType":"bytes32","name":"tag1","type":"bytes32"},{"internalType":"bytes32","name":"tag2","type":"bytes32"}],"name":"getSummary","outputs":[{"internalType":"uint64","name":"count","type":"uint64"},{"internalType":"uint8","name":"averageScore","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"uint8","name":"score","type":"uint8"},{"internalType":"bytes32","name":"tag1","type":"bytes32"},{"internalType":"bytes32","name":"tag2","type":"bytes32"},{"internalType":"string","name":"feedbackUri","type":"string"},{"internalType":"bytes32","name":"feedbackHash","type":"bytes32"},{"internalType":"bytes","name":"feedbackAuth","type":"bytes"}],"name":"giveFeedback","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"address[]","name":"clientAddresses","type":"address[]"},{"internalType":"bytes32","name":"tag1","type":"bytes32"},{"internalType":"bytes32","name":"tag2","type":"bytes32"},{"internalType":"bool","name":"includeRevoked","type":"bool"}],"name":"readAllFeedback","outputs":[{"internalType":"address[]","name":"clients","type":"address[]"},{"internalType":"uint8[]","name":"scores","type":"uint8[]"},{"internalType":"bytes32[]","name":"tag1s","type":"bytes32[]"},{"internalType":"bytes32[]","name":"tag2s","type":"bytes32[]"},{"internalType":"bool[]","name":"revokedStatuses","type":"bool[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"address","name":"clientAddress","type":"address"},{"internalType":"uint64","name":"index","type":"uint64"}],"name":"readFeedback","outputs":[{"internalType":"uint8","name":"score","type":"uint8"},{"internalType":"bytes32","name":"tag1","type":"bytes32"},{"internalType":"bytes32","name":"tag2","type":"bytes32"},{"internalType":"bool","name":"isRevoked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"uint64","name":"feedbackIndex","type":"uint64"}],"name":"revokeFeedback","outputs":[],"stateMutability":"nonpayable","type":"function"}]')},25639:e=>{"use strict";e.exports=JSON.parse('[{"inputs":[{"internalType":"address","name":"_identityRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"validatorAddress","type":"address"},{"indexed":true,"internalType":"uint256","name":"agentId","type":"uint256"},{"indexed":false,"internalType":"string","name":"requestUri","type":"string"},{"indexed":true,"internalType":"bytes32","name":"requestHash","type":"bytes32"}],"name":"ValidationRequest","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"validatorAddress","type":"address"},{"indexed":true,"internalType":"uint256","name":"agentId","type":"uint256"},{"indexed":true,"internalType":"bytes32","name":"requestHash","type":"bytes32"},{"indexed":false,"internalType":"uint8","name":"response","type":"uint8"},{"indexed":false,"internalType":"string","name":"responseUri","type":"string"},{"indexed":false,"internalType":"bytes32","name":"responseHash","type":"bytes32"},{"indexed":false,"internalType":"bytes32","name":"tag","type":"bytes32"}],"name":"ValidationResponse","type":"event"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"}],"name":"getAgentValidations","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getIdentityRegistry","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"address[]","name":"validatorAddresses","type":"address[]"},{"internalType":"bytes32","name":"tag","type":"bytes32"}],"name":"getSummary","outputs":[{"internalType":"uint64","name":"count","type":"uint64"},{"internalType":"uint8","name":"avgResponse","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestHash","type":"bytes32"}],"name":"getValidationStatus","outputs":[{"internalType":"address","name":"validatorAddress","type":"address"},{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"uint8","name":"response","type":"uint8"},{"internalType":"bytes32","name":"responseHash","type":"bytes32"},{"internalType":"bytes32","name":"tag","type":"bytes32"},{"internalType":"uint256","name":"lastUpdate","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"validatorAddress","type":"address"}],"name":"getValidatorRequests","outputs":[{"internalType":"bytes32[]","name":"","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"validatorAddress","type":"address"},{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"string","name":"requestUri","type":"string"},{"internalType":"bytes32","name":"requestHash","type":"bytes32"}],"name":"validationRequest","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"requestHash","type":"bytes32"},{"internalType":"uint8","name":"response","type":"uint8"},{"internalType":"string","name":"responseUri","type":"string"},{"internalType":"bytes32","name":"responseHash","type":"bytes32"},{"internalType":"bytes32","name":"tag","type":"bytes32"}],"name":"validationResponse","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"validations","outputs":[{"internalType":"address","name":"validatorAddress","type":"address"},{"internalType":"uint256","name":"agentId","type":"uint256"},{"internalType":"uint8","name":"response","type":"uint8"},{"internalType":"bytes32","name":"responseHash","type":"bytes32"},{"internalType":"bytes32","name":"tag","type":"bytes32"},{"internalType":"uint256","name":"lastUpdate","type":"uint256"}],"stateMutability":"view","type":"function"}]')}};