"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[315],{24315:function(t,e,i){i.d(e,{TransactionFactory:function(){return k}});var r,s,a,o,n=i(8902),h=i(50821),c=i(88568);(r=a||(a={}))[r.EIP155ReplayProtection=155]="EIP155ReplayProtection",r[r.EIP1559FeeMarket=1559]="EIP1559FeeMarket",r[r.EIP2718TypedTransaction=2718]="EIP2718TypedTransaction",r[r.EIP2930AccessLists=2930]="EIP2930AccessLists",r[r.EIP7702EOACode=7702]="EIP7702EOACode",(s=o||(o={}))[s.Legacy=0]="Legacy",s[s.AccessListEIP2930=1]="AccessListEIP2930",s[s.FeeMarketEIP1559=2]="FeeMarketEIP1559",s[s.BlobEIP4844=3]="BlobEIP4844",s[s.EOACodeEIP7702=4]="EOACodeEIP7702";class m{static getAccessListData(t){let e,i;if(0===t.length||Array.isArray(t[0])){i=t??[];let r=[];for(let t=0;t<i.length;t++){let e=i[t],s=(0,h.ci)(e[0]),a=[];for(let t=0;t<e[1].length;t++)a.push((0,h.ci)(e[1][t]));let o={address:s,storageKeys:a};r.push(o)}e=r}else{e=t;let r=[];for(let e=0;e<t.length;e++){let i=t[e],s=(0,h.nr)(i.address),a=[];for(let t=0;t<i.storageKeys.length;t++)a.push((0,h.nr)(i.storageKeys[t]));r.push([s,a])}i=r}return{AccessListJSON:e,accessList:i}}static verifyAccessList(t){for(let e=0;e<t.length;e++){let i=t[e],r=i[0],s=i[1];if(void 0!==i[2])throw Error("Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.");if(20!==r.length)throw Error("Invalid EIP-2930 transaction: address length should be 20 bytes");for(let t=0;t<s.length;t++)if(32!==s[t].length)throw Error("Invalid EIP-2930 transaction: storage slot length should be 32 bytes")}}static getAccessListJSON(t){let e=[];for(let i=0;i<t.length;i++){let r=t[i],s={address:(0,h.ci)((0,h.V_)(r[0],20)),storageKeys:[]},a=r[1];for(let t=0;t<a.length;t++){let e=a[t];s.storageKeys.push((0,h.ci)((0,h.V_)(e,32)))}e.push(s)}return e}static getDataFeeEIP2930(t,e){let i=e.param("gasPrices","accessListStorageKeyCost"),r=e.param("gasPrices","accessListAddressCost"),s=0;for(let e=0;e<t.length;e++)s+=t[e][1].length;return t.length*Number(r)+s*Number(i)}}class l{static getAuthorizationListData(t){let e,i;if(0===t.length||Array.isArray(t[0])){i=t??[];let r=[];for(let t=0;t<i.length;t++){let e=i[t],s=(0,h.ci)(e[0]),a=(0,h.ci)(e[1]),o=e[2],n=[];for(let t=0;t<o.length;t++)n.push((0,h.ci)(o[t]));let c={chainId:s,address:a,nonce:n,yParity:(0,h.ci)(e[3]),r:(0,h.ci)(e[4]),s:(0,h.ci)(e[5])};r.push(c)}e=r}else{e=t;let r=[],s=["chainId","address","nonce","yParity","r","s"];for(let e=0;e<t.length;e++){let i=t[e];for(let t of s)if(void 0===i[t])throw Error(`EIP-7702 authorization list invalid: ${t} is not defined`);let a=(0,h.nr)(i.chainId),o=(0,h.nr)(i.address),n=[];for(let t=0;t<i.nonce.length;t++)n.push((0,h.nr)(i.nonce[t]));let c=(0,h.nr)(i.yParity),m=(0,h.nr)(i.r),l=(0,h.nr)(i.s);r.push([a,o,n,c,m,l])}i=r}return{AuthorizationListJSON:e,authorizationList:i}}static verifyAuthorizationList(t){for(let e=0;e<t.length;e++){let i=t[e],r=i[1],s=i[2],a=i[3],o=i[4],n=i[5];if((0,h.jY)({yParity:a,r:o,s:n}),20!==r.length)throw Error("Invalid EIP-7702 transaction: address length should be 20 bytes");if(s.length>1)throw Error("Invalid EIP-7702 transaction: nonce list should consist of at most 1 item");1===s.length&&(0,h.jY)({nonce:s[0]})}}static getDataFeeEIP7702(t,e){let i=e.param("gasPrices","perAuthBaseCost");return t.length*Number(i)}}function d(t){return(0,h.nr)(`0x${t.toString(16).padStart(2,"0")}`)}class g{constructor(t,e){this.cache={hash:void 0,dataFee:void 0,senderPubKey:void 0},this.activeCapabilities=[],this.DEFAULT_CHAIN=c.qo.Mainnet;let{nonce:i,gasLimit:r,to:s,value:a,data:o,v:n,r:m,s:l,type:d}=t;this._type=Number((0,h.v3)((0,h.O0)(d))),this.txOptions=e;let g=(0,h.O0)(""===s?"0x":s),u=(0,h.O0)(n),v=(0,h.O0)(m),P=(0,h.O0)(l);this.nonce=(0,h.v3)((0,h.O0)(i)),this.gasLimit=(0,h.v3)((0,h.O0)(r)),this.to=g.length>0?new h.kL(g):void 0,this.value=(0,h.v3)((0,h.O0)(a)),this.data=(0,h.O0)(""===o?"0x":o),this.v=u.length>0?(0,h.v3)(u):void 0,this.r=v.length>0?(0,h.v3)(v):void 0,this.s=P.length>0?(0,h.v3)(P):void 0,this._validateCannotExceedMaxInteger({value:this.value,r:this.r,s:this.s}),this._validateCannotExceedMaxInteger({gasLimit:this.gasLimit},64),this._validateCannotExceedMaxInteger({nonce:this.nonce},64,!0);let f=void 0===this.to||null===this.to,y=e.allowUnlimitedInitCodeSize??!1,b=e.common??this._getCommon();f&&b.isActivatedEIP(3860)&&!1===y&&function(t,e){let i=t.param("vm","maxInitCodeSize");if(i&&BigInt(e)>i)throw Error(`the initcode size of this transaction is too large: it is ${e} while the max is ${t.param("vm","maxInitCodeSize")}`)}(b,this.data.length)}get type(){return this._type}supports(t){return this.activeCapabilities.includes(t)}getValidationErrors(){let t=[];return this.isSigned()&&!this.verifySignature()&&t.push("Invalid Signature"),this.getBaseFee()>this.gasLimit&&t.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`),t}isValid(){return 0===this.getValidationErrors().length}getBaseFee(){let t=this.common.param("gasPrices","tx"),e=this.getDataFee();if(t&&(e+=t),this.common.gteHardfork("homestead")&&this.toCreationAddress()){let t=this.common.param("gasPrices","txCreation");t&&(e+=t)}return e}getDataFee(){let t=this.common.param("gasPrices","txDataZero"),e=this.common.param("gasPrices","txDataNonZero"),i=h.N$;for(let r=0;r<this.data.length;r++)0===this.data[r]?i+=t:i+=e;if((void 0===this.to||null===this.to)&&this.common.isActivatedEIP(3860)){let t=BigInt(Math.ceil(this.data.length/32));i+=this.common.param("gasPrices","initCodeWordCost")*t}return i}toCreationAddress(){return void 0===this.to||0===this.to.bytes.length}isSigned(){let{v:t,r:e,s:i}=this;return void 0!==t&&void 0!==e&&void 0!==i}verifySignature(){try{let t=this.getSenderPublicKey();return 0!==(0,h._K)(t).length}catch(t){return!1}}getSenderAddress(){return new h.kL((0,h.fB)(this.getSenderPublicKey()))}sign(t){if(32!==t.length)throw Error(this._errorMsg("Private key must be 32 bytes in length."));let e=!1;this.type===o.Legacy&&this.common.gteHardfork("spuriousDragon")&&!this.supports(a.EIP155ReplayProtection)&&(this.activeCapabilities.push(a.EIP155ReplayProtection),e=!0);let i=this.getHashedMessageToSign(),{v:r,r:s,s:n}=(this.common.customCrypto?.ecsign??h.v4)(i,t),c=this.addSignature(r,s,n,!0);if(e){let t=this.activeCapabilities.indexOf(a.EIP155ReplayProtection);t>-1&&this.activeCapabilities.splice(t,1)}return c}toJSON(){return{type:(0,h.Z4)(BigInt(this.type)),nonce:(0,h.Z4)(this.nonce),gasLimit:(0,h.Z4)(this.gasLimit),to:void 0!==this.to?this.to.toString():void 0,value:(0,h.Z4)(this.value),data:(0,h.ci)(this.data),v:void 0!==this.v?(0,h.Z4)(this.v):void 0,r:void 0!==this.r?(0,h.Z4)(this.r):void 0,s:void 0!==this.s?(0,h.Z4)(this.s):void 0}}_getCommon(t,e){if(void 0===e)return t?.copy()??new c.Common({chain:this.DEFAULT_CHAIN});{let i=(0,h.v3)((0,h.O0)(e));if(t){if(t.chainId()!==i)throw Error(this._errorMsg(`The chain ID does not match the chain ID of Common. Got: ${i}, expected: ${t.chainId()}`));return t.copy()}return c.Common.isSupportedChainId(i)?new c.Common({chain:i}):c.Common.custom({name:"custom-chain",networkId:i,chainId:i},{baseChain:this.DEFAULT_CHAIN})}}_validateCannotExceedMaxInteger(t,e=256,i=!1){for(let[r,s]of Object.entries(t))switch(e){case 64:if(i){if(void 0!==s&&s>=h.np)throw Error(this._errorMsg(`${r} cannot equal or exceed MAX_UINT64 (2^64-1), given ${s}`))}else if(void 0!==s&&s>h.np)throw Error(this._errorMsg(`${r} cannot exceed MAX_UINT64 (2^64-1), given ${s}`));break;case 256:if(i){if(void 0!==s&&s>=h.E2)throw Error(this._errorMsg(`${r} cannot equal or exceed MAX_INTEGER (2^256-1), given ${s}`))}else if(void 0!==s&&s>h.E2)throw Error(this._errorMsg(`${r} cannot exceed MAX_INTEGER (2^256-1), given ${s}`));break;default:throw Error(this._errorMsg("unimplemented bits value"))}}static _validateNotArray(t){let e=["nonce","gasPrice","gasLimit","to","value","data","v","r","s","type","baseFee","maxFeePerGas","chainId"];for(let[i,r]of Object.entries(t))if(e.includes(i)&&Array.isArray(r))throw Error(`${i} cannot be an array`)}_getSharedErrorPostfix(){let t="";try{t=this.isSigned()?(0,h.ci)(this.hash()):"not available (unsigned)"}catch(e){t="error"}let e="";try{e=this.isSigned().toString()}catch(e){t="error"}let i="";try{i=this.common.hardfork()}catch(t){i="error"}return`tx type=${this.type} hash=${t} nonce=${this.nonce} value=${this.value} signed=${e} hf=${i}`}}function u(t,e){let i=t.maxPriorityFeePerGas,r=t.maxFeePerGas-e;return t.gasLimit*((i<r?i:r)+e)+t.value}function v(t,e){if(void 0===e||e>t.maxFeePerGas)throw Error("Tx cannot pay baseFee");let i=t.maxFeePerGas-e;return t.maxPriorityFeePerGas<i?t.maxPriorityFeePerGas:i}var P=i(1597);function f(t,e){return`${e} (${t.errorStr()})`}function y(t,e){if(t.cache.dataFee&&t.cache.dataFee.hardfork===t.common.hardfork())return t.cache.dataFee.value;let i=g.prototype.getDataFee.bind(t)()+(e??0n);return Object.isFrozen(t)&&(t.cache.dataFee={value:i,hardfork:t.common.hardfork()}),i}function b(t){if(!t.isSigned())throw Error(f(t,"Cannot call hash method if transaction is not signed"));let e=t.common.customCrypto.keccak256??P.wn;return Object.isFrozen(t)?(t.cache.hash||(t.cache.hash=e(t.serialize())),t.cache.hash):e(t.serialize())}function x(t){let{s:e}=t;if(t.common.gteHardfork("homestead")&&void 0!==e&&e>h.Sr)throw Error(f(t,"Invalid Signature: s-values greater than secp256k1n/2 are considered invalid"))}function p(t){if(void 0!==t.cache.senderPubKey)return t.cache.senderPubKey;let e=t.getMessageToVerifySignature(),{v:i,r,s}=t;x(t);try{let o=(t.common.customCrypto.ecrecover??h.Js)(e,i,(0,h.XD)(r),(0,h.XD)(s),t.supports(a.EIP155ReplayProtection)?t.common.chainId():void 0);return Object.isFrozen(t)&&(t.cache.senderPubKey=o),o}catch(e){throw Error(f(t,"Invalid Signature"))}}function E(t,e){if(void 0!==e&&e>t)throw Error("Tx cannot pay baseFee");return void 0===e?t:t-e}function I(t){return(t.common.customCrypto.keccak256??P.wn)(t.getMessageToSign())}function w(t,e){return(0,h.eV)(d(t.type),n.yH.encode(e??t.raw()))}function A(t){let{v:e}=t;if(void 0!==e&&e!==h.N$&&e!==h.jm)throw Error(f(t,"The y-parity of the transaction should either be 0 or 1"))}function F(t){return y(t,BigInt(m.getDataFeeEIP2930(t.accessList,t.common)))}class L extends g{constructor(t,e={}){super({...t,type:o.FeeMarketEIP1559},e);let{chainId:i,accessList:r,maxFeePerGas:s,maxPriorityFeePerGas:a}=t;if(this.common=this._getCommon(e.common,i),this.chainId=this.common.chainId(),!this.common.isActivatedEIP(1559))throw Error("EIP-1559 not enabled on Common");this.activeCapabilities=this.activeCapabilities.concat([1559,2718,2930]);let n=m.getAccessListData(r??[]);if(this.accessList=n.accessList,this.AccessListJSON=n.AccessListJSON,m.verifyAccessList(this.accessList),this.maxFeePerGas=(0,h.v3)((0,h.O0)(s)),this.maxPriorityFeePerGas=(0,h.v3)((0,h.O0)(a)),this._validateCannotExceedMaxInteger({maxFeePerGas:this.maxFeePerGas,maxPriorityFeePerGas:this.maxPriorityFeePerGas}),g._validateNotArray(t),this.gasLimit*this.maxFeePerGas>h.E2)throw Error(this._errorMsg("gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)"));if(this.maxFeePerGas<this.maxPriorityFeePerGas)throw Error(this._errorMsg("maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)"));A(this),x(this),(e?.freeze??!0)&&Object.freeze(this)}static fromTxData(t,e={}){return new L(t,e)}static fromSerializedTx(t,e={}){if(!1===(0,h.hD)(t.subarray(0,1),d(o.FeeMarketEIP1559)))throw Error(`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${o.FeeMarketEIP1559}, received: ${(0,h.ci)(t.subarray(0,1))}`);let i=n.yH.decode(t.subarray(1));if(!Array.isArray(i))throw Error("Invalid serialized tx input: must be array");return L.fromValuesArray(i,e)}static fromValuesArray(t,e={}){if(9!==t.length&&12!==t.length)throw Error("Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).");let[i,r,s,a,o,n,c,m,l,d,g,u]=t;return this._validateNotArray({chainId:i,v:d}),(0,h.jY)({nonce:r,maxPriorityFeePerGas:s,maxFeePerGas:a,gasLimit:o,value:c,v:d,r:g,s:u}),new L({chainId:(0,h.v3)(i),nonce:r,maxPriorityFeePerGas:s,maxFeePerGas:a,gasLimit:o,to:n,value:c,data:m,accessList:l??[],v:void 0!==d?(0,h.v3)(d):void 0,r:g,s:u},e)}getDataFee(){return F(this)}getEffectivePriorityFee(t){return v(this,t)}getUpfrontCost(t=h.N$){return u(this,t)}raw(){return[(0,h.XD)(this.chainId),(0,h.XD)(this.nonce),(0,h.XD)(this.maxPriorityFeePerGas),(0,h.XD)(this.maxFeePerGas),(0,h.XD)(this.gasLimit),void 0!==this.to?this.to.bytes:new Uint8Array(0),(0,h.XD)(this.value),this.data,this.accessList,void 0!==this.v?(0,h.XD)(this.v):new Uint8Array(0),void 0!==this.r?(0,h.XD)(this.r):new Uint8Array(0),void 0!==this.s?(0,h.XD)(this.s):new Uint8Array(0)]}serialize(){return w(this)}getMessageToSign(){return w(this,this.raw().slice(0,9))}getHashedMessageToSign(){return I(this)}hash(){return b(this)}getMessageToVerifySignature(){return this.getHashedMessageToSign()}getSenderPublicKey(){return p(this)}addSignature(t,e,i,r=!1){e=(0,h.O0)(e),i=(0,h.O0)(i);let s={...this.txOptions,common:this.common};return L.fromTxData({chainId:this.chainId,nonce:this.nonce,maxPriorityFeePerGas:this.maxPriorityFeePerGas,maxFeePerGas:this.maxFeePerGas,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,accessList:this.accessList,v:r?t-h.Ym:t,r:(0,h.v3)(e),s:(0,h.v3)(i)},s)}toJSON(){let t=m.getAccessListJSON(this.accessList);return{...super.toJSON(),chainId:(0,h.Z4)(this.chainId),maxPriorityFeePerGas:(0,h.Z4)(this.maxPriorityFeePerGas),maxFeePerGas:(0,h.Z4)(this.maxFeePerGas),accessList:t}}errorStr(){return this._getSharedErrorPostfix()+` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`}_errorMsg(t){return f(this,t)}}class z extends g{constructor(t,e={}){super({...t,type:o.AccessListEIP2930},e);let{chainId:i,accessList:r,gasPrice:s}=t;if(this.common=this._getCommon(e.common,i),this.chainId=this.common.chainId(),!this.common.isActivatedEIP(2930))throw Error("EIP-2930 not enabled on Common");this.activeCapabilities=this.activeCapabilities.concat([2718,2930]);let a=m.getAccessListData(r??[]);if(this.accessList=a.accessList,this.AccessListJSON=a.AccessListJSON,m.verifyAccessList(this.accessList),this.gasPrice=(0,h.v3)((0,h.O0)(s)),this._validateCannotExceedMaxInteger({gasPrice:this.gasPrice}),g._validateNotArray(t),this.gasPrice*this.gasLimit>h.E2)throw Error(this._errorMsg("gasLimit * gasPrice cannot exceed MAX_INTEGER"));A(this),x(this),(e?.freeze??!0)&&Object.freeze(this)}static fromTxData(t,e={}){return new z(t,e)}static fromSerializedTx(t,e={}){if(!1===(0,h.hD)(t.subarray(0,1),d(o.AccessListEIP2930)))throw Error(`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${o.AccessListEIP2930}, received: ${(0,h.ci)(t.subarray(0,1))}`);let i=n.yH.decode(Uint8Array.from(t.subarray(1)));if(!Array.isArray(i))throw Error("Invalid serialized tx input: must be array");return z.fromValuesArray(i,e)}static fromValuesArray(t,e={}){if(8!==t.length&&11!==t.length)throw Error("Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).");let[i,r,s,a,o,n,c,m,l,d,g]=t;return this._validateNotArray({chainId:i,v:l}),(0,h.jY)({nonce:r,gasPrice:s,gasLimit:a,value:n,v:l,r:d,s:g}),new z({chainId:(0,h.v3)(i),nonce:r,gasPrice:s,gasLimit:a,to:o,value:n,data:c,accessList:m??[],v:void 0!==l?(0,h.v3)(l):void 0,r:d,s:g},e)}getEffectivePriorityFee(t){return E(this.gasPrice,t)}getDataFee(){return F(this)}getUpfrontCost(){return this.gasLimit*this.gasPrice+this.value}raw(){return[(0,h.XD)(this.chainId),(0,h.XD)(this.nonce),(0,h.XD)(this.gasPrice),(0,h.XD)(this.gasLimit),void 0!==this.to?this.to.bytes:new Uint8Array(0),(0,h.XD)(this.value),this.data,this.accessList,void 0!==this.v?(0,h.XD)(this.v):new Uint8Array(0),void 0!==this.r?(0,h.XD)(this.r):new Uint8Array(0),void 0!==this.s?(0,h.XD)(this.s):new Uint8Array(0)]}serialize(){return w(this)}getMessageToSign(){return w(this,this.raw().slice(0,8))}getHashedMessageToSign(){return I(this)}hash(){return b(this)}getMessageToVerifySignature(){return this.getHashedMessageToSign()}getSenderPublicKey(){return p(this)}addSignature(t,e,i,r=!1){e=(0,h.O0)(e),i=(0,h.O0)(i);let s={...this.txOptions,common:this.common};return z.fromTxData({chainId:this.chainId,nonce:this.nonce,gasPrice:this.gasPrice,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,accessList:this.accessList,v:r?t-h.Ym:t,r:(0,h.v3)(e),s:(0,h.v3)(i)},s)}toJSON(){let t=m.getAccessListJSON(this.accessList);return{...super.toJSON(),chainId:(0,h.Z4)(this.chainId),gasPrice:(0,h.Z4)(this.gasPrice),accessList:t}}errorStr(){return this._getSharedErrorPostfix()+` gasPrice=${this.gasPrice} accessListCount=${this.accessList?.length??0}`}_errorMsg(t){return f(this,t)}}let S=(t,e,i,r,s,a)=>{let o;if(!(t.length===e.length&&e.length===i.length))throw Error("Number of blobVersionedHashes, blobs, and commitments not all equal");if(0===t.length)throw Error("Invalid transaction with empty blobs");try{o=a.verifyBlobKzgProofBatch(e,i,r)}catch(t){throw Error(`KZG verification of blobs fail with error=${t}`)}if(!o)throw Error("KZG proof cannot be verified from blobs/commitments");for(let e=0;e<t.length;e++){let r=(0,h.h$)(i[e],s);if(!(0,h.hD)(r,t[e]))throw Error(`commitment for blob at index ${e} does not match versionedHash`)}};class C extends g{constructor(t,e={}){super({...t,type:o.BlobEIP4844},e);let{chainId:i,accessList:r,maxFeePerGas:s,maxPriorityFeePerGas:a,maxFeePerBlobGas:n}=t;if(this.common=this._getCommon(e.common,i),this.chainId=this.common.chainId(),!this.common.isActivatedEIP(1559))throw Error("EIP-1559 not enabled on Common");if(!this.common.isActivatedEIP(4844))throw Error("EIP-4844 not enabled on Common");this.activeCapabilities=this.activeCapabilities.concat([1559,2718,2930]);let c=m.getAccessListData(r??[]);if(this.accessList=c.accessList,this.AccessListJSON=c.AccessListJSON,m.verifyAccessList(this.accessList),this.maxFeePerGas=(0,h.v3)((0,h.O0)(s)),this.maxPriorityFeePerGas=(0,h.v3)((0,h.O0)(a)),this._validateCannotExceedMaxInteger({maxFeePerGas:this.maxFeePerGas,maxPriorityFeePerGas:this.maxPriorityFeePerGas}),g._validateNotArray(t),this.gasLimit*this.maxFeePerGas>h.E2)throw Error(this._errorMsg("gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)"));if(this.maxFeePerGas<this.maxPriorityFeePerGas)throw Error(this._errorMsg("maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)"));for(let e of(this.maxFeePerBlobGas=(0,h.v3)((0,h.O0)((n??"")===""?"0x":n)),this.blobVersionedHashes=(t.blobVersionedHashes??[]).map(t=>(0,h.O0)(t)),A(this),x(this),this.blobVersionedHashes)){if(32!==e.length)throw Error(this._errorMsg("versioned hash is invalid length"));if(BigInt(e[0])!==this.common.param("sharding","blobCommitmentVersionKzg"))throw Error(this._errorMsg("versioned hash does not start with KZG commitment version"))}if(this.blobVersionedHashes.length>6)throw Error(this._errorMsg("tx can contain at most 6 blobs"));if(0===this.blobVersionedHashes.length)throw Error(this._errorMsg("tx should contain at least one blob"));if(void 0===this.to)throw Error(this._errorMsg('tx should have a "to" field and cannot be used to create contracts'));this.blobs=t.blobs?.map(t=>h.O0(t)),this.kzgCommitments=t.kzgCommitments?.map(t=>h.O0(t)),this.kzgProofs=t.kzgProofs?.map(t=>h.O0(t)),(e?.freeze??!0)&&Object.freeze(this)}static fromTxData(t,e){if(e?.common?.customCrypto?.kzg===void 0)throw Error("A common object with customCrypto.kzg initialized required to instantiate a 4844 blob tx");let i=e.common.customCrypto.kzg;if(void 0!==t.blobsData){if(void 0!==t.blobs)throw Error("cannot have both raw blobs data and encoded blobs in constructor");if(void 0!==t.kzgCommitments)throw Error("cannot have both raw blobs data and KZG commitments in constructor");if(void 0!==t.blobVersionedHashes)throw Error("cannot have both raw blobs data and versioned hashes in constructor");if(void 0!==t.kzgProofs)throw Error("cannot have both raw blobs data and KZG proofs in constructor");t.blobs=(0,h.KR)(t.blobsData.reduce((t,e)=>t+e)),t.kzgCommitments=(0,h.PS)(i,t.blobs),t.blobVersionedHashes=(0,h.CW)(t.kzgCommitments),t.kzgProofs=(0,h.y9)(i,t.blobs,t.kzgCommitments)}return new C(t,e)}getEffectivePriorityFee(t){return v(this,t)}static minimalFromNetworkWrapper(t,e){if(e?.common?.customCrypto?.kzg===void 0)throw Error("A common object with customCrypto.kzg initialized required to instantiate a 4844 blob tx");return C.fromTxData({...t,blobs:void 0,kzgCommitments:void 0,kzgProofs:void 0},e)}static fromSerializedTx(t,e={}){if(e.common?.customCrypto?.kzg===void 0)throw Error("A common object with customCrypto.kzg initialized required to instantiate a 4844 blob tx");if(!1===(0,h.hD)(t.subarray(0,1),d(o.BlobEIP4844)))throw Error(`Invalid serialized tx input: not an EIP-4844 transaction (wrong tx type, expected: ${o.BlobEIP4844}, received: ${(0,h.ci)(t.subarray(0,1))}`);let i=n.yH.decode(t.subarray(1));if(!Array.isArray(i))throw Error("Invalid serialized tx input: must be array");return C.fromValuesArray(i,e)}static fromValuesArray(t,e={}){if(e.common?.customCrypto?.kzg===void 0)throw Error("A common object with customCrypto.kzg initialized required to instantiate a 4844 blob tx");if(11!==t.length&&14!==t.length)throw Error("Invalid EIP-4844 transaction. Only expecting 11 values (for unsigned tx) or 14 values (for signed tx).");let[i,r,s,a,o,n,c,m,l,d,g,u,v,P]=t;return this._validateNotArray({chainId:i,v:u}),(0,h.jY)({nonce:r,maxPriorityFeePerGas:s,maxFeePerGas:a,gasLimit:o,value:c,maxFeePerBlobGas:d,v:u,r:v,s:P}),new C({chainId:(0,h.v3)(i),nonce:r,maxPriorityFeePerGas:s,maxFeePerGas:a,gasLimit:o,to:n,value:c,data:m,accessList:l??[],maxFeePerBlobGas:d,blobVersionedHashes:g,v:void 0!==u?(0,h.v3)(u):void 0,r:v,s:P},e)}static fromSerializedBlobTxNetworkWrapper(t,e){if(!e||!e.common)throw Error("common instance required to validate versioned hashes");if(e.common?.customCrypto?.kzg===void 0)throw Error("A common object with customCrypto.kzg initialized required to instantiate a 4844 blob tx");if(!1===(0,h.hD)(t.subarray(0,1),d(o.BlobEIP4844)))throw Error(`Invalid serialized tx input: not an EIP-4844 transaction (wrong tx type, expected: ${o.BlobEIP4844}, received: ${(0,h.ci)(t.subarray(0,1))}`);let i=n.yH.decode(t.subarray(1));if(4!==i.length)throw Error("Expected 4 values in the deserialized network transaction");let[r,s,a,c]=i,m=C.fromValuesArray(r,{...e,freeze:!1});if(void 0===m.to)throw Error("BlobEIP4844Transaction can not be send without a valid `to`");let l=Number(e.common.param("sharding","blobCommitmentVersionKzg"));return S(m.blobVersionedHashes,s,a,c,l,e.common.customCrypto.kzg),m.blobs=s,m.kzgCommitments=a,m.kzgProofs=c,(e?.freeze??!0)&&Object.freeze(m),m}getDataFee(){return F(this)}getUpfrontCost(t=h.N$){return u(this,t)}raw(){return[(0,h.XD)(this.chainId),(0,h.XD)(this.nonce),(0,h.XD)(this.maxPriorityFeePerGas),(0,h.XD)(this.maxFeePerGas),(0,h.XD)(this.gasLimit),void 0!==this.to?this.to.bytes:new Uint8Array(0),(0,h.XD)(this.value),this.data,this.accessList,(0,h.XD)(this.maxFeePerBlobGas),this.blobVersionedHashes,void 0!==this.v?(0,h.XD)(this.v):new Uint8Array(0),void 0!==this.r?(0,h.XD)(this.r):new Uint8Array(0),void 0!==this.s?(0,h.XD)(this.s):new Uint8Array(0)]}serialize(){return w(this)}serializeNetworkWrapper(){if(void 0===this.blobs||void 0===this.kzgCommitments||void 0===this.kzgProofs)throw Error("cannot serialize network wrapper without blobs, KZG commitments and KZG proofs provided");return w(this,[this.raw(),this.blobs,this.kzgCommitments,this.kzgProofs])}getMessageToSign(){return w(this,this.raw().slice(0,11))}getHashedMessageToSign(){return I(this)}hash(){return b(this)}getMessageToVerifySignature(){return this.getHashedMessageToSign()}getSenderPublicKey(){return p(this)}static networkWrapperToJson(t,e){let i=this.fromSerializedBlobTxNetworkWrapper(t,e),r=m.getAccessListJSON(i.accessList);return{...i.toJSON(),chainId:(0,h.Z4)(i.chainId),maxPriorityFeePerGas:(0,h.Z4)(i.maxPriorityFeePerGas),maxFeePerGas:(0,h.Z4)(i.maxFeePerGas),accessList:r,maxFeePerBlobGas:(0,h.Z4)(i.maxFeePerBlobGas),blobVersionedHashes:i.blobVersionedHashes.map(t=>(0,h.ci)(t)),blobs:i.blobs.map(t=>(0,h.ci)(t)),kzgCommitments:i.kzgCommitments.map(t=>(0,h.ci)(t)),kzgProofs:i.kzgProofs.map(t=>(0,h.ci)(t))}}toJSON(){let t=m.getAccessListJSON(this.accessList);return{...super.toJSON(),chainId:(0,h.Z4)(this.chainId),maxPriorityFeePerGas:(0,h.Z4)(this.maxPriorityFeePerGas),maxFeePerGas:(0,h.Z4)(this.maxFeePerGas),accessList:t,maxFeePerBlobGas:(0,h.Z4)(this.maxFeePerBlobGas),blobVersionedHashes:this.blobVersionedHashes.map(t=>(0,h.ci)(t))}}addSignature(t,e,i,r=!1){e=(0,h.O0)(e),i=(0,h.O0)(i);let s={...this.txOptions,common:this.common};return C.fromTxData({chainId:this.chainId,nonce:this.nonce,maxPriorityFeePerGas:this.maxPriorityFeePerGas,maxFeePerGas:this.maxFeePerGas,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,accessList:this.accessList,v:r?t-h.Ym:t,r:(0,h.v3)(e),s:(0,h.v3)(i),maxFeePerBlobGas:this.maxFeePerBlobGas,blobVersionedHashes:this.blobVersionedHashes,blobs:this.blobs,kzgCommitments:this.kzgCommitments,kzgProofs:this.kzgProofs},s)}errorStr(){return this._getSharedErrorPostfix()+` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`}_errorMsg(t){return f(this,t)}numBlobs(){return this.blobVersionedHashes.length}}class G extends g{constructor(t,e={}){super({...t,type:o.EOACodeEIP7702},e);let{chainId:i,accessList:r,authorizationList:s,maxFeePerGas:a,maxPriorityFeePerGas:n}=t;if(this.common=this._getCommon(e.common,i),this.chainId=this.common.chainId(),!this.common.isActivatedEIP(7702))throw Error("EIP-7702 not enabled on Common");this.activeCapabilities=this.activeCapabilities.concat([1559,2718,2930,7702]);let c=m.getAccessListData(r??[]);this.accessList=c.accessList,this.AccessListJSON=c.AccessListJSON,m.verifyAccessList(this.accessList);let d=l.getAuthorizationListData(s??[]);if(this.authorizationList=d.authorizationList,this.AuthorizationListJSON=d.AuthorizationListJSON,l.verifyAuthorizationList(this.authorizationList),this.maxFeePerGas=(0,h.v3)((0,h.O0)(a)),this.maxPriorityFeePerGas=(0,h.v3)((0,h.O0)(n)),this._validateCannotExceedMaxInteger({maxFeePerGas:this.maxFeePerGas,maxPriorityFeePerGas:this.maxPriorityFeePerGas}),g._validateNotArray(t),this.gasLimit*this.maxFeePerGas>h.E2)throw Error(this._errorMsg("gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)"));if(this.maxFeePerGas<this.maxPriorityFeePerGas)throw Error(this._errorMsg("maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)"));A(this),x(this),(e?.freeze??!0)&&Object.freeze(this)}static fromTxData(t,e={}){return new G(t,e)}static fromSerializedTx(t,e={}){if(!1===(0,h.hD)(t.subarray(0,1),d(o.EOACodeEIP7702)))throw Error(`Invalid serialized tx input: not an EIP-7702 transaction (wrong tx type, expected: ${o.EOACodeEIP7702}, received: ${(0,h.ci)(t.subarray(0,1))}`);let i=n.yH.decode(t.subarray(1));if(!Array.isArray(i))throw Error("Invalid serialized tx input: must be array");return G.fromValuesArray(i,e)}static fromValuesArray(t,e={}){if(10!==t.length&&13!==t.length)throw Error("Invalid EIP-7702 transaction. Only expecting 10 values (for unsigned tx) or 13 values (for signed tx).");let[i,r,s,a,o,n,c,m,l,d,g,u,v]=t;return this._validateNotArray({chainId:i,v:g}),(0,h.jY)({nonce:r,maxPriorityFeePerGas:s,maxFeePerGas:a,gasLimit:o,value:c,v:g,r:u,s:v}),new G({chainId:(0,h.v3)(i),nonce:r,maxPriorityFeePerGas:s,maxFeePerGas:a,gasLimit:o,to:n,value:c,data:m,accessList:l??[],authorizationList:d??[],v:void 0!==g?(0,h.v3)(g):void 0,r:u,s:v},e)}getDataFee(){return function(t){let e=BigInt(m.getDataFeeEIP2930(t.accessList,t.common)),i=BigInt(t.authorizationList.length*Number(t.common.param("gasPrices","perAuthBaseCost")));return y(t,e+i)}(this)}getEffectivePriorityFee(t){return v(this,t)}getUpfrontCost(t=h.N$){return u(this,t)}raw(){return[(0,h.XD)(this.chainId),(0,h.XD)(this.nonce),(0,h.XD)(this.maxPriorityFeePerGas),(0,h.XD)(this.maxFeePerGas),(0,h.XD)(this.gasLimit),void 0!==this.to?this.to.bytes:new Uint8Array(0),(0,h.XD)(this.value),this.data,this.accessList,this.authorizationList,void 0!==this.v?(0,h.XD)(this.v):new Uint8Array(0),void 0!==this.r?(0,h.XD)(this.r):new Uint8Array(0),void 0!==this.s?(0,h.XD)(this.s):new Uint8Array(0)]}serialize(){return w(this)}getMessageToSign(){return w(this,this.raw().slice(0,10))}getHashedMessageToSign(){return I(this)}hash(){return b(this)}getMessageToVerifySignature(){return this.getHashedMessageToSign()}getSenderPublicKey(){return p(this)}addSignature(t,e,i,r=!1){e=(0,h.O0)(e),i=(0,h.O0)(i);let s={...this.txOptions,common:this.common};return G.fromTxData({chainId:this.chainId,nonce:this.nonce,maxPriorityFeePerGas:this.maxPriorityFeePerGas,maxFeePerGas:this.maxFeePerGas,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,accessList:this.accessList,authorizationList:this.authorizationList,v:r?t-h.Ym:t,r:(0,h.v3)(e),s:(0,h.v3)(i)},s)}toJSON(){let t=m.getAccessListJSON(this.accessList);return{...super.toJSON(),chainId:(0,h.Z4)(this.chainId),maxPriorityFeePerGas:(0,h.Z4)(this.maxPriorityFeePerGas),maxFeePerGas:(0,h.Z4)(this.maxFeePerGas),accessList:t,authorizationList:this.AuthorizationListJSON}}errorStr(){return this._getSharedErrorPostfix()+` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`}_errorMsg(t){return f(this,t)}}function D(t,e){let i=Number(t),r=2*Number(e);return i===r+35||i===r+36}class O extends g{constructor(t,e={}){if(super({...t,type:o.Legacy},e),this.common=this._validateTxV(this.v,e.common),this.keccakFunction=this.common.customCrypto.keccak256??P.wn,this.gasPrice=(0,h.v3)((0,h.O0)(t.gasPrice)),this.gasPrice*this.gasLimit>h.E2)throw Error(this._errorMsg("gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)"));this._validateCannotExceedMaxInteger({gasPrice:this.gasPrice}),g._validateNotArray(t),this.common.gteHardfork("spuriousDragon")&&(this.isSigned()?D(this.v,this.common.chainId())&&this.activeCapabilities.push(a.EIP155ReplayProtection):this.activeCapabilities.push(a.EIP155ReplayProtection)),(e?.freeze??!0)&&Object.freeze(this)}static fromTxData(t,e={}){return new O(t,e)}static fromSerializedTx(t,e={}){let i=n.yH.decode(t);if(!Array.isArray(i))throw Error("Invalid serialized tx input. Must be array");return this.fromValuesArray(i,e)}static fromValuesArray(t,e={}){if(6!==t.length&&9!==t.length)throw Error("Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).");let[i,r,s,a,o,n,c,m,l]=t;return(0,h.jY)({nonce:i,gasPrice:r,gasLimit:s,value:o,v:c,r:m,s:l}),new O({nonce:i,gasPrice:r,gasLimit:s,to:a,value:o,data:n,v:c,r:m,s:l},e)}getEffectivePriorityFee(t){return E(this.gasPrice,t)}raw(){return[(0,h.XD)(this.nonce),(0,h.XD)(this.gasPrice),(0,h.XD)(this.gasLimit),void 0!==this.to?this.to.bytes:new Uint8Array(0),(0,h.XD)(this.value),this.data,void 0!==this.v?(0,h.XD)(this.v):new Uint8Array(0),void 0!==this.r?(0,h.XD)(this.r):new Uint8Array(0),void 0!==this.s?(0,h.XD)(this.s):new Uint8Array(0)]}serialize(){return n.yH.encode(this.raw())}getMessageToSign(){let t=[(0,h.XD)(this.nonce),(0,h.XD)(this.gasPrice),(0,h.XD)(this.gasLimit),void 0!==this.to?this.to.bytes:new Uint8Array(0),(0,h.XD)(this.value),this.data];return this.supports(a.EIP155ReplayProtection)&&(t.push((0,h.XD)(this.common.chainId())),t.push((0,h._K)((0,h.O0)(0))),t.push((0,h._K)((0,h.O0)(0)))),t}getHashedMessageToSign(){let t=this.getMessageToSign();return this.keccakFunction(n.yH.encode(t))}getDataFee(){return y(this)}getUpfrontCost(){return this.gasLimit*this.gasPrice+this.value}hash(){return b(this)}getMessageToVerifySignature(){if(!this.isSigned())throw Error(this._errorMsg("This transaction is not signed"));return this.getHashedMessageToSign()}getSenderPublicKey(){return p(this)}addSignature(t,e,i,r=!1){e=(0,h.O0)(e),i=(0,h.O0)(i),r&&this.supports(a.EIP155ReplayProtection)&&(t+=this.common.chainId()*h.m5+h.Be);let s={...this.txOptions,common:this.common};return O.fromTxData({nonce:this.nonce,gasPrice:this.gasPrice,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,v:t,r:(0,h.v3)(e),s:(0,h.v3)(i)},s)}toJSON(){return{...super.toJSON(),gasPrice:(0,h.Z4)(this.gasPrice)}}_validateTxV(t,e){let i;let r=void 0!==t?Number(t):void 0;if(void 0!==r&&r<37&&27!==r&&28!==r)throw Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${r}`);if(void 0!==r&&0!==r&&(!e||e.gteHardfork("spuriousDragon"))&&27!==r&&28!==r){if(e){if(!D(BigInt(r),e.chainId()))throw Error(`Incompatible EIP155-based V ${r} and chain id ${e.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`)}else{let t;t=(r-35)%2==0?35:36,i=BigInt(r-t)/h.m5}}return this._getCommon(e,i)}errorStr(){return this._getSharedErrorPostfix()+` gasPrice=${this.gasPrice}`}_errorMsg(t){return f(this,t)}}let T=t=>{let e=Object.assign({},t);return e.gasLimit=(0,h.Fy)(e.gasLimit??e.gas,h.qT.BigInt),e.data=void 0===e.data?e.input:e.data,e.gasPrice=void 0!==e.gasPrice?BigInt(e.gasPrice):void 0,e.value=void 0!==e.value?BigInt(e.value):void 0,e.to=null!==e.to&&void 0!==e.to?(0,h.V_)((0,h.O0)(e.to),20):null,e.v="0x0"===e.v?"0x":e.v,e.r="0x0"===e.r?"0x":e.r,e.s="0x0"===e.s?"0x":e.s,("0x"!==e.v||"0x"!==e.r||"0x"!==e.s)&&(e.v=(0,h.Fy)(e.v,h.qT.BigInt)),e};class k{constructor(){}static fromTxData(t,e={}){if(!("type"in t)||void 0===t.type||Number((0,h.v3)((0,h.O0)(t.type)))===o.Legacy)return O.fromTxData(t,e);if(Number((0,h.v3)((0,h.O0)(t.type)))===o.AccessListEIP2930)return z.fromTxData(t,e);if(Number((0,h.v3)((0,h.O0)(t.type)))===o.FeeMarketEIP1559)return L.fromTxData(t,e);if(Number((0,h.v3)((0,h.O0)(t.type)))===o.BlobEIP4844)return C.fromTxData(t,e);if(Number((0,h.v3)((0,h.O0)(t.type)))===o.EOACodeEIP7702)return G.fromTxData(t,e);throw Error(`Tx instantiation with type ${t?.type} not supported`)}static fromSerializedData(t,e={}){if(!(t[0]<=127))return O.fromSerializedTx(t,e);switch(t[0]){case o.AccessListEIP2930:return z.fromSerializedTx(t,e);case o.FeeMarketEIP1559:return L.fromSerializedTx(t,e);case o.BlobEIP4844:return C.fromSerializedTx(t,e);case o.EOACodeEIP7702:return G.fromSerializedTx(t,e);default:throw Error(`TypedTransaction with ID ${t[0]} unknown`)}}static fromBlockBodyData(t,e={}){if(t instanceof Uint8Array)return this.fromSerializedData(t,e);if(Array.isArray(t))return O.fromValuesArray(t,e);throw Error("Cannot decode transaction: unknown type input")}static async fromJsonRpcProvider(t,e,i){let r=(0,h.VH)(t),s=await (0,h.YZ)(r,{method:"eth_getTransactionByHash",params:[e]});if(null===s)throw Error("No data returned from provider");return k.fromRPC(s,i)}static async fromRPC(t,e={}){return k.fromTxData(T(t),e)}}}}]);